{1,
{9,
{"1С:Предприятие 8.1. Простые примеры разработки",1,0,"",""},
{29,
{"Примитивные типы, системные функции",1,0,"",""},
{0,
{"1.1. Пример использования литерала ДАТАВРЕМЯ()",0,0,"1.1","ДАТАВРЕМЯ(2005, 01, 01)"}
},
{0,
{"1.2. Проверка даты на пустое значение",0,0,"1.2","Если ДатаПроверяемая = Дата(1, 1, 1) Тогда
	Сообщить(""Пустая дата!"");
КонецЕсли;
"}
},
{0,
{"1.3. Сравнение дней",0,0,"1.3","Если НачалоДня(Дата1) = НачалоДня(Дата2) Тогда
	Сообщить(""Дни совпадают!"");
КонецЕсли;
"}
},
{0,
{"1.4. Увеличение даты на один день",0,0,"1.4","СледующийДень = ТекущаяДата() + 60 * 60 * 24;"}
},
{0,
{"1.5. Добавление дней к дате в запросе",0,0,"1.5","Функция ПолучитьДень(ИсходнаяДата, КоличествоПрибавляемыхДней)

	Запрос = Новый Запрос(""
	|ВЫБРАТЬ 
	|	ДОБАВИТЬКДАТЕ(&ИсходнаяДата, ДЕНЬ, &Количество) как Дата"");

	Запрос.УстановитьПараметр(""ИсходнаяДата"", ИсходнаяДата);
	Запрос.УстановитьПараметр(""Количество"",   КоличествоПрибавляемыхДней);

	Возврат Запрос.Выполнить().Выгрузить()[0].Дата;

КонецФункции
"}
},
{0,
{"1.6. Проверка типа значения",0,0,"1.6","ИмяНужногоТипа = ""ДокументСсылка.РеализацияТоваров"";

Если ТипЗнч(ОбрабатываемыйДокумент) = Тип(ИмяНужногоТипа) Тогда

	// Строки кода, выполняемые при истинности условия.
	//	…

КонецЕсли;
"}
},
{0,
{"1.7. Очистка значения реквизита ссылочного типа",0,0,"1.7","Товар = Справочники.Номенклатура.ПустаяСсылка();"}
},
{0,
{"1.8. Очистка значения реквизита, имеющего тип ХранилищеЗначения",0,0,"1.8","РеквизитХранилище = Неопределено;"}
},
{0,
{"1.9. Проверка типа значения, хранящегося в реквизите, имеющем тип ХранилищеЗначения",0,0,"1.9","Значение = Фотография.Получить();

Если Значение <> Неопределено Тогда
	Если ТипЗнч(Значение) = Тип(""Строка"") Тогда

		// Обработать строку.
		//	...

		ИначеЕсли ТипЗнч(Значение) = Тип(""Картинка"") Тогда

		// Обработать картинку.
		Сообщить(""Картинка"");
	КонецЕсли;	
КонецЕсли;	
"}
},
{0,
{"1.10. Сжатие данных, помещаемых в хранилище значения",0,0,"1.10","СопроводительнаяИнформация = Новый ХранилищеЗначения(ПомещаемоеЗначение, Новый СжатиеДанных(9));"}
},
{0,
{"1.11. Выбор значения составного типа",0,0,"1.11","МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип(""СправочникСсылка.ФизЛица""));

// Добавить другие типы.
//	...

ОписаниеВозможныхТипов = Новый ОписаниеТипов(МассивТипов);
ПолученноеЗначение = Неопределено;	 
ВвестиЗначение(ПолученноеЗначение, ""Выберите значение:"", ОписаниеВозможныхТипов);
"}
},
{0,
{"1.12. Округление в запросе",0,0,"1.12","ВЫБРАТЬ
	ПродажиОбороты.Номенклатура,
	ВЫРАЗИТЬ(ПродажиОбороты.СтоимостьОборот/ПродажиОбороты.КоличествоОборот КАК ЧИСЛО(15, 2)) КАК СредняяЦенаПродажи
ИЗ
	РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон) КАК ПродажиОбороты
"}
},
{0,
{"1.13. Вывод многострочного предупреждения",0,0,"1.13","Предупреждение(""На складе: "" + Остаток + Символы.ПС 
			 + ""В резерве : "" + Зарезервировано + Символы.ПС 
			 + ""Свободный остаток: "" + (Остаток - Зарезервировано), 20, ""Состояние остатков"");
"}
},
{0,
{"1.14. Получение текущего времени",0,0,"1.14","ТекущееВремя = Формат(ТекущаяДата(), ""ДЛФ=В""); 
Сообщить(ТекущееВремя);"}
},
{0,
{"1.15. Вывод числа прописью без дробной части",0,0,"1.15","ФорматнаяСтрока = ""Л=ru_RU"";
ПараметрыПредметаИсчисления = "" , , , , , , , , 0"";

Сообщить(ЧислоПрописью(ВыводимоеЧисло, ФорматнаяСтрока, ПараметрыПредметаИсчисления));
"}
},
{0,
{"1.16. Выввод числа прописью с указанием сотых в дробной части",0,0,"1.16","ПараметрыПредметаИсчисления = ""целая, целых, целых, ж, сотая, сотой, сотых, ж, 2"";
ФорматнаяСтрока = ""Л=ru_RU; ДП=Истина"";

Сообщить(ЧислоПрописью(ВыводимоеЧисло, ФорматнаяСтрока, ПараметрыПредметаИсчисления));"}
},
{0,
{"1.17. Вывод числа прописью с указанием дробной части в граммах",0,0,"1.17","ПараметрыПредметаИсчисления = ""килограмм, килограмма, килограммов, м, грамм, грамма, граммов, м, 3"";
ФорматнаяСтрока = ""Л=ru_RU; ДП=Истина"";

Сообщить(ЧислоПрописью(ВыводимоеЧисло, ФорматнаяСтрока, ПараметрыПредметаИсчисления));                                          	"}
},
{0,
{"1.18. Вывод суммы прописью по-английски",0,0,"1.18","ФорматнаяСтрока = ""Л=en_US"";
ПараметрыПредметаИсчисления = ""dollar, dollars, cent, cents, 2"";

Сообщить(ЧислоПрописью(Сумма, ФорматнаяСтрока, ПараметрыПредметаИсчисления));"}
},
{0,
{"1.19. Загрузка внешней компоненты",0,0,"1.19","Попытка
	ЗагрузитьВнешнююКомпоненту(""scanopos.dll"");

Исключение
	Сообщить(""Ошибка загрузки внешней компоненты!"");

КонецПопытки;	

Попытка

	// Получить объект компоненты.
	Объект = Новый(""AddIn.Scanner"");

Исключение
	Сообщить(""Не удалось создать объект внешней компоненты"");

КонецПопытки;
"}
},
{0,
{"1.20. Выполнение команды операционной системы",0,0,"1.120","КомандаСистемы(""del *.* /q"", ""c:\temp"");"}
},
{0,
{"1.21. Вызов командной строки",0,0,"1.21","КомандаСистемы(""cmd"");"}
},
{0,
{"1.22. Запуск внешнего приложения",0,0,"1.22","ЗапуститьПриложение(""ШаблонДоговора.doc"");"}
},
{0,
{"1.23. Управление исполнением кода",0,0,"1.23","#Если ВнешнееСоединение Тогда

	// Фрагмент кода, который должен выполняться в сессии внешнего соединения.
	//	...
	
#КонецЕсли

#Если Клиент Тогда

	// Фрагмент кода, который должен выполняться на клиентском месте.
	//	...
	
#КонецЕсли

#Если Сервер Тогда

	// Фрагмент кода, который должен выполняться на сервере.
	//	...
	
#КонецЕсли
"}
},
{0,
{"1.24. Исполнение кода в транзакции",0,0,"1.24","НачатьТранзакцию(); 

// В переменной ""ВыборкаДанных"" содержатся данные для записи в справочник.
Пока ВыборкаДанных.Следующий() Цикл
	ЭлементОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
	
	ЭлементОбъект.Код 		   = Выборка.Код;
	ЭлементОбъект.Наименование = Выборка.Наименование;
	
	// Остальные реквизиты
	//	...
	
	ЭлементОбъект.Записать();
	
КонецЦикла;	

ЗафиксироватьТранзакцию();
"}
},
{0,
{"1.25. Отмена транзакции",0,0,"1.25","ОтменитьТранзакцию();"}
},
{0,
{"1.26. Расчет сложного процента",0,0,"1.26","Функция СложныйПроцент(Кредит, Ставка, Срок = 1)
	
	Возврат Кредит * Pow(1 + Ставка / 100, Срок);

КонецФункции
"}
},
{0,
{"1.27. Использование генератора случайных чисел",0,0,"1.27","НачальноеЧисло = 167;
ГСЧ = Новый ГенераторСлучайныхЧисел(НачальноеЧисло);
СлучайноеЧисло = ГСЧ.СлучайноеЧисло(0, 1000);
"}
},
{0,
{"1.28. Стандартная инициализация генератора случайных чисел",0,0,"1.28","ГСЧ = Новый ГенераторСлучайныхЧисел();
СлучайноеЧисло = ГСЧ.СлучайноеЧисло(0, 1000);"}
},
{0,
{"1.29. Проверка заполненности значения",0,0,"1.29","Если ЗначениеЗаполнено(ПроверяемоеЗначение) Тогда

	Сообщить(""Значение заполнено"");

КонецЕсли;"}
}
},
{95,
{"Универсальные коллекции",1,0,"",""},
{0,
{"2.1. Создание массива",0,0,"2.1","СозданныйМассив = Новый Массив();"}
},
{0,
{"2.2. Создание одномерного массива",0,0,"2.2","СозданныйМассив = Новый Массив(10);"}
},
{0,
{"2.3. Создание многомерного массива",0,0,"2.3","ДвумерныйМассив = Новый Массив (2, 8);"}
},
{0,
{"2.4. Создание многомерного массива добавлением элементов",0,0,"2.4","ДвумерныйМассив = Новый Массив;

МассивВторогоПорядка = Новый Массив (8);

ДвумерныйМассив.Добавить(МассивВторогоПорядка);
ДвумерныйМассив.Добавить(МассивВторогоПорядка);
"}
},
{0,
{"2.5. Чтение массива с указанием индексов элемента",0,0,"2.5","Значение = ДвумерныйМассив[2][5];"}
},
{0,
{"2.6. Чтение массива с помощью метода Получить()",0,0,"2.6","Значение = ДвумерныйМассив.Получить(2).Получить(5);"}
},
{0,
{"2.7. Добавление элемента к массиву",0,0,"2.7","НашМассив.Добавить(НовоеЗначение);"}
},
{0,
{"2.8. Добавление элемента с указанным индексом",0,0,"2.8","Массив = Новый Массив;

// ...

Массив.Вставить(5, ""ООО """"Лабан""""""); 
"}
},
{0,
{"2.9. Определение размера массива",0,0,"2.9","Размер = НашМассив.Количество();"}
},
{0,
{"2.10. Обращение к элементу массива по индексу",0,0,"2.10","ПервоеЗначение = НашМассив[0];

//	...

НашМассив[9] = ДесятоеЗначение;
"}
},
{0,
{"2.11. Обращение к элементу массива с помощью метода Получить()",0,0,"2.11","ПервоеЗначение = НашМассив.Получить(0);

// 	...
	
НашМассив.Установить(9, ДесятоеЗначение);
"}
},
{0,
{"2.12. Перебор всех числовых элементов массива",0,0,"2.12","Для Каждого ЭлементМассива Из МассивЭлементов Цикл
	
	Если ТипЗнч(ЭлементМассива) = Тип(""Число"") Тогда
		Сообщить(ЭлементМассива);
		
	КонецЕсли;
	
КонецЦикла; 
"}
},
{0,
{"2.13. Обнуление числовых элементов массива",0,0,"2.13","Для Сч = 0 по МассивЭлементов.ВГраница() Цикл

	Если ТипЗнч(МассивЭлементов[Сч]) = Тип(""Число"") Тогда
		МассивЭлементов[Сч] = 0;
		
	КонецЕсли;

КонецЦикла;
"}
},
{0,
{"2.14. Удаление элемента массива",0,0,"2.14","МассивЭлементов.Удалить(0);"}
},
{0,
{"2.15. Удаление всех числовых элементов массива",0,0,"2.15","Индекс = МассивЭлементов.ВГраница();

Пока Индекс >= 0 Цикл

	Если ТипЗнч(МассивЭлементов[Индекс]) = Тип(""Число"") Тогда
		МассивЭлементов.Удалить(Индекс);
		
	КонецЕсли;

	Индекс = Индекс - 1;
	
КонецЦикла;
"}
},
{0,
{"2.16. Удаление всех элементов массива",0,0,"2.16","Массив.Очистить();"}
},
{0,
{"2.17. Удаление повторяющихся элементов массива",0,0,"2.17","Процедура УдалитьПовторяющиесяЭлементы(Массив)
	
	ТекущийИндекс  = 0;
	ВсегоЭлементов = Массив.Количество();
		
	Пока ТекущийИндекс < ВсегоЭлементов Цикл
		Индекс2 = ТекущийИндекс + 1;
		
		Пока Индекс2 <ВсегоЭлементов Цикл
				
			Если Массив[Индекс2] = Массив[ТекущийИндекс] Тогда
				Массив.Удалить(Индекс2);
				ВсегоЭлементов = ВсегоЭлементов - 1;

			Иначе
				Индекс2 = Индекс2 + 1;
				
			КонецЕсли;
			
		КонецЦикла; 
			
		ТекущийИндекс = ТекущийИндекс + 1;
			
	КонецЦикла; 

КонецПроцедуры
"}
},
{0,
{"2.18. Копирование массива",0,0,"2.18","Функция СкопироватьМассив(ИсходныйМассив)	
		
	МассивКопия = Новый Массив;
		
	Для Каждого Элемент Из ИсходныйМассив Цикл
		МассивКопия.Добавить(Элемент);
		
	КонецЦикла;
		
	Возврат МассивКопия;
	
КонецФункции 
"}
},
{0,
{"2.19. Проверка массивов на идентичность",0,0,"2.19","Функция ПроверитьИдентичностьМассивов(ПервыйМассив, ВторойМассив) 

	НаибольшийИндекс = ПервыйМассив.ВГраница();

	Если НаибольшийИндекс <> ВторойМассив.ВГраница () Тогда
		Возврат Ложь;
		
	КонецЕсли;
	 
	Для Счетчик = 0 По НаибольшийИндекс Цикл

		Если ПервыйМассив[Счетчик] <> ВторойМассив[Счетчик] Тогда
			Возврат Ложь;
			
		КонецЕсли;

	КонецЦикла; 		

	Возврат Истина;

КонецФункции 
"}
},
{0,
{"2.20. Название листинга",0,0,"2.20","СписокЗначений = Новый СписокЗначений;

СписокЗначений.ЗагрузитьЗначения(МассивНаименований);
СписокЗначений.СортироватьПоЗначению();
МассивНаименований = СписокЗначений.ВыгрузитьЗначения();
"}
},
{0,
{"2.21. Сортировка с указанием направления",0,0,"2.21","СписокЗначений.СортироватьПоЗначению(НаправлениеСортировки.Убыв);"}
},
{0,
{"2.22. Удаление пустых значений массива",0,0,"2.22","Процедура УдалитьПустыеЭлементы(МассивНоменклатуры)

	Счетчик 			= 0;
	КоличествоЭлементов = МассивНоменклатуры.Количество();

	Пока Счетчик < КоличествоЭлементов Цикл

		Если МассивНоменклатуры [Счетчик].Пустая() Тогда
			МассивНоменклатуры.Удалить(Счетчик);
			
			КоличествоЭлементов = КоличествоЭлементов - 1;

		Иначе
			Счетчик = Счетчик + 1;
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры
"}
},
{0,
{"2.23. Объединение массивов",0,0,"2.23","МассивНоменклатуры 	   = СсылкаНаДокумент.Номенклатура  .ВыгрузитьКолонку(""Номенклатура"");
МассивНоменклатурыТара = СсылкаНаДокумент.ВозвратнаяТара.ВыгрузитьКолонку(""Номенклатура"");

Для Каждого ЭлементМассиваТара Из МассивНоменклатурыТара Цикл
	МассивНоменклатуры.Добавить(ЭлементМассиваТара);
	
КонецЦикла; 
"}
},
{0,
{"2.24. Поиск совпадающих имен колонок",0,0,"2.24","МассивСовпадающихКолонок = Новый Массив();

Для Каждого Колонка Из ТаблицаПриемник.Колонки Цикл
	ИмяКолонкиПриемника = Колонка.Имя;

	Если ТаблицаИсточник.Колонки.Найти(ИмяКолонкиПриемника) <> Неопределено Тогда
		МассивСовпадающихКолонок.Добавить(ИмяКолонкиПриемника);
		
	КонецЕсли;

КонецЦикла;"}
},
{0,
{"2.25. Использование массива для формирования отбора",0,0,"2.25","Запрос = Новый Запрос;

Запрос.Текст = 
""ВЫБРАТЬ
|	ОтпускаОрганизацииРаботникиОрганизации.ФизЛицо,
|	ОтпускаОрганизацииРаботникиОрганизации.ДатаНачала,
|	ОтпускаОрганизацииРаботникиОрганизации.ДатаОкончания
|ИЗ
|	Документ.ОтпускаОрганизации.РаботникиОрганизации КАК ОтпускаОрганизацииРаботникиОрганизации
|
|ГДЕ
|	ОтпускаОрганизацииРаботникиОрганизации.ПричинаОтсутствия В (&МассивПричин)"";

МассивПричин = Новый Массив;

МассивПричин.Добавить(Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускБезСохраненияЗарплаты);
МассивПричин.Добавить(Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускУчебный);

Запрос.УстановитьПараметр(""МассивПричин"", МассивПричин);
"}
},
{0,
{"2.26. Получение массива расчетчиков с помощью объектной модели",0,0,"2.26","Функция ПолучитьМассивРасчетчиков(Подразделение)

	НаборЗаписей = РегистрыСведений.РасчетчикиЗарплатыОрганизации.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ПодразделениеОрганизации.Установить(Подразделение);
	НаборЗаписей.Прочитать();
	
	МассивРасчетчиков = НаборЗаписей.ВыгрузитьКолонку(""Пользователь"");
	
	Возврат МассивРасчетчиков;

КонецФункции
"}
},
{0,
{"2.27. Получение массива расчетчиков с помощью запроса",0,0,"2.27","Функция ПолучитьМассивРасчетчиков(Подразделение)

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	""ВЫБРАТЬ
	|	РасчетчикиЗарплатыОрганизации.Пользователь КАК Расчетчик
	|ИЗ
	|	РегистрСведений.РасчетчикиЗарплатыОрганизации КАК РасчетчикиЗарплатыОрганизации
	|
	|ГДЕ
	|	РасчетчикиЗарплатыОрганизации.ПодразделениеОрганизации = &Подразделение"";
	 
	Запрос.УстановитьПараметр(""Подразделение"", Подразделение);
	 
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
 
	МассивРасчетчиков = Новый Массив;

	Пока Выборка.Следующий() Цикл
		МассивРасчетчиков.Добавить(Выборка.Расчетчик);
		
	КонецЦикла;

	Возврат МассивРасчетчиков;

КонецФункции
"}
},
{0,
{"2.28. Создание структуры",0,0,"2.28","СозданнаяСтруктура = Новый Структура;"}
},
{0,
{"2.29. Создание структуры с заранее определенными элементами",0,0,"2.29","Оппонент = Новый Структура (""Фамилия, Имя, Отчество, Возраст"", ""Иванов"", ""Иван"", ""Иванович"", 7);"}
},
{0,
{"2.30. Добавление элементов в структуру",0,0,"2.30","Оппонент = Новый Структура (""Фамилия, Имя, Отчество, Возраст"", ""Иванов"", ""Иван"", ""Иванович"", 7);

//	...

Оппонент.Вставить(""Обращение"", ""Господин"");
Оппонент.Вставить(""Возраст""	 , 25);
"}
},
{0,
{"2.31. Чтение элемента структуры с явным указанием ключа",0,0,"2.31","ТекущийВозраст = Оппонет.Возраст;"}
},
{0,
{"2.32. Чтение элемента структуры по ключу, содержащемуся в переменной",0,0,"2.32","КлючСтруктуры = ""Возраст"";
ТекущийВозраст = Оппонет[КлючСтруктуры];"}
},
{0,
{"2.33. Чтение элемента структуры с использованием метода Свойство()",0,0,"2.33","ТекущийВозраст = Неопределено;
Оппонет.Свойство(""Возраст"", ТекущийВозраст);"}
},
{0,
{"2.34. Запись элемента структуры с явным указанием ключа",0,0,"2.34","Оппонет.Возраст = 32;"}
},
{0,
{"2.35. Запись элемента структуры по ключу, содержащемуся в переменной",0,0,"2.35","Оппонет[""Возраст""] = 32;"}
},
{0,
{"2.36. Запись элемента структуры с использованием метода Вставить()",0,0,"2.36","Оппонент.Вставить(""Возраст"", 32);"}
},
{0,
{"2.37. Перебор структуры",0,0,"2.37","Для Каждого Элемент из СтруктураПараметров Цикл
	Сообщить(Элемент.Ключ + "": "" + Элемент.Значение);
	
КонецЦикла;"}
},
{0,
{"2.38. Удаление элемента структуры",0,0,"2.38","СтруктураПараметров.Удалить(""Номенклатура"");"}
},
{0,
{"2.39. Удаление всех элементов структуры",0,0,"2.39","СтруктураПараметров.Очистить();"}
},
{0,
{"2.40. Установка значения для элемента с определенным ключом",0,0,"2.40","Структура = Новый Структура;

// Добавить новый элемент.
Структура.Вставить(""Цвет"", WebЦвета.Белый);

// Установить значение для элемента с ключом ""Цвет"".
Структура.Вставить(""Цвет"", WebЦвета.Синий); 
"}
},
{0,
{"2.41. Использование структуры для формирования отборов",0,0,"2.41","СтруктураОтборов 		  = Новый Структура;
СтруктураПараметровОтбора = Новый Структура;
	
Для Каждого ЭлементОтбора из ЖурналДокументовСписок.Отбор Цикл
	
	Если ЭлементОтбора.Использование Тогда
		СтруктураПараметровОтбора.Очистить();
		
		СтруктураПараметровОтбора.Вставить(""Имя""		  , ЭлементОтбора.Имя);
		СтруктураПараметровОтбора.Вставить(""ВидСравнения"" , ЭлементОтбора.ВидСравнения);
		СтруктураПараметровОтбора.Вставить(""Значение""	  , ЭлементОтбора.Значение);
		СтруктураПараметровОтбора.Вставить(""ЗначениеПо""	  , ЭлементОтбора.ЗначениеПо);
		СтруктураПараметровОтбора.Вставить(""ЗначениеС""	  , ЭлементОтбора.ЗначениеС);
		СтруктураПараметровОтбора.Вставить(""Представление"", ЭлементОтбора.Представление);
		СтруктураПараметровОтбора.Вставить(""ПутьКДанным""  , ЭлементОтбора.ПутьКДанным);
		СтруктураПараметровОтбора.Вставить(""ТипЗначения""  , ЭлементОтбора.ТипЗначения);
		
		СтруктураОтборов.Вставить(ЭлементОтбора.Имя, СтруктураПараметровОтбора);
		
	КонецЕсли;
	
КонецЦикла;
"}
},
{0,
{"2.42. Вариант использования структуры",0,0,"2.42","Если Структура.Свойство(""Контрагент"", ЗначениеЭлемента) Тогда
	
	Если ЗначениеЭлемента = Неопределено ИЛИ ЗначениеЭлемента.Пустая() Тогда
		Структура.Удалить(""Контрагент"");
		
	КонецЕсли;
	
КонецЕсли;
"}
},
{0,
{"2.43. Обращение с явным указанием ключа",0,0,"2.43","Структура.Контрагент"}
},
{0,
{"2.44. Обращение с помощью переменной, хранящей ключ",0,0,"2.44","Структура[""Контрагент""]"}
},
{0,
{"2.45. Использование структуры для поиска",0,0,"2.45","СтруктураДляПоиска = Новый Структура(""Цена, СтавкаНДС"", 0, Перечисления.СтавкиНДС.НДС18);

МассивСтрок = Товары.НайтиСтроки(СтруктураДляПоиска);
"}
},
{0,
{"2.46. Использование структуры для отбора и получения результатов",0,0,"2.46","// Подготовить отбор по измерению ""Организация"".
СтруктураОтбора = Новый Структура(""Организация"", ЮрЛицо);

// Получить данные, актуальные на указанную дату.
СтруктураДанных = РегистрыСведений.УчетнаяПолитикаБухгалтерскийУчет.ПолучитьПоследнее(ДатаПолучения, СтруктураОтбора);

// Прочитать данные из структуры данных.
СпособОценкиМпзЮрЛица = СтруктураДанных.СпособОценкиМПЗ;
ДиректКостингЮрЛица   = СтруктураДанных.ДиректКостинг;
"}
},
{0,
{"2.47. Использование структуры для хранения промежуточных данных",0,0,"2.47","Функция СформироватьСтруктуруТабличнойЧастиДокумента(Документ, ИмяТабличнойЧасти) 

	СтруктураТабличнойЧастиДокумента = Новый Структура;
	
	Для Каждого Реквизит из Документ.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты Цикл
		СтруктураТабличнойЧастиДокумента.Вставить(Реквизит.Имя, Реквизит.Имя);
		
	КонецЦикла;

	Возврат СтруктураТабличнойЧастиДокумента;

КонецФункции 
"}
},
{0,
{"2.48. Использование структуры для хранения промежуточных данных",0,0,"2.48","Функция СформироватьЗапросПоТабличнойЧасти(Документ, ИмяТабличнойЧасти, СтруктураПолей) Экспорт

	ПоляРеквизитов = """";

	Для Каждого Реквизит Из СтруктураПолей Цикл
		ПоляРеквизитов = ПоляРеквизитов + "",Док."" + Реквизит.Значение + ?(ЗначениеНеЗаполнено(Реквизит.Ключ), """", "" КАК "" + СокрЛП(Реквизит.Ключ));

	КонецЦикла;

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	""ВЫБРАТЬ 
	|	Док.НомерСтроки "" + ПоляРеквизитов + ""
	|ИЗ 
	|	Документ."" + Документ.Метаданные().Имя + ""."" + СокрЛП(ИмяТабличнойЧасти) + "" КАК Док 
	|	ГДЕ Док.Ссылка = &ДокументСсылка"";


	// Установить параметры запроса.
	Запрос.УстановитьПараметр(""ДокументСсылка"", Документ.Ссылка);

	Возврат Запрос.Выполнить();

КонецФункции 
"}
},
{0,
{"2.49. Создание соответствия",0,0,"2.49","СозданноеСоответствие = Новый Соответствие();"}
},
{0,
{"2.50. Добавление элемента в соответствие с помощью метода Вставить()",0,0,"2.50","ВозрастСотрудников.Вставить(Сотрудник, ВозрастСотрудника);"}
},
{0,
{"2.51. Добавление элемента в соответствие с помощью обращения по ключу",0,0,"2.51","ВозрастСотрудников[Сотрудник] = ВозрастСотрудника;"}
},
{0,
{"2.52. Чтение элемента соответствия с помощью метода Получить()",0,0,"2.52","ВозрастСотрудника = ВозрастСотрудников.Получить(Сотрудник);"}
},
{0,
{"2.53. Чтение элемента соответствия с помощью обращения по ключу",0,0,"2.53","ВозрастСотрудника = ВозрастСотрудников[Сотрудник];"}
},
{0,
{"2.54. Перебор соответствия",0,0,"2.54","Для Каждого Элемент из Замены Цикл
	Сообщить(Элемент.Ключ + "" - "" + Элемент.Значение);
	
КонецЦикла;
"}
},
{0,
{"2.55. Удаление элемента соответствия",0,0,"2.55","Замены.Удалить(УдаляемыйТовар);"}
},
{0,
{"2.56. Удаление всех элементов соответствия",0,0,"2.56","Замены.Очистить();"}
},
{0,
{"2.57. Получение данных из соответствия",0,0,"2.57","Значение = КурсыВалютДокумента.Получить(УправленческаяВалюта);

Если Значение = Неопределено Тогда
	Сообщить(""Данная валюта в соответствии отсутствует"");

Иначе
	Курс 	  = Значение[""Курс""];
	Кратность = Значение[""Кратность""];
	
КонецЕсли;"}
},
{0,
{"2.58. Использование соответствия для получения структуры видов расчетов",0,0,"2.58","Запрос = Новый Запрос;

Запрос.Текст = 
""ВЫБРАТЬ
|	ОсновныеНачисленияОрганизацииБазовыеВидыРасчета.Ссылка КАК Ссылка,
|	ОсновныеНачисленияОрганизацииБазовыеВидыРасчета.ВидРасчета,
|	ОсновныеНачисленияОрганизацииБазовыеВидыРасчета.ВидРасчета.Наименование,
|	ОсновныеНачисленияОрганизацииБазовыеВидыРасчета.Предопределенный
|ИЗ
|	ПланВидовРасчета.ОсновныеНачисленияОрганизации.БазовыеВидыРасчета КАК ОсновныеНачисленияОрганизацииБазовыеВидыРасчета
|ИТОГИ ПО
|	Ссылка"";

Результат 			= Запрос.Выполнить();
ВыборкаВидовРасчета = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

ВидыРасчета 		= Новый Соответствие;
БазовыеВидаРасчета 	= Новый Соответствие;
СвойстваВидаРасчета = Новый Структура(""Наименование, Предопределенный"");

// Цикл по видам расчета, обладающим базовыми.
Пока ВыборкаВидовРасчета.Следующий() Цикл
	БазовыеВидаРасчета.Очистить();
	ВыборкаБазовых = ВыборкаВидовРасчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	// Цикл по базовым видам расчета.
	Пока ВыборкаБазовых.Следующий() Цикл

		// Заполненить значения структуры ""СвойстваВидаРасчета"".
		СвойстваВидаРасчета.Наименование 	 = ВыборкаБазовых.Наименование;
		СвойстваВидаРасчета.Предопределенный = ВыборкаБазовых.Предопределенный;

		// Заполненить соответствие ""БазовыеВидАРасчета"".
		БазовыеВидаРасчета.Вставить(ВыборкаБазовых.ВидРасчета, СвойстваВидаРасчета);
		
	КонецЦикла;

	// Заполнить соответствие ""ВидыРасчета"".
	ВидыРасчета.Вставить(ВыборкаВидовРасчета.Ссылка, БазовыеВидаРасчета);
	
КонецЦикла;
"}
},
{0,
{"2.59. Создание списка значений",0,0,"2.59","СозданныйСписок = Новый СписокЗначений;"}
},
{0,
{"2.60. Добавление элемента в список значений",0,0,"2.60","СписокСотрудников.Добавить(ТекущийСотрудник, ТекущийСотрудник.ФИО, , Фото);"}
},
{0,
{"2.61. Добавление элемента в список значений с определенным индексом",0,0,"2.61","СписокСотрудников.Вставить(Инд, ТекущийСотрудник, ТекущийСотрудник.ФИО, , Фото);"}
},
{0,
{"2.62. Поиск элемента в списке значений",0,0,"2.62","ЭлементСписка = СписокСотрудников.НайтиПоЗначению(ИскомыйСотрудник);

Если ЭлементСписка <> Неопределено Тогда
	Сообщить(СписокСотрудников.Индекс(ЭлементСписка));
	
КонецЕсли;"}
},
{0,
{"2.63. Обращение к элементу списка значений по индексу",0,0,"2.63","ЭлементСписка = СписокСотрудников[Инд];"}
},
{0,
{"2.64. Обращение к элементу списка значений с помощью метода Получить()",0,0,"2.64","ЭлементСписка = СписокСотрудников.Получить(Инд);"}
},
{0,
{"2.65. Получение значений свойств элемента списка значений",0,0,"2.65","Сотрудник 	  = ЭлементСписка.Значение;
Представление = ЭлементСписка.Представление;
Пометка 	  = ЭлементСписка.Пометка;
Картинка 	  = ЭлементСписка.Картинка;
"}
},
{0,
{"2.66. Перебор списка значений в произвольном порядке",0,0,"2.66","Для Каждого ЭлементСписка Из СписокСотрудников Цикл
	Сообщить(ЭлементСписка.Значение);
	
КонецЦикла; 
"}
},
{0,
{"2.67. Перебор списка значений в порядке индексов",0,0,"2.67","СтаршийИндекс = СписокСотрудников.Количество() - 1;

Для Сч = 0 по СтаршийИндекс Цикл
	Сообщить(СписокСотрудников[Сч].Значение);

КонецЦикла;
"}
},
{0,
{"2.68. Удаление элемента списка значений",0,0,"2.68","СписокСотрудников.Удалить(0);"}
},
{0,
{"2.69. Удаление всех элементов списка значений, содержащих числовые значения",0,0,"2.69","Индекс = СписокОбъектов.Количество() - 1;

Пока Индекс >= 0 Цикл
	
	Если ТипЗнч(СписокОбъектов[Индекс].Значение) = Тип(""Число"") Тогда
		СписокОбъектов.Удалить(Индекс);
		
	КонецЕсли;

	Индекс = Индекс - 1;
	
КонецЦикла;
"}
},
{0,
{"2.70. Создание таблицы значений",0,0,"2.70","ТаблицаЗначений = Новый ТаблицаЗначений;"}
},
{0,
{"2.71. Создание колонок таблицы значений",0,0,"2.71","// Создать нужные колонки.
ТаблицаЗначений.Колонки.Добавить(""Фамилия"");
ТаблицаЗначений.Колонки.Добавить(""Возраст"");
"}
},
{0,
{"2.72. Добавление новой строки таблицы значений, используя явное указание имен колонок",0,0,"2.72","// Добавить новую строку и задать значения в колонках таблицы.
НоваяСтрока = ТаблицаЗначений.Добавить();

НоваяСтрока.Фамилия = ""Иванов"";
НоваяСтрока.Возраст = 23;
"}
},
{0,
{"2.73. Добавление новой строки таблицы значений, используя переменные, хранящие имена колонок",0,0,"2.73","// Добавить новую строку и задать значения в колонках таблицы.
НоваяСтрока = ТаблицаЗначений.Добавить();

НоваяСтрока[""Фамилия""] = ""Иванов"";
НоваяСтрока[""Возраст""] = 23;
"}
},
{0,
{"2.74. Поиск первого вхождения в таблице значений",0,0,"2.74","НайденнаяСтрока = ТаблицаЗначений.Найти(ИскомоеЗначение);"}
},
{0,
{"2.75. Поиск первого вхождения в определенных колонках таблицы значений",0,0,"2.75","НайденнаяСтрока = ТаблицаЗначений.Найти(ИскомоеЗначение, ""Поставщик, Покупатель"");"}
},
{0,
{"2.76. Поиск всех вхождений в таблице значений",0,0,"2.76","// Сформировать структуру отбора.
СтруктураПоиска = Структура(""Сотрудник"", ИскомоеЗначение);

// Найти строки.
МассивНайденныхСтрок = ТаблицаЗначений.НайтиСтроки(СтруктураПоиска);"}
},
{0,
{"2.77. Перебор таблицы значений в произвольном порядке",0,0,"2.77","Для Каждого ТекущаяСтрока Из ТаблицаСотрудников Цикл
	Сообщить(ТекущаяСтрока.Сотрудник);
	
КонецЦикла; "}
},
{0,
{"2.78. Перебор таблицы значений в порядке индексов",0,0,"2.78","СтаршийИндекс = ТаблицаСотрудников.Количество() - 1;

Для Сч = 0 по СтаршийИндекс Цикл
	Сообщить(СписокСотрудников[Сч].Сотрудник);
	
КонецЦикла;
"}
},
{0,
{"2.79. Удаление имеющейся строки таблицы значений",0,0,"2.79","ТаблицаЗначений.Удалить(УдаляемаяСтрока); "}
},
{0,
{"2.80. Удаление строки таблицы значений по индексу",0,0,"2.80","ТаблицаЗначений.Удалить(0);"}
},
{0,
{"2.81. Удаление имеющейся колонки таблицы значений",0,0,"2.81","ТаблицаЗначений.Колонки.Удалить(УдаляемаяКолонка);"}
},
{0,
{"2.82. Удаление колонки таблицы значений по индексу",0,0,"2.82","ТаблицаЗначений.Колонки.Удалить(0);"}
},
{0,
{"2.83. Удаление строк таблицы значений, содержащих числовые значения",0,0,"2.83","СтаршийИндексКолонок = ТаблицаЗначений.Колонки.Количество() - 1;	
Индекс 				 = ТаблицаЗначений.Количество() - 1;

Пока Индекс >= 0 Цикл

	Для Сч = 0 По СтаршийИндексКолонок Цикл
		
		Если ТипЗнч(ТаблицаЗначений[Индекс][Сч]) = Тип(""Число"") Тогда
			ТаблицаЗначений.Удалить(Индекс);
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;

	Индекс = Индекс - 1;
	
КонецЦикла;
"}
},
{0,
{"2.84. Заполнение таблицы значений ",0,0,"2.84","НоваяСтрока = ТаблицаЗначений.Добавить();
НоваяСтрока[ИмяКолонки] = Значение;"}
},
{0,
{"2.85. Заполнение колонки таблицы значений",0,0,"2.85","ТаблицаЗначений.ЗаполнитьЗначения(Ложь, ""ФлагФискальногоУчета"");"}
},
{0,
{"2.86. Копирование таблицы значений",0,0,"2.86","ТаблицаПолучатель = ТаблицаИсходная.Скопировать();"}
},
{0,
{"2.87. Частичный перенос данных для колонок с совпадающими именами",0,0,"2.87","Для Каждого СтрокаИсходнойТаблицы Из ИсходнаяТаблица Цикл
	НоваяСтрока = ТаблицаПолучатель.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсходнойТаблицы);
	
КонецЦикла;
"}
},
{0,
{"2.88. Полное копирование данных для колонок с совпадающими именами",0,0,"2.88","ОдноименныеКолонки = Новый Массив();

Для Каждого Колонка Из ИсходнаяТаблица.Колонки Цикл
	СовпадающаяКолонка = ТаблицаПолучатель.Колонки.Найти(Колонка.Имя);

	Если СовпадающаяКолонка <> Неопределено Тогда

		// Получить свойства колонки.
		Имя 		= Колонка.Имя;
		ТипЗначения = Колонка.ТипЗначения;
		Заголовок 	= Колонка.Заголовок;
		Ширина 		= Колонка.Ширина;
		
		// Заменить колонки в таблице-получаетеле.
		Индекс = ТаблицаПолучатель.Колонки.Индекс(СовпадающаяКолонка);

		ТаблицаПолучатель.Колонки.Удалить(Индекс);
		ТаблицаПолучатель.Колонки.Вставить(Индекс, Имя, ТипЗначения, Заголовок, Ширина);

		// Добавить очередное имя совпадающих колонок в массив.
		ОдноименныеКолонки.Добавить(Колонка.Имя);
		
	КонецЕсли;
	
КонецЦикла;

// Цикл перебора строк исходной таблицы.
Для каждого СтрокаИсходнойТаблицы Из ИсходнаяТаблица Цикл

	// Добавить новую строку в таблицу-получатель.
	НоваяСтрока = ТаблицаПолучатель.Добавить();

	// Заполнить значения в совпадающих ячейках.
	Для каждого ИмяКолонки Из ОдноименныеКолонки Цикл
		НоваяСтрока[ИмяКолонки] = СтрокаИсходнойТаблицы[ИмяКолонки];
		
	КонецЦикла;
	
КонецЦикла;
"}
},
{0,
{"2.89. Добавление колонки без указания типа данных",0,0,"2.89","// Добавить колонку без ограничений по типу.
ТаблицаЗначений.Колонки.Добавить(""Объект"");
"}
},
{0,
{"2.90. Добавление колонки с указанием типа данных",0,0,"2.90","// Ограничения по типам данных колонки:
// Только элементы справочника ""Контрагенты"".
ТаблицаЗначений.Колонки.Добавить(""Контрагент"",	Новый ОписаниеТипов(""СправочникСсылка.Контрагенты""));
"}
},
{0,
{"2.91. Использование квалификаторов для уточнения типа данных колонки таблицы значений",0,0,"2.91","// Подготовка и установка ограничений для данных типа Строка.
КвалификаторыСтроки = Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная);
ДопустимыеТипы 		= Новый ОписаниеТипов(""Строка"", , КвалификаторыСтроки);

ТаблицаЗначений.Колонки.Добавить(""ПримечаниеСтроковоеКороткое"", ДопустимыеТипы);
"}
},
{0,
{"2.92. Использование существующих описаний типов для указания типа данных колонки таблицы значений",0,0,"2.92","// Расширение уже использованного ранее описания типов.
КвалификаторыЧисла 		  = Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Неотрицательный);
КвалификаторыДаты 		  = Новый КвалификаторыДаты(ЧастиДаты.Дата);
РасширенныеДопустимыеТипы = Новый ОписаниеТипов(ДопустимыеТипы, ""Число, Дата"", , КвалификаторыЧисла, , КвалификаторыДаты);

ТаблицаЗначений.Колонки.Добавить(""Примечание"", РасширенныеДопустимыеТипы);"}
},
{0,
{"2.93. Выгрузка результата запроса в таблицу значений с нужными типами колонок",0,0,"2.93","// Выполнить запрос.
Запрос = Новый Запрос;

Запрос.Текст = 
""ВЫБРАТЬ 
|	Ссылка 
|ИЗ 
|	Документ.ПоступлениеТоваровУслуг 
|
|ОБЪЕДИНИТЬ ВСЕ
|
|ВЫБРАТЬ ПЕРВЫЕ 0 ЗНАЧЕНИЕ(Документы.ОприходованиеТоваров.ПустаяСсылка)
|
|ОБЪЕДИНИТЬ ВСЕ
|
|ВЫБРАТЬ ПЕРВЫЕ 0 ЗНАЧЕНИЕ(Документы.ВозвратТоваровОтПокупателя.ПустаяСсылка)
|"";

// Выгрузить в таблицу значений.
ТаблицаСсылок = Запрос.Выполнить().Выгрузить();
"}
},
{0,
{"2.94. Запись данных в дерево значений",0,0,"2.94","Процедура ЗаполнениеДерева(Кнопка)

	Дерево.Колонки.Очистить();
	Дерево.Колонки.Добавить(""ИмяКолонки"");

	// Создать первую строку. Правильнее сказать создать элемент коллекции.
	// Он помещается в переменную «СтрокаВерхнегоУровня».
	СтрокаВерхнегоУровня = Дерево.Строки.Добавить();

	// В колонку «ИмяКолонки» записать значение «Старшая».
	СтрокаВерхнегоУровня.ИмяКолонки = ""Старшая"";
	
	// Создать строку подчиненную «Старшей».
	ПодчиненнаяСтрока = СтрокаВерхнегоУровня.Строки.Добавить();
	ПодчиненнаяСтрока.ИмяКолонки = ""Первая подчиненная"";
	
	ПодчиненнаяВторогоУровня = ПодчиненнаяСтрока.Строки.Добавить();
	ПодчиненнаяВторогоУровня.ИмяКолонки = ""Первая нижняя"";
	
	ПодчиненнаяВторогоУровня = ПодчиненнаяСтрока.Строки.Добавить();
	ПодчиненнаяВторогоУровня.ИмяКолонки = ""Вторая нижняя"";
	
	ПодчиненнаяСтрока = СтрокаВерхнегоУровня.Строки.Добавить();
	ПодчиненнаяСтрока.ИмяКолонки = ""Вторая подчиненная"";

	// Использование метода позволит увидеть результат работы
	// с деревом значений в табличном поле.
	ЭлементыФормы.Дерево.СоздатьКолонки();

КонецПроцедуры"}
},
{0,
{"2.95. Установка текущего значения в табличном поле",0,0,"2.95","Процедура ОткрытиеВетки(Кнопка)

	// Сделать текущим именно элемент коллекции «Строки».
	РезультатПоиска = Дерево.Строки.Найти(""Первая нижняя"", ""ИмяКолонки"", Истина);
	
	Если РезультатПоиска <> Неопределено Тогда
		ЭлементыФормы.Дерево.ТекущаяСтрока = РезультатПоиска;	
		
	КонецЕсли;	

КонецПроцедуры
"}
}
},
{138,
{"Прикладные объекты",1,0,"",""},
{0,
{"3.1. Создание нового элемента справочника",0,0,"3.1","НовыйЭлемент = Справочники.ДокументыУдостоверяющиеЛичность.СоздатьЭлемент();

НовыйЭлемент.Наименование = ""военный билет"";

// Установить другие реквизиты.
//	...

НовыйЭлемент.Записать(); 
"}
},
{0,
{"3.2. Создание нового элемента в иерархическом справочнике",0,0,"3.2","НовыйЭлемент = Справочники.Банки.СоздатьЭлемент();

// Получить ссылку на группу, в которой будет находиться новый элемент.
Родитель = Справочники.Банки.НайтиПоКоду(""000000001"");

НовыйЭлемент.Наименование = ""АКБ"";
НовыйЭлемент.Код 		  = ""000000011"";
НовыйЭлемент.Родитель 	  = Родитель;

// Установить другие реквизиты.
//	...

НовыйЭлемент.Записать();
"}
},
{0,
{"3.3. Создание новой группы в справочнике",0,0,"3.3","НоваяГруппа = Справочники.Номенклатура.СоздатьГруппу();

// Получить ссылку на группу, в которой должна находиться создаваемая группа.
Родитель = Справочники.Номенклатура.НайтиПоНаименованию(""Обувь"", Истина);

НоваяГруппа.Наименование = ""Модельная обувь"";
НоваяГруппа.Родитель 	 = Родитель; 

// Установить другие реквизиты.
//	...

НоваяГруппа.Записать();
"}
},
{0,
{"3.4. Создание нового элемента справочника в иерархии элементов",0,0,"3.4","// Создать новый элемент в корне справочника.	
НовыйЭлемент = Справочники.Подразделения.СоздатьЭлемент();

НовыйЭлемент.Наименование = ""IT отдел"";

//	...

НовыйЭлемент.Записать();

// Получить ссылку на родителя добавляемых элементов.
Родитель = НовыйЭлемент.Ссылка;

// Создать дочерний элемент.
НовыйЭлемент = Справочники.Подразделения.СоздатьЭлемент();

НовыйЭлемент.Наименование = ""Группа разработки"";
НовыйЭлемент.Родитель 	  = Родитель;

//	...

НовыйЭлемент.Записать();
"}
},
{0,
{"3.5. Поиск элемента справочника по коду",0,0,"3.5","РезультатПоиска = Справочники.Номенклатура.НайтиПоКоду(""00030"");

Если РезультатПоиска.Пустая() Тогда

	// Выполнить действия, предусмотренные в случае, когда элемент не найден.
	//	...

КонецЕсли;	
"}
},
{0,
{"3.6. Поиск элемента справочника по наименованию",0,0,"3.6","РезультатПоиска = Справочники.Номенклатура.НайтиПоНаименованию(""Кроссовки"");"}
},
{0,
{"3.7. Поиск элемента справочника по реквизиту",0,0,"3.7","РезультатПоиска = Справочники.Номенклатура.НайтиПоРеквизиту(""Артикул"", ""К-120002"");"}
},
{0,
{"3.8. Удаление элемента справочника",0,0,"3.8","// Найти ссылки на удаляемый элемент.
МассивСсылок = Новый Массив;

МассивСсылок.Добавить(СсылкаНаУдаляемыйЭлемент);

НайденныеСсылки = НайтиПоСсылкам(МассивСсылок);

Если НайденныеСсылки.Количество() > 0 Тогда
	Сообщить(""Нельзя удалять элемент, на него имеются ссылки"");
	
Иначе	
	УдаляемыйЭлемент = СсылкаНаУдаляемыйЭлемент.ПолучитьОбъект();
	УдаляемыйЭлемент.Удалить();
	
КонецЕсли;
"}
},
{0,
{"3.9. Пометка элемента справочника на удаление",0,0,"3.9","УдаляемыйЭлемент.УстановитьПометкуУдаления(Истина);"}
},
{0,
{"3.10. Перебор элементов справочника в порядке иерархии",0,0,"3.10","Выборка = Справочники.Номенклатура.ВыбратьИерархически();

Пока Выборка.Следующий() Цикл
	Наименование = Выборка.Наименование;

	// Обращение к другим данным справочника.
	//	...

КонецЦикла;	
"}
},
{0,
{"3.11. Перебор элементов справочника запросом",0,0,"3.11","Запрос = Новый Запрос(
""ВЫБРАТЬ
|	Ссылка,
|	Наименование
|ИЗ
|	Справочник.Номенклатура 
|АВТОУПОРЯДОЧИВАНИЕ"");

Результат = Запрос.Выполнить().Выбрать();

Пока Результат.Следующий() Цикл
	Наименование = Результат.Наименование;
	//	...
	
КонецЦикла;
"}
},
{0,
{"3.12. Выборка элементов справочника из группы",0,0,"3.12","Выборка = Справочники.Номенклатура.Выбрать (ПолеВводаРодитель);

Пока Выборка.Следующий() Цикл
	Наименование = Выборка.Наименование;
	//	...
	
КонецЦикла;	
"}
},
{0,
{"3.13. Выборка элементов справочника из группы с помощью запроса",0,0,"3.13","Запрос = Новый Запрос(
""ВЫБРАТЬ
|	Ссылка,
|	Наименование
|ИЗ
|	Справочник.Номенклатура 
|ГДЕ
|	Родитель = &Родитель
|АВТОУПОРЯДОЧИВАНИЕ"");

Запрос.УстановитьПараметр(""Родитель"", ПолеВводаРодитель);

Результат = Запрос.Выполнить().Выбрать();

Пока Результат.Следующий() Цикл
	Наименование = Результат.Наименование;
	//	...
	
КонецЦикла;
"}
},
{0,
{"3.14. Выборка элементов справочника из группы в порядке иерархии",0,0,"3.14","Выборка = Справочники.Номенклатура.ВыбратьИерархически(ПолеВводаРодитель);

Пока Выборка.Следующий() Цикл
	Наименование = Выборка.Наименование;
	//	...
	
КонецЦикла;	
"}
},
{0,
{"3.15. Выборка элементов справочника из группы в порядке иерархии с помощью запроса",0,0,"3.15","Запрос = Новый Запрос(
""ВЫБРАТЬ
|	Ссылка,
|	Наименование
|ИЗ
|	Справочник.Номенклатура 
|ГДЕ
|	Родитель В ИЕРАРХИИ(&Родитель)
|АВТОУПОРЯДОЧИВАНИЕ"");

Запрос.УстановитьПараметр(""Родитель"", ПолеВводаРодитель);

Результат = Запрос.Выполнить().Выбрать();

Пока Результат.Следующий() Цикл
	Наименование = Результат.Наименование;
	//	...
	
КонецЦикла;
"}
},
{0,
{"3.16. Выборка элементов подчиненного справочника с помощью запроса",0,0,"3.16","Процедура ПереборПодчиненыхЭлементов(Контрагент)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	""ВЫБРАТЬ
	|	КонтактныеЛица.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|
	|ГДЕ 
	|	КонтактныеЛица.Владелец = &Владелец"";

	Запрос.УстановитьПараметр(""Владелец"", Контрагент);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		ОчереднойПодчиненый = Выборка.Ссылка;	
		
	КонецЦикла;

КонецПроцедуры
"}
},
{0,
{"3.17. Выборка элементов подчиненного справочника",0,0,"3.17","Процедура ПереборПодчиненыхЭлементов(Контрагент)

	// Получить выборку по указанному контрагенту.
	Выборка = Справочники.КонтактныеЛица.Выбрать( , Контрагент);

	Пока Выборка.Следующий() Цикл
		ОчереднойПодчиненый = Выборка.Ссылка;
		
	КонецЦикла;

КонецПроцедуры
"}
},
{0,
{"3.18. Открытие формы списка справочника",0,0,"3.18","Форма = Справочники.Номенклатура.ПолучитьФормуСписка();
Форма.Открыть();"}
},
{0,
{"3.19. Открытие произвольной формы справочника",0,0,"3.19","Форма = Справочники.ХранилищеДополнительнойИнформации.ПолучитьФорму(""ФормаСпискаФайловИИзображений"");
Форма.Открыть();"}
},
{0,
{"3.20. Открытие формы существующего элемента справочника",0,0,"3.20","Элемент = Справочники.Номенклатура.НайтиПоКоду(""00030"");	
Форма = Элемент.ПолучитьФорму();
Форма.Открыть();"}
},
{0,
{"3.21. Добавление записи в табличную часть элемента справочника",0,0,"3.21","ЭлементОбъект = СсылкаКонтрагент.ПолучитьОбъект();

НоваяСтрока = ЭлементОбъект.ВидыДеятельности.Добавить();

// Заполнить реквизиты. 
НоваяСтрока.ВидДеятельности = ПолеВводаВидДеятельности;
//	...

ЭлементОбъект.Записать();
"}
},
{0,
{"3.22. Удаление всех строк из табличной части элемента справочника",0,0,"3.22","ЭлементСправочника = Справочники.Контрагенты.НайтиПоКоду(""Ю0006"");	
ОбъектСправочника = ЭлементСправочника.ПолучитьОбъект();

ОбъектСправочника.ВидыДеятельности.Очистить();
ОбъектСправочника.Записать();"}
},
{0,
{"3.23. Удаление некоторых строк из табличной части элемента справочника",0,0,"3.23","ОбъектСправочника = ВыбранныйЭлемент.ПолучитьОбъект();

// Создать структуру для отбора удаляемых строк.
СтруктураОтбора = Новый Структура(""ВидДеятельности"", ВыбранныйВидДеятельности);

// Получить массив удаляемых строк. 
ПодходящиеСтроки = ОбъектСправочника.ВидыДеятельности.НайтиСтроки(СтруктураОтбора);

// Удалить строки.
Для Каждого ОчереднаяСтрока Из ПодходящиеСтроки Цикл
	ОбъектСправочника.ВидыДеятельности.Удалить(ОчереднаяСтрока);
	
КонецЦикла;	

ОбъектСправочника.Записать();"}
},
{0,
{"3.24. Перебор строка табличной части элемента справочника",0,0,"3.24","ЭлементСправочника = Справочники.Контрагенты.НайтиПоКоду(""Ю0006"");	

Для Каждого ТекущаяСтрока Из ЭлементСправочника.ВидыДеятельности Цикл
	Сообщить(ТекущаяСтрока.ВидДеятельности);
	
КонецЦикла;	
"}
},
{0,
{"3.25. Создание элемента справочника в нужной группе",0,0,"3.25","КодГруппы 		   = ""330100"";
ПоискПоПолномуКоду = Ложь; // значение по умолчанию

Группа = Справочники.Номенклатура.НайтиПоКоду(КодГруппы, ПоискПоПолномуКоду);

Если Группа.Пустая() Тогда
	Группа = Справочники.Номенклатура.СоздатьГруппу();
	
	Группа.Код 			= КодГруппы;
	Группа.Наименование = ""Загруженные"";
	
	Группа.Записать();

ИначеЕсли Не Группа.ЭтоГруппа Тогда
	Сообщить(""Найден элемент справочника с указанным кодом!"");

	// Предусмотреть прерывание алгоритма.
	//	...

КонецЕсли;

Спр = Справочники.Номенклатура.СоздатьЭлемент();

Спр.Наименование = ""Программно созданный"";

// Реквизиты заполняются в соответствии с задачей.
//	...
Спр.Родитель = Группа.Ссылка;

Спр.Записать();
"}
},
{0,
{"3.26. Обращение к предопределенной группе справочника",0,0,"3.26","Группа = Справочники.Номенклатура.Загруженные;"}
},
{0,
{"3.27. Создание элемента справочника в нужной группе при иерархии элементов",0,0,"3.27","КодЭлемента 	   = ""330100"";
ПоискПоПолномуКоду = Ложь; //Значение по умолчанию

Родитель = Справочники.Номенклатура.НайтиПоКоду(КодЭлемента, ПоискПоПолномуКоду);

Если Родитель.Пустая() Тогда
	Родитель = Справочники.Номенклатура.СоздатьЭлемент();
	
	Родитель.Код 		  = КодЭлемента;
	Родитель.Наименование = ""Загруженные"";
	
	Родитель.Записать();
	
КонецЕсли;

Спр = Справочники.Номенклатура.СоздатьЭлемент();

Спр.Наименование = ""Программно созданный"";

// Реквизиты заполняются в соотвествии с задачей.
//	...

Спр.Родитель = Родитель.Ссылка;

Спр.Записать(); 
"}
},
{0,
{"3.28. Поиск подчиненных элементов",0,0,"3.28","Выборка = Справочники.Номенклатура.Выбрать( , Владелец);

Если Выборка.Следующий() = Истина Тогда

	// Есть подчиненные элементы.
	//	...

КонецЕсли;
"}
},
{0,
{"3.29. Поиск подчиненных элементов с помощью запроса",0,0,"3.29","Запрос = Новый Запрос;

Запрос.Текст = 
""ВЫБРАТЬ ПЕРВЫЕ 1
|	ЕдиницыИзмерения.Ссылка
|ИЗ
|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
|ГДЕ
|	ЕдиницыИзмерения.Владелец = &Владелец"";

Запрос.УстановитьПараметр(""Владелец"", Владелец);

Если НЕ Запрос.Выполнить().Пустой() Тогда
	
	// Есть подчиненные элементы!
	//	...

КонецЕсли;"}
},
{0,
{"3.30. Определение количества подчиненных элементов",0,0,"3.30","Выборка = Справочники.ЕдиницыИзмерения.Выбрать( , Владелец);

КоличествоЭлементов = 0;

Пока Выборка.Следующий() Цикл
	
	КоличествоЭлементов = КоличествоЭлементов + 1;
	
КонецЦикла;"}
},
{0,
{"3.31. Определение количества подчиненных элементов с помощью запроса",0,0,"3.31","Запрос = Новый Запрос;

Запрос.Текст = 
""ВЫБРАТЬ
|	КОЛИЧЕСТВО(*) КАК КоличествоЗаписей
|ИЗ
|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
|ГДЕ
|	ЕдиницыИзмерения.Владелец = &Владелец"";

Запрос.УстановитьПараметр(""Владелец"", Владелец);

Выборка = Запрос.Выполнить().Выбрать();

Если Выборка.Следующий() Тогда
	КоличествоЗаписей = Выборка.КоличествоЗаписей;
	
КонецЕсли;"}
},
{0,
{"3.32. Определение количества подчиненных элементах во всех подчиненных справочниках",0,0,"3.32","ВЫБРАТЬ
	СУММА(КоличествоПодчиненных) КАК КоличествоПодчиненныхЭлементов
ИЗ
	(ВЫБРАТЬ
		КОЛИЧЕСТВО(*) КАК КоличествоПодчиненных
	ИЗ
		Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	ГДЕ
		ЕдиницыИзмерения.Владелец = &Владелец
			
	ОБЪЕДИНИТЬ ВСЕ
	
	ВЫБРАТЬ
		КОЛИЧЕСТВО(*)
	ИЗ
		Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	ГДЕ
		СерииНоменклатуры.Владелец = &Владелец) КАК ВложенныйЗапрос "}
},
{0,
{"3.33. Получение всех родителей элемента справочника",0,0,"3.33","МассивРодителей = Новый Массив;

Родитель = СсылкаНаЭлемент.Родитель;

Пока Не Родитель.Пустая() Цикл 
	МассивРодителей.Добавить(Родитель);
	Родитель = Родитель.Родитель;
	
КонецЦикла;"}
},
{0,
{"3.34. Перебор всех родителей элемента справочника",0,0,"3.34","Для Каждого ТекущийРодитель Из МассивРодителей Цикл

	// Работа с текущим родителем.
	//	...

КонецЦикла;"}
},
{0,
{"3.35. Получение всех родителей элемента справочника с помощью запроса",0,0,"3.35","ВЫБРАТЬ
	Номенклатура.Ссылка КАК Ссылка
ИЗ
	Справочник.Номенклатура КАК Номенклатура
ГДЕ
	Номенклатура.Ссылка = &Ссылка
ИТОГИ ПО
	Ссылка ТОЛЬКО ИЕРАРХИЯ"}
},
{0,
{"3.36. Перебор родителей в запросе",0,0,"3.36","ТекущийЭлементНоменклатуры = ЭлементНоменклатура;

Запрос = Новый Запрос(
""ВЫБРАТЬ
|	Номенклатура.Родитель,
|	Номенклатура.Родитель.Родитель,
|	Номенклатура.Родитель.Родитель.Родитель,
|	Номенклатура.Родитель.Родитель.Родитель.Родитель,
|	Номенклатура.Родитель.Родитель.Родитель.Родитель.Родитель
|ИЗ
|	Справочник.Номенклатура КАК Номенклатура
|ГДЕ
|	Номенклатура.Ссылка = &ТекущийЭлементНоменклатуры"";

Пока Истина Цикл
	Запрос.УстановитьПараметр(""ТекущийЭлементНоменклатуры"", ТекущийЭлементНоменклатуры);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Прервать;
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();

	Для НомерКолонки = 0 По Результат.Колонки.Количество() - 1 Цикл
		ТекущийЭлементНоменклатуры = Выборка[НомерКолонки];
		
		Если ТекущийЭлементНоменклатуры = Справочники.Номенклатура.ПустаяСсылка() Тогда
			
			Прервать;
			
		Иначе
			Сообщить(ТекущийЭлементНоменклатуры);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекущийЭлементНоменклатуры = Справочники.Номенклатура.ПустаяСсылка() Тогда
		
		Прервать;
		
	КонецЕсли;
	
КонецЦикла;
"}
},
{0,
{"3.37. Получение полного кода элемента справочника",0,0,"3ю37","ВЫБРАТЬ
	Контрагенты.Ссылка,
	ВЫБОР 
		КОГДА (Контрагенты.Родитель.Код ЕСТЬ NULL ) ТОГДА Контрагенты.Код
		КОГДА (Контрагенты.Родитель.Родитель.Код ЕСТЬ NULL ) ТОГДА Контрагенты.Родитель.Код + ""/"" + Контрагенты.Код
		ИНАЧЕ Контрагенты.Родитель.Родитель.Код + ""/"" + Контрагенты.Родитель.Код + ""/"" + Контрагенты.Код 
	КОНЕЦ КАК ПолныйКод
ИЗ
	Справочник.Контрагенты КАК Контрагенты"}
},
{0,
{"3.38. Поиск элементов справочника по подстроке наименования",0,0,"3.38","Запрос = Новый Запрос(
""ВЫБРАТЬ
|	Контрагенты.Ссылка КАК Ссылка
|ИЗ
|	Справочник.Контрагенты КАК Контрагенты
|ГДЕ
|	(Контрагенты.Наименование ПОДОБНО &ЧастьНаименования) И (НЕ Контрагенты.ЭтоГруппа)
|ИТОГИ ПО
|	Ссылка ТОЛЬКО ИЕРАРХИЯ"");

Запрос.УстановитьПараметр(""ЧастьНаименования"", ""%"" + ПолеВводаПодстрока + ""%"");"}
},
{0,
{"3.39. Поиск элементов справочника с незаполненным реквизитом",0,0,"3.39","ВЫБРАТЬ
	ФизическиеЛица.Ссылка
ИЗ
	Справочник.ФизическиеЛица КАК ФизическиеЛица
ГДЕ
	(ФизическиеЛица.ИНН = """")"}
},
{0,
{"3.40. Поиск элементов справочника с незаполненным реквизитом по маске",0,0,"3.40","ВЫБРАТЬ
	ФизическиеЛица.Ссылка
ИЗ
	Справочник.ФизическиеЛица КАК ФизическиеЛица
ГДЕ
	(ФизическиеЛица.СтраховойНомерПФР = """") ИЛИ (ФизическиеЛица.СтраховойНомерПФР = ""	-	-"")"}
},
{0,
{"3.41. Перенос элемента справочника в другую группу",0,0,"3.41","Запрос = Новый Запрос;

Запрос.Текст = 
""ВЫБРАТЬ
|	Контрагенты.Ссылка
|ИЗ
|	Справочник.Контрагенты КАК Контрагенты
|
|ГДЕ
|	Контрагенты.Родитель = &СтарыйРодитель"";
	
Запрос.УстановитьПараметр(""СтарыйРодитель"", СтарыйРодитель);

Результат = Запрос.Выполнить();"}
},
{0,
{"3.42. Название листинга",0,0,"3.42","Выборка = Результат.Выбрать();

Пока Выборка.Следующий() Цикл
	Контрагент = Выборка.Ссылка.ПолучитьОбъект();
	
	Контрагент.Родитель = НовыйРодитель;
	
	Контрагент.Записать();
	
КонецЦикла;"}
},
{0,
{"3.43. Открытие формы выбора справочника",0,0,"3.43","// Получить форму выбора справочника как подчиненную форме документа.
ФормаВыбора = Справочники.Номенклатура.ПолучитьФормуВыбора( , ЭтаФорма);

// Открыть полученную форму.
ФормаВыбора.Открыть();"}
},
{0,
{"3.44. Обработка выбора ",0,0,"3.44","Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	ПолученноеЗначение = ЗначениеВыбора;
	
	// Дальнейшая обработка значения.
	//	...
	
КонецПроцедуры"}
},
{0,
{"3.45. Модальное открытие формы выбора справочника",0,0,"3.45","ФормаВыбора = Справочники.Номенклатура.ПолучитьФормуВыбора( , ЭтаФорма);

Выбрано = ФормаВыбора.ОткрытьМодально();"}
},
{0,
{"3.46. Организация выбора для поля ввода",0,0,"3.46","Процедура ПолеВводаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Запретить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Получить форму выбора справочника как подчиненную полю ввода.
	ФормаВыбора = Справочники.Номенклатура.ПолучитьФормуВыбора( , Элемент);

	// Открыть полученную форму.
	ФормаВыбора.Открыть();

КонецПроцедуры"}
},
{0,
{"3.47. Обработка выбора",0,0,"3.47","Процедура ПолеВводаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	// Отключить стандартную обработку (при необходимости).
	СтандартнаяОбработка = Ложь;

	ПолученноеЗначение = ВыбранноеЗначение;
	// Дальнейшая обработка значения.
	//	...
	
КонецПроцедуры"}
},
{0,
{"3.48. Загрузка фотографии",0,0,"3.48","Процедура ЗагрузитьФотографию(Элемент)

	Режим  = РежимДиалогаВыбораФайла.Открытие;
	Фильтр = ""Текст (*,*)|*.*"";
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	
	ДиалогОткрытияФайла.ПолноеИмяФайла 	   = """";
	ДиалогОткрытияФайла.Фильтр 			   = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок 		   = ""Выберите картинку"";

	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ВыбраннаяКартинка =	Новый Картинка(ДиалогОткрытияФайла.ПолноеИмяФайла);
		ЭлементХранилища  = Новый ХранилищеЗначения(ВыбраннаяКартинка);
		
		Фотография = ЭлементХранилища;
		
	КонецЕсли;

КонецПроцедуры"}
},
{0,
{"3.49. Хранение двоичных данных",0,0,"3.49","ВыбФайл 	= Новый ДвоичныеДанные(ДиалогОткрытияФайла.ПолноеИмяФайла);
элХранилища = Новый ХранилищеЗначения(ВыбФайл);

Фотография = элХранилища;"}
},
{0,
{"3.50. Добавление документа",0,0,"3.50","НовыйДокумент = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();

НовыйДокумент.Дата = ТекущаяДата();"}
},
{0,
{"3.51. Добавление документа и открытие его формы",0,0,"3.51","ФормаНовогоПКО = Документы.ПриходныйКассовыйОрдер.ПолучитьФормуНовогоДокумента();

ФормаНовогоПКО.Открыть();"}
},
{0,
{"3.52. Поиск документа по номеру",0,0,"3.52","ИскомыйДокумент = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(НомерДок, Дата(2005, 1, 1));

Если НЕ ИскомыйДокумент.Пустая() Тогда

	// Выполнить действия в случае обнаружения такого документа.
	//	...
	
КонецЕсли;"}
},
{0,
{"3.53. Поиск документа с помощью запроса",0,0,"3.53","ВЫБРАТЬ
	РеализацияТоваровУслуг.Ссылка
ИЗ
	Документ. РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
ГДЕ
	РеализацияТоваровУслуг.Контрагент = &Контрагент 
	И (РеализацияТоваровУслуг.Номер < 100 ИЛИ РеализацияТоваровУслуг.Дата < ДАТАВРЕМЯ(2005, 1, 1))
	И РеализацияТоваровУслуг.Товары.Номенклатура В ИЕРАРХИИ(&Номенклатура)"}
},
{0,
{"3.54. Открытие формы документа",0,0,"3.54","Форма = ИскомыйДокумент.ПолучитьФорму();

Форма.Открыть();"}
},
{0,
{"3.55. Запись документа",0,0,"3.55","ДокОбъект = СсылкаНаДокумент.ПолучитьОбъект();

ДокОбъект.Ответственный = глТекущийПользователь;

ДокОбъект.Записать(); "}
},
{0,
{"3.56. Проведение документа",0,0,"3.56","ДокОбъект.Записать(РежимЗаписиДокумента.Проведение); "}
},
{0,
{"3.57. Отмена проведения документа",0,0,"3.57","ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения); "}
},
{0,
{"3.58. Добавление строки в табличную часть документа",0,0,"3.58","ОбъектДок = Док.ПолучитьОбъект();

НоваяСтрока = ОбъектДок.Товары.Добавить();

// Заполнить значения реквизитов.
НоваяСтрока.Количество = 10;
НоваяСтрока.Цена 	   = 55;
//	...	

// Записать документ.	
ОбъектДок.Записать();"}
},
{0,
{"3.59. Удаление строки из табличной части документа",0,0,"3.59","ОбъектДокумента = Документ.ПолучитьОбъект();

ОбъектДокумента.Товары.Очистить();"}
},
{0,
{"3.60. Запись документа",0,0,"3.60","ОбъектДокумента.Записать();"}
},
{0,
{"3.61. Перебор строк документа",0,0,"3.61","Для Каждого ТекущаяСтрока Из Документ.Товары Цикл

	// Действия со строкой табличной части.
	//	...

КонецЦикла; "}
},
{0,
{"3.62. Перебор строк документа по индексу",0,0,"3.62","СтаршийИндекс = Документ.Товары.Количество() - 1;

Для Сч = 0 по СтаршийИндекс Цикл

	// Действия со строкой табличной части.
	//	...

КонецЦикла;"}
},
{0,
{"3.63. Выгрузка табличной части документа в таблицу значений",0,0,"3.63","ТаблицаТоваровДокумента = Документ.Товары.Выгрузить();"}
},
{0,
{"3.64. Подсчет итога в табличной части",0,0,"3.64","ВсегоПоКолонкеСумма = Документ.Товары.Итог(""Сумма"");"}
},
{0,
{"3.65. Проведение документа",0,0,"3.65","НужныйДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);"}
},
{0,
{"3.66. Перебор документов",0,0,"3.66","ВыборкаДокументов = Документы.Расходная.Выбрать(НачалоГода(ТекущаяДата()), КонецГода(ТекущаяДата()));

Пока ВыборкаДокументов.Следующий() Цикл

	// Действия с документом - элементом выборки, 
	// его значение содержится в переменной ВыборкаДокументов
	//	...

КонецЦикла"}
},
{0,
{"3.67. Перебор документов с помощью запроса",0,0,"3.67","Запрос = Новый Запрос;

Запрос.Текст = 
""ВЫБРАТЬ
|	РеализацияТоваровУслуг.Ссылка
|ИЗ
|	Документ. РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
|ГДЕ
|	РеализацияТоваровУслуг.Контрагент = &Контрагент 
|	И
|	(РеализацияТоваровУслуг.Номер < 100 ИЛИ РеализацияТоваровУслуг.Дата < ДАТАВРЕМЯ(2005, 1, 1)) 
|	И
|	РеализацияТоваровУслуг.Товары.Номенклатура В ИЕРАРХИИ(&Номенклатура)"";
	
Запрос.УстановитьПараметр(""Контрагент"", ОтбКонтрагент);
Запрос.УстановитьПараметр(""Номенклатура"", ОтбНоменклатура);
	
Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();
	
Пока Выборка.Следующий() Цикл

	// Действия с документом - элементом выборки, 
	// его значение содержится в переменной Выборка.
	//	...
	
КонецЦикла;"}
},
{0,
{"3.68. Пометка документов на удаление",0,0,"3.68","ДокументыВида= Документы.ПоступлениеТоваровУслуг.Выбрать();
	
Пока ДокументыВида.Следующий() Цикл
	ДокОбъект = ДокументыВида.ПолучитьОбъект();
	
	ДокОбъект.УстановитьПометкуУдаления(Истина);
	
КонецЦикла;
"}
},
{0,
{"3.69. Копирование документа",0,0,"3.69","ДокументКопия = ИсходныйДокумент.Скопировать();

ДокументКопия.Дата = РабочаяДата;	 

ДокументКопия.Записать();"}
},
{0,
{"3.70. Копирование даты документа",0,0,"3.70","ДокументКопия.Дата = ИсходныйДокумент.Дата;"}
},
{0,
{"3.71. Чтение движений документа с помощью запроса",0,0,"3.71","Запрос = Новый Запрос;

Запрос.Текст = 
""ВЫБРАТЬ
|	*
|ИЗ
|	РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
|ГДЕ
|	ОстаткиНоменклатуры.Регистратор = &Регистратор"";

Запрос.УстановитьПараметр(""Регистратор"", ПолеВводаРегистратор);"}
},
{0,
{"3.72. Чтение движений документа",0,0,"3.72","НаборЗаписейРегистра = Движения.ОстаткиНоменклатуры; 

НаборЗаписейРегистра.Прочитать();

Для Каждого Запись из НаборЗаписейРегистра Цикл	

	// Чтение и модификация очередного движения.

КонецЦикла;"}
},
{0,
{"3.73. Изменение движений документа",0,0,"3.73","Для Каждого НаборЗаписейРегистра из Движения Цикл
	НаборЗаписейРегистра.Прочитать();

	Для Каждого Запись из НаборЗаписейРегистра Цикл	

		// Чтение и модификация очередного движения.

	КонецЦикла;
	
КонецЦикла;"}
},
{0,
{"3.74. Определение регистров, по которым есть движения",0,0,"3.74","ВЫБРАТЬ ПЕРВЫЕ 1
	""Внутренние заказы"" КАК Регистр
ИЗ
	РегистрНакопления.ВнутренниеЗаказы КАК ВнутренниеЗаказы
ГДЕ
	ВнутренниеЗаказы.Регистратор = &Регистратор

ОБЪЕДИНИТЬ

ВЫБРАТЬ ПЕРВЫЕ 1
	""Заказы поставщикам"" КАК Регистр
ИЗ
	РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
ГДЕ
	ЗаказыПоставщикам.Регистратор = &Регистратор

ОБЪЕДИНИТЬ

ВЫБРАТЬ ПЕРВЫЕ 1
	""Размещение заказов покупателей"" КАК Регистр
ИЗ
	РегистрНакопления.РазмещениеЗаказовПокупателей КАК РазмещениеЗаказовПокупателей
ГДЕ
	РазмещениеЗаказовПокупателей.Регистратор = &Регистратор

ОБЪЕДИНИТЬ

ВЫБРАТЬ ПЕРВЫЕ 1
	""Товары в резерве на складах"" КАК Регистр
ИЗ
	РегистрНакопления.ТоварыВРезервеНаСкладах КАК ТоварыВРезервеНаСкладах
ГДЕ
	ТоварыВРезервеНаСкладах.Регистратор = &Регистратор	"}
},
{0,
{"3.75. Удаление строк с нулевым количеством",0,0,"3.75","СтруктураДляПоиска = Новый Структура(""Количество"", 0);

ОбъектДок = СсылкаДок.ПолучитьОбъект();
ТабличнаяЧастьДок = ОбъектДок.Товары;

МассивПустыхСтрок = ТабличнаяЧастьДок.НайтиСтроки(СтруктураДляПоиска);

Для каждого Строка Из МассивПустыхСтрок Цикл
	ТабличнаяЧастьДок.Удалить(Строка);
	
КонецЦикла; 

ОбъектДок.Записать();"}
},
{0,
{"3.76. Удаление строк с нулевым количеством в форме документа",0,0,"3.76","СтруктураДляПоиска = Новый Структура(""Количество"", 0);

МассивПустыхСтрок = Товары.НайтиСтроки(СтруктураДляПоиска);

Для каждого Строка Из МассивПустыхСтрок Цикл
	Товары.Удалить(Строка);
	
КонецЦикла;													"}
},
{0,
{"3.77. Обработчик события При изменении поля ввода",0,0,"3.77","Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()"}
},
{0,
{"3.78. Очистка значений реквизита табличной части документа",0,0,"3ю78","Для Каждого Строка из Товары Цикл
	Строка.СтавкаНДС = Неопределено;

	// Передать управление на процедуру, вызываемую 
	// из обработчика события ""ПриИзменении"" для поля ввода ""СтавкаНДС""
	ЭлементыФормы.Товары.ТекущаяСтрока = Строка;
	
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	
КонецЦикла;"}
},
{0,
{"3.79. Заполнение свойств документа",0,0,"3.79","НовыйСчет = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
ЗаполнитьЗначенияСвойств(НовыйСчет, ДокументЗаказа, , ""Дата"");

// Заполнить табличную часть Товары.
Для Каждого СтрокаТоваровЗаказа Из ДокументЗаказа.Товары Цикл
	ЗаполнитьЗначенияСвойств(НовыйСчет.Товары.Добавить(), СтрокаТоваровЗаказа);
	
КонецЦикла;

// Заполнить табличную часть ВозвратнаяТара
Для Каждого СтрокаТарыЗаказа Из ДокументЗаказа.ВозвратнаяТара Цикл
	ЗаполнитьЗначенияСвойств(НовыйСчет.ВозвратнаяТара.Добавить(), СтрокаТарыЗаказа);
	
КонецЦикла;

// Заполнить табличную часть Услуги
Для Каждого СтрокаУслугЗаказа Из ДокументЗаказа.Услуги Цикл
	ЗаполнитьЗначенияСвойств(НовыйСчет.Услуги.Добавить(), СтрокаУслугЗаказа);
	
КонецЦикла;

НовыйСчет.ЗаказПокупателя = ДокументЗаказа;
Форма = НовыйСчет.ПолучитьФорму();

Форма.Открыть();"}
},
{0,
{"3.80. Получение документов, в которых не заполнены значения реквизитов",0,0,"3.80","Запрос = Новый Запрос;

Запрос.Текст = 
""ВЫБРАТЬ РАЗЛИЧНЫЕ
|	ПриходнаяТовары.Ссылка КАК Накладные
|ИЗ
|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПриходнаяТовары
|ГДЕ
|	ПриходнаяТовары.Номенклатура = ЗНАЧЕНИЕ(Справочники.Номенклатура.ПустаяСсылка)"";
	 
ТаблицаНакладных = Запрос.Выполнить();"}
},
{0,
{"3.81. Определение курса валюты управленческого учета",0,0,"3.81","ВЫБРАТЬ
	КурсыВалютСрезПоследних.Валюта КАК ВалютаУпр,
	КурсыВалютСрезПоследних.Курс КАК КурсУпр
ИЗ
	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта В (ВЫБРАТЬ
																			УчетнаяПолитикаСрезПоследних.ВалютаУправленческая 
																		ИЗ 
																			РегистрСведений.УчетнаяПолитика.СрезПоследних(&ДатаДокумента, ) КАК УчетнаяПолитикаСрезПоследних )
						 					) КАК КурсыВалютСрезПоследних"}
},
{0,
{"3.82. Неоперативное проведение документа",0,0,"3.82","Процедура ОсновныеДействияФормыОК(Кнопка)

	ЭтаФорма.ИспользоватьРежимПроведения = ИспользованиеРежимаПроведения.Неоперативный;
	
	ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
	
	Закрыть();

КонецПроцедуры"}
},
{0,
{"3.83. Получение остатков при проведении документа",0,0,"3.83","Запрос.Текст = "" ВЫБРАТЬ
|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток,
|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток
|ИЗ
|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ПараметрПериод, ДоговорКонтрагента = &Договор И Сделка =&Сделка) КАК ВзаиморасчетыСКонтрагентамиОстатки"";"}
},
{0,
{"3.84. Установка значения параметра запроса",0,0,"3.84","Запрос.УстановитьПараметр(""ПараметрПериод"", МоментВремени());"}
},
{0,
{"3.85. Название листинга",0,0,"3.85","ВЫБРАТЬ
	КОЛИЧЕСТВО(РегистрацияПростоевВОрганизации.Ссылка) КАК Случаев,
	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегистрацияПростоевВОрганизации.ФизЛицо) КАК Работников
ИЗ
	Документ.РегистрацияПростоевВОрганизации КАК РегистрацияПростоевВОрганизации
ГДЕ
	(РегистрацияПростоевВОрганизации.Проведен)"}
},
{0,
{"3.86. Получение данных по границам последовательности",0,0,"3.86","ТаблицаГраниц = Последовательности.ПартионныйУчет.ПолучитьГраницы(""Организация""); 

Для Каждого СтрокаТаблицыГраниц из ТаблицаГраниц Цикл
	Организация = СтрокаТаблицыГраниц.Организация;
	ДатаГП 		= СтрокаТаблицыГраниц.Граница.Дата;
	СсылкаГП 	= СтрокаТаблицыГраниц.Граница.Ссылка; 
	
КонецЦикла;"}
},
{0,
{"3.87. Добавление записи в непериодический независимый регистр сведений",0,0,"3.87","НаборЗаписей = РегистрыСведений.ЗначенияСвойств.СоздатьНаборЗаписей();
	
НаборЗаписей.Отбор.Номенклатура.Установить(ТекущаяНоменклатура);
НаборЗаписей.Отбор.Свойство.Установить(ТекущееСвойство);
	
НоваяЗапись = НаборЗаписей.Добавить();

НоваяЗапись.Номенклатура = ТекущаяНоменклатура;
НоваяЗапись.Свойство 	 = ТекущееСвойство;
НоваяЗапись.Значение 	 = ТекущееЗначение;

НаборЗаписей.Записать();"}
},
{0,
{"3.88. Чтение непериодического независимого регистра сведений",0,0,"3.88","НаборЗаписей = РегистрыСведений.СобственныеКонтрагенты.СоздатьНаборЗаписей();
НаборЗаписей.Прочитать();

// Перебрать записи в цикле…
Для Каждого Запись из НаборЗаписей Цикл
	РегистрКонтрагент = Запись.Контрагент;
	РегистрВидСвязи   = Запись.ВидСвязи;
	РегистрОбъект 	  = Запись.Объект;
	
КонецЦикла

// … или выгрузить записи в таблицу значений.
ТаблицаЗаписей = НаборЗаписей.Выгрузить();"}
},
{0,
{"3.89. Чтение непериодического независимого регистра сведений с помощью запроса",0,0,"3.89","ВЫБРАТЬ
	* 
ИЗ 
	РегистрыСведений.СобственныеКонтрагенты"}
},
{0,
{"3.90. Удаление записей независимого регистра сведений",0,0,"3.90","НаборЗаписей = РегистрыСведений.ТорговоеОборудование.СоздатьНаборЗаписей();

НаборЗаписей.Записать();"}
},
{0,
{"3.91. Удаление записей независимого регистра сведений",0,0,"3.91","НаборЗаписей = РегистрыСведений.ОбъектыСтроительстваОрганизаций.СоздатьНаборЗаписей();

НаборЗаписей.Отбор.Организация.Установить(УдаляемаяОрганизация);

НаборЗаписей.Записать(); "}
},
{0,
{"3.92. Добавление записей в периодический независимый регистр сведений",0,0,"3.92","НаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
	
НаборЗаписей.Отбор.Валюта.Установить(ТекущаяВалюта);
НаборЗаписей.Отбор.Период.Установить(ТекущаяДата);
	
НовЗапись = НаборЗаписей.Добавить();

НовЗапись.Валюта 	= ТекущаяВалюта;
НовЗапись.Период 	= ТекущаяДата;
НовЗапись.Курс 		= ТекущийКурс;
НовЗапись.Кратность = ТекущаяКратность;

НаборЗаписей.Записать(Истина);"}
},
{0,
{"3.93. Чтение периодического независимого регистра сведений",0,0,"3.93","НаборЗаписей = РегистрыСведений.Валюты.СоздатьНаборЗаписей();

НаборЗаписей.Отбор.Период.Установить(ДатаЗаписи);
	
НаборЗаписей.Прочитать();

Для Каждого Запись Из НаборЗаписей Цикл

	// Чтение и сообщение данных полей записи.	
	Сообщить(Строка(Запись.Период) + "" "" + Строка(Запись.Валюта) + "" "" + Строка(Запись.Курс));

	 // Изменение данных полей записи.
	 Запись.Курс = 0;

КонецЦикла;	
	
НаборЗаписей.Записать();"}
},
{0,
{"3.94. Удаление всех записей в периодическом независимом регистре сведений",0,0,"3.94","НаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();

НаборЗаписей.Записать();                                         	"}
},
{0,
{"3.95. Получение нужных записей",0,0,"3.95","Запрос = Новый Запрос;

Запрос.Текст = 
""ВЫБРАТЬ
|	*
|ИЗ
|	РегистрСведений.КурсыВалют КАК КурсыВалют
|
|ГДЕ
|	(КурсыВалют.Период >= ДАТАВРЕМЯ(2005, 1, 1) ИЛИ НЕ(КурсыВалют.Валюта.Наименование ПОДОБНО """"USD"""") И НЕ(КурсыВалют.Валюта.Наименование ПОДОБНО """"EUR""""))"";"}
},
{0,
{"3.96. Выгрузка результата запроса",0,0,"3.96","ТаблицаОставляемыхЗаписей = Запрос.Выполнить().Выгрузить();

НаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();

НаборЗаписей.Загрузить(ТаблицаОставляемыхЗаписей);

НаборЗаписей.Записать();"}
},
{0,
{"3.97. Чтение данных на определенную дату из регистра сведений",0,0,"3.97","Запрос = Новый Запрос;
	
МассивВалют = Новый Массив;

МассивВалют.Добавить(Валюта1);
МассивВалют.Добавить(Валюта2);

Запрос.УстановитьПараметр(""МассивВалют"", МассивВалют);
Запрос.УстановитьПараметр(""ДатаПолучения"", ДатаПолучения);
	
Запрос.Текст = ""
|ВЫБРАТЬ
|	ВалютыСрезПоследних.Валюта,
|	ВалютыСрезПоследних.Курс
|ИЗ
|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаПолучения, Валюта В (&МассивВалют)) КАК ВалютыСрезПоследних"";
		
ТаблицаКурсов = Запрос.Выполнить().Выгрузить();"}
},
{0,
{"3.98. Изменение записей регистра",0,0,"3.98","Процедура ЗаменаПериода()

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	""ВЫБРАТЬ
	|	ОтветственныеЛицаОрганизации.Период,
	|	ОтветственныеЛицаОрганизации.СтруктурнаяЕдиница,
	|	ОтветственныеЛицаОрганизации.ОтветственноеЛицо
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизации КАК ОтветственныеЛицаОрганизации
	|ГДЕ
	|	ОтветственныеЛицаОрганизации.Период <= ДАТАВРЕМЯ(2005, 1, 1)
	|	И 
	|	ОтветственныеЛицаОрганизации.СтруктурнаяЕдиница.Наименование ПОДОБНО """"Групп-Трейдинг""""
	|	И 
	|	(ОтветственныеЛицаОрганизации.Должность.Наименование ЕСТЬ NULL 
	|	 ИЛИ 
	|	 НЕ(ОтветственныеЛицаОрганизации.Должность.Наименование ПОДОБНО """"Продавец"""" 
	|		ИЛИ 
	|		ОтветственныеЛицаОрганизации.Должность.Наименование ПОДОБНО """"Кладовщик""""))"";

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
		
	Запись = РегистрыСведений.ОтветственныеЛицаОрганизации.СоздатьМенеджерЗаписи();

	Пока Выборка.Следующий() Цикл
		
		Запись.Период 			  = Выборка.Период;
		Запись.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
		Запись.ОтветственноеЛицо  = Выборка.ОтветственноеЛицо;
		
		Запись.Прочитать();
 
		Если Запись.Выбран() Тогда
			Запись.Период = Дата(2004, 1, 1);
			
			Запись.Записать();		 
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры;"}
},
{0,
{"3.99. Заполнение регистра по существующим данным справочника",0,0,"3.99","Запрос = Новый Запрос;

Запрос.Текст = 
""ВЫБРАТЬ
|	&ДатаУстановки КАК Период,
|	Проекты.Ссылка КАК Проект,
|	Проекты.Ответственный
|ИЗ
|	Справочник.Проекты КАК Проекты
|
|ГДЕ
|	(НЕ (Проекты.ЭтоГруппа)) И (НЕ (Проекты.Ответственный = ЗНАЧЕНИЕ(Справочники.Пользователи.ПустаяСсылка)))"";
	
Запрос.УстановитьПараметр(""ДатаУстановки"", Дата(2000, 1, 1));

ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
НаборЗаписей = РегистрыСведений.ЗакреплениеПроектов.СоздатьНаборЗаписей();

НаборЗаписей.Загрузить(ТаблицаРезультат);

НаборЗаписей.Записать();"}
},
{0,
{"3.100. Добавление записей в регистр, подчиненный регистратору (замещение)",0,0,"3.100","НаборЗаписей = РегистрыСведений.ЛимитыВозвратнойТары.СоздатьНаборЗаписей();

НаборЗаписей.Отбор.Регистратор.Установить(ВыбранныйРегистратор);

НоваяЗапись = НаборЗаписей.Добавить();

НоваяЗапись.Период 			   = ВыбранныйРегистратор.Дата;
НоваяЗапись.Номенклатура 	   = ВыбраннаяНоменклатура;
НоваяЗапись.ДоговорКонтрагента = ВыбранныйДоговор;
НоваяЗапись.ЛимитПоставщика    = 50;

НаборЗаписей.Записать();"}
},
{0,
{"3.101. Добавление записей в регистр, подчиненный регистратору",0,0,"3.101","НаборЗаписей = РегистрыСведений.ЛимитыВозвратнойТары.СоздатьНаборЗаписей();

НаборЗаписей.Отбор.Регистратор.Установить(ВыбранныйРегистратор);

НоваяЗапись = НаборЗаписей.Добавить();

НоваяЗапись.Период 			   = ВыбранныйРегистратор.Дата;
НоваяЗапись.Номенклатура 	   = ВыбраннаяНоменклатура;
НоваяЗапись.ДоговорКонтрагента = ВыбранныйДоговор;
НоваяЗапись.ЛимитПокупателю    = 25;

НаборЗаписей.Записать(Ложь);"}
},
{0,
{"3.102. Чтение записей из регистра, подчиненного регистратору",0,0,"3.102","НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();

НаборЗаписей.Отбор.Регистратор.Установить(ВыбранныйРегистратор);
	
НаборЗаписей.Прочитать();

Для Каждого Запись Из НаборЗаписей Цикл

	// Чтение и сообщение данных полей записи.	
	 Сообщить(Строка(Запись.Период) + "" "" 
	 		+ Строка(Запись.ТипЦен) + "" ""
			+ Строка(Запись.Номенклатура) + "" "" 
			+ Строка(Запись.Цена) + "" "" 
			+ Строка(Запись.ПроцентСкидкиНаценки));

	 // Изменение данных полей записи.
	 Запись.ПроцентСкидкиНаценки = 0;

КонецЦикла;	
	
НаборЗаписей.Записать();"}
},
{0,
{"3.103. Удаление записей из регистра, подчиненного регистратору",0,0,"3.103","Запрос = Новый Запрос;

Запрос.Текст = ""
|ВЫБРАТЬ
|	ЦеныНоменклатурыКонтрагентов.Регистратор
|ИЗ
|	РегистрСведений.ЦеныНоменклатурыКонтрагентов КАК ЦеныНоменклатурыКонтрагентов"";
	
Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();

НаборЗаписей = РегистрыСведений.ЦеныНоменклатурыКонтрагентов.СоздатьНаборЗаписей();
	
Пока Выборка.Следующий() Цикл
	НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
	
	НаборЗаписей.Записать();	
	
КонецЦикла;"}
},
{0,
{"3.104. Формирование проводок в регистре бухгалтерии",0,0,"3.104","// Задать выбираемые значения.
ВыбранныйОтветственный = Справочники.Пользователи.НайтиПоНаименованию(""Иванцова"");
ВыбранныйКонтрагент    = Справочники.Контрагенты.НайтиПоКоду(""00027"");	
ВыбранныйДоговор 	   = Справочники.ДоговорыКонтрагентов.НайтиПоКоду(""00013"");
ВыбранныйДокумент 	   = Документы.ДокументРасчетовСКонтрагентом.НайтиПоНомеру(2, '20050101');	
ВыбранныйСчет 		   = Справочники.БанковскиеСчета.НайтиПоКоду(""00001"");	
ВыбраннаяСтатья 	   = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду(""00002"");
ВыбраннаяОрганизация   = Справочники.Организации.НайтиПоКоду(""00001"");	
ВыбраннаяВалюта 	   = Справочники.Валюты.НайтиПоКоду(810);
	
// Создать будущий регистратор.
ДатаЗаписи = ТекущаяДата();

Документ = Документы.ОперацияБух.СоздатьДокумент();

Документ.Дата 		   = ДатаЗаписи;
Документ.Организация   = ВыбраннаяОрганизация;
Документ.Ответственный = ВыбранныйОтветственный;
Документ.Содержание    = ""Оплата поставщику"";

Документ.Записать();
	
// Создать набор записей.
НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Регистратор.Установить(Документ.Ссылка); 
	
Движение = НаборЗаписей.Добавить();

Движение.Регистратор = Документ.Ссылка;
Движение.Период 	 = ДатаЗаписи;
		
// Заполнить счет дебета.
Движение.СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду(""60.01"");

// Заполнить аналитику счета дебета.
Движение.СубконтоДт.Контрагенты 					= ВыбранныйКонтрагент;
Движение.СубконтоДт.Договоры 						= ВыбранныйДоговор;
Движение.СубконтоДт.ДокументыРасчетовСКонтрагентами = ВыбранныйДокумент;
		
// Заполнить счет кредита.
Движение.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду(""51"");

// Заполнить аналитику счета кредита.
Движение.СубконтоКт.БанковскиеСчета 			  = ВыбранныйСчет;
Движение.СубконтоКт.СтатьиДвиженияДенежныхСредств = ВыбраннаяСтатья;
		
// Балансовое измерение.
Движение.Организация = ВыбраннаяОрганизация;

// Балансовый ресурс.
Движение.Сумма = 300000;

// Реквизиты.
Движение.НомерЖурнала = ""БК"";
Движение.Содержание   = ""Оплата поставщику"";
	
// Записать набор записей.
НаборЗаписей.Записать();"}
},
{0,
{"3.105. Получение остатка по счету",0,0,"3.105","Запрос = Новый Запрос;	

Запрос.Текст = ""
|ВЫБРАТЬ
|	ХозрасчетныйОстатки.Субконто1,
|	ХозрасчетныйОстатки.Организация,
|	ХозрасчетныйОстатки.СуммаОстаток,
|	ХозрасчетныйОстатки.КоличествоОстаток
|ИЗ
|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет = &Счет, , ) КАК ХозрасчетныйОстатки"";

Запрос.УстановитьПараметр(""Период"", КонецДня(ДатаОтчета));
Запрос.УстановитьПараметр(""Счет""  , ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);

РезультатЗапроса = Запрос.Выполнить();"}
},
{0,
{"3.106. Получение оборота по счету",0,0,"3.106","Запрос = Новый Запрос;

Запрос.Текст = 
""ВЫБРАТЬ
|	ХозрасчетныйОбороты.СуммаОборотДт,
|	ХозрасчетныйОбороты.СуммаОборотКт
|ИЗ
|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачПериода, &КонПериода, Период, Счет = &Счет,,,,) КАК ХозрасчетныйОбороты"";

Запрос.УстановитьПараметр(""НачПериода"", НачПериода);
Запрос.УстановитьПараметр(""КонПериода"", КонПериода);
Запрос.УстановитьПараметр(""Счет""	  , ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);

РезультатЗапроса = Запрос.Выполнить();"}
},
{0,
{"3.107. Получение остатков по счетам",0,0,"3.107","""ВЫБРАТЬ
|	ХозрасчетныйОстатки.Счет,
|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Счет),
|	ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт КАК ВалютнаяСуммаОстатокДт,
|	ХозрасчетныйОстатки.Счет.Порядок КАК СчетПорядок,
|	ХозрасчетныйОстатки.Валюта КАК Валюта,
|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Валюта)
|ИЗ
|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата, Счет.Валютный И Счет.Вид = &Активный, , ) КАК ХозрасчетныйОстатки
|УПОРЯДОЧИТЬ ПО
|	СчетПорядок
|ИТОГИ
|	СУММА(ВалютнаяСуммаОстатокДт)
|ПО
|	Валюта"";"}
},
{0,
{"3.108. Установка параметров запроса",0,0,"3.108","Запрос.УстановитьПараметр(""Активный"", ВидСчета.Активный);
Запрос.УстановитьПараметр(""Дата""	, Дата);"}
},
{0,
{"3.109. Перенос остатков на другой счет",0,0,"3.109","Запрос = Новый Запрос;

Запрос.Текст = 
""ВЫБРАТЬ
|	ХозрасчетныйОстатки.СуммаОстатокДт
|ИЗ
|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет = &Счет, , Субконто1 = &Контрагент И Организация = &Организация И Субконто2 = &Договор) КАК ХозрасчетныйОстатки"";

// Считаем что на счете ведется аналитика только в разрезе контрагентов и договоров.
Запрос.УстановитьПараметр(""Период"", 	 Период1);
Запрос.УстановитьПараметр(""Контрагент"",  Контрагент);
Запрос.УстановитьПараметр(""Договор"", 	 Договор);
Запрос.УстановитьПараметр(""Организация"", Организация);
Запрос.УстановитьПараметр(""Счет"", 		 ПланыСчетов.Хозрасчетный.РасчетыСПокупателями);

Выборка = Запрос.Выполнить().Выбрать();

Если Выборка.Следующий() Тогда
	Документ = Документы.ОперацияБух.СоздатьДокумент();
	
	Документ.Дата 		 = РабочаяДата;
	Документ.Организация = Организация;
	Документ.Содержание  = ""Погашение дебиторской задолженности"";
	
	Проводка = Документ.Движения.Хозрасчетный.Добавить();
	
	Проводка.СчетДт 				= ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
	Проводка.СчетКт 				= ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	Проводка.СубконтоДт.Контрагенты = Контрагент;
	Проводка.СубконтоДт.Договоры 	= Договор;
	Проводка.Сумма 					= Выборка.СуммаОстатокДт;
	Документ.СуммаОперации 			= Выборка.СуммаОстатокДт;
	
	Форма = Документ.ПолучитьФорму();
	
	Форма.Открыть();
	
КонецЕсли;	 "}
},
{0,
{"3.110. Поиск первого документа",0,0,"3.110","ВЫБРАТЬ ПЕРВЫЕ 1
	ХозрасчетныйОстаткиИОбороты.Регистратор КАК Регистратор
ИЗ
	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаН, &ДатаК, Регистратор,,Счет = &Счет,,) КАК ХозрасчетныйОстаткиИОбороты
ГДЕ
	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт > 0
УПОРЯДОЧИТЬ ПО
	ХозрасчетныйОстаткиИОбороты.Период,
	Регистратор"}
},
{0,
{"3.111. Выбор счетов с указанными субконто",0,0,"3.11","ВЫБРАТЬ
	ХозрасчетныйВидыСубконто.Ссылка как Счет
ИЗ
	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
ГДЕ
	ХозрасчетныйВидыСубконто.ВидСубконто.Наименование В (""Договоры"", ""Контрагенты"")"}
},
{0,
{"3.112. Выбор счетов с указанной комбинацией субконто",0,0,"3.112","ВЫБРАТЬ
	ХозрасчетныйВидыСубконто.Ссылка КАК Счет
ИЗ
	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
			ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто1
		ПО 
			ХозрасчетныйВидыСубконто.Ссылка = ХозрасчетныйВидыСубконто1.Ссылка
ГДЕ
	(ХозрасчетныйВидыСубконто.ВидСубконто.Наименование = ""Контрагенты"") И (ХозрасчетныйВидыСубконто1.ВидСубконто.Наименование = ""Номенклатура"")"}
},
{0,
{"3.113. Добавление нового вида субконто",0,0,"3.113","ВидМенеджеры = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НайтиПоНаименованию(""Менеджеры"", Истина); 

// Добавить новый вид характеристик.
Если ВидМенеджеры.Пустая() Тогда
	ВидМенеджеры = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СоздатьЭлемент();
	
	ВидМенеджеры.Наименование = ""Менеджеры"";
	ВидМенеджеры.ТипЗначения  = Новый ОписаниеТипов(""СправочникСсылка.Пользователи"");
	
	ВидМенеджеры.Записать();
	
КонецЕсли;

// Получить нужный счет.
Счет = ПланыСчетов.Хозрасчетный.НайтиПоКоду(""90.01.1"");

Если (Не Счет.Пустая()) И (Счет.ВидыСубконто.Найти(ВидМенеджеры) = Неопределено) Тогда
	
	// Добавить новый вид субконто к счету.
	ОбъектСчета = Счет.ПолучитьОбъект();
	НовыйВидСубконто = ОбъектСчета.ВидыСубконто.Добавить();
	
	НовыйВидСубконто.ВидСубконто   = ВидМенеджеры;
	НовыйВидСубконто.ТолькоОбороты = Истина;
	НовыйВидСубконто.Суммовой 	   = Истина;
	
	ОбъектСчета.Записать();
	
КонецЕсли;"}
},
{0,
{"3.114. Получение оборотов по валютным счетам",0,0,"3.114","ВЫБРАТЬ
	ХозрасчетныйОбороты.Организация КАК Организация,
	ХозрасчетныйОбороты.Счет КАК Счет,
	ХозрасчетныйОбороты.Валюта,
	ХозрасчетныйОбороты.СуммаОборотДт,
	ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт,
	ХозрасчетныйОбороты.СуммаОборотКт,
	ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт
ИЗ
	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет.Валютный, , , , ) КАК ХозрасчетныйОбороты

УПОРЯДОЧИТЬ ПО
	Организация,
	ХозрасчетныйОбороты.Счет.Код"}
},
{0,
{"3.115. Получение оборотов по указанным счетам",0,0,"3.115","ВЫБРАТЬ
	ХозрасчетныйОбороты.Счет,
	ХозрасчетныйОбороты.СуммаОборотДт,
	ХозрасчетныйОбороты.СуммаОборотКт
ИЗ
	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон , , Счет В ИЕРАРХИИ (&Счет), , , НЕ(КорСчет В ИЕРАРХИИ (&Счет)), ) КАК ХозрасчетныйОбороты

УПОРЯДОЧИТЬ ПО
	ХозрасчетныйОбороты.Счет.Код"}
},
{0,
{"3.116. Стронирование записей",0,0,"3.116","Процедура ОбработкаПроведения(Отказ, Режим)
	
	СторнируемыеДвижения = РегистрыБухгалтерии.Хозрасчетный.ВыбратьПоРегистратору(СторнируемыйДокумент);
	
	Пока СторнируемыеДвижения.Следующий() Цикл

		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период = Дата;
		Проводка.СчетДт = СторнируемыеДвижения.СчетДт;
		Проводка.СчетКт = СторнируемыеДвижения.СчетКт;

		Для Каждого Субконто Из СторнируемыеДвижения.СубконтоДт Цикл
			Проводка.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
			
		КонецЦикла;

		Для Каждого Субконто Из СторнируемыеДвижения.СубконтоКт Цикл
			Проводка.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
			
		КонецЦикла;

		Проводка.ВалютаДт 		 = СторнируемыеДвижения.ВалютаДт;
		Проводка.ВалютаКт 		 = СторнируемыеДвижения.ВалютаКт;
		Проводка.ВалютнаяСуммаДт = - СторнируемыеДвижения.ВалютнаяСуммаДт;
		Проводка.ВалютнаяСуммаКт = - СторнируемыеДвижения.ВалютнаяСуммаКт;
		Проводка.КоличествоДт 	 = - СторнируемыеДвижения.КоличествоДт;
		Проводка.КоличествоКт 	 = - СторнируемыеДвижения.КоличествоКт;
		Проводка.НомерЖурнала 	 = СторнируемыеДвижения.НомерЖурнала;
		Проводка.Организация 	 = СторнируемыеДвижения.Организация;
		Проводка.Содержание 	 = СторнируемыеДвижения.Содержание;
		Проводка.Сумма 			 = - СторнируемыеДвижения.Сумма;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записать();

КонецПроцедуры"}
},
{0,
{"3.117. Получение суммы начисления по конкретному виду расчета",0,0,"3.117","Запрос = Новый Запрос;

Запрос.Текст = 
""ВЫБРАТЬ
|	БУОсновныеНачисления.Результат
|ИЗ
|	РегистрРасчета.БУОсновныеНачисления КАК БУОсновныеНачисления
|ГДЕ
|	БУОсновныеНачисления.ПериодРегистрации = &Период И БУОсновныеНачисления.ФизЛицо = &ФизЛицо И БУОсновныеНачисления.ВидРасчета = &ВидРасчета"";"}
},
{0,
{"3.118. Установка параметров запроса",0,0,"3.118","Запрос.УстановитьПараметр(""Период"", 	НачалоМесяца(Период1));
Запрос.УстановитьПараметр(""ВидРасчета"", ВидРасчета);
Запрос.УстановитьПараметр(""ФизЛицо"", 	ФизЛицо); "}
},
{0,
{"3.119. Получение суммы всех начислений",0,0,"3.119","""ВЫБРАТЬ
|	БУОсновныеНачисления.Организация КАК Организация,
|	ПРЕДСТАВЛЕНИЕ(БУОсновныеНачисления.Организация),
|	БУОсновныеНачисления.ВидРасчета,
|	ПРЕДСТАВЛЕНИЕ(БУОсновныеНачисления.ВидРасчета),
|	БУОсновныеНачисления.Результат КАК Результат,
|	""""Основные"""" КАК ВариантНачислений
|ИЗ
|	РегистрРасчета.БУОсновныеНачисления КАК БУОсновныеНачисления
|ГДЕ
|	БУОсновныеНачисления.ПериодРегистрации = &НужныйПериод И БУОсновныеНачисления.ФизЛицо = &ФизЛицо
|
|ОБЪЕДИНИТЬ ВСЕ
|
|ВЫБРАТЬ
|	БУДополнительныеНачисления.Организация,
|	ПРЕДСТАВЛЕНИЕ(БУДополнительныеНачисления.Организация),
|	БУДополнительныеНачисления.ВидРасчета,
|	ПРЕДСТАВЛЕНИЕ(БУДополнительныеНачисления.ВидРасчета),
|	БУДополнительныеНачисления.Результат,
|	""""Дополнительные""""
|ИЗ
|	РегистрРасчета.БУДополнительныеНачисления КАК БУДополнительныеНачисления
|ГДЕ
|	БУДополнительныеНачисления.ПериодРегистрации = &НужныйПериод И БУДополнительныеНачисления.ФизЛицо = &ФизЛицо
|ИТОГИ СУММА(Результат)
|ПО ОБЩИЕ, 
|	Организация, 
|	ВариантНачислений"";"}
},
{0,
{"3.120. Получение таблицы перерасчетов",0,0,"3.120","ВЫБРАТЬ
	ПерерасчетОсновных.ФизЛицо КАК Работник,
	ПерерасчетОсновных.ВидРасчета,
	ПерерасчетОсновных.ОбъектПерерасчета КАК Документ
ИЗ
	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизации.ПерерасчетОсновныхНачислений КАК ПерерасчетОсновных

ОБЪЕДИНИТЬ ВСЕ

ВЫБРАТЬ
	ПерерасчетДополнительных.ФизЛицо,
	ПерерасчетДополнительных.ВидРасчета,
	ПерерасчетДополнительных.ОбъектПерерасчета
ИЗ
	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизации.ПерерасчетДополнительныхНачислений КАК ПерерасчетДополнительных"}
},
{0,
{"3.121. Поиск записей полностью вытесненных видов расчета",0,0,"3.121","ВЫБРАТЬ РАЗРЕШЕННЫЕ
	УправленческиеНачисления.НомерСтроки КАК НомерСтроки
ИЗ
	РегистрРасчета.УправленческиеНачисления КАК УправленческиеНачисления
	ЛЕВОЕ СОЕДИНЕНИЕ 
		РегистрРасчета.УправленческиеНачисления.ФактическийПериодДействия(Регистратор = &парамСсылка) КАК УправленческиеНачисленияФактическийПериодДействия
	ПО
		УправленческиеНачисления.НомерСтроки = УправленческиеНачисленияФактическийПериодДействия.НомерСтроки 
		И
		УправленческиеНачисления.Регистратор = УправленческиеНачисленияФактическийПериодДействия.Регистратор

ГДЕ
	УправленческиеНачисления.Регистратор = &парамСсылка И ((УправленческиеНачисленияФактическийПериодДействия.Регистратор) ЕСТЬ NULL )"}
},
{0,
{"3.122. Формирование расчетного листка",0,0,"3.122","""ВЫБРАТЬ
|	ВложенныйЗапрос.ФизЛицо,
|	ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.ФизЛицо),
|	ВложенныйЗапрос.ФизЛицоПредставление КАК ФизЛицоПредставление1,
|	ВложенныйЗапрос.ВидРасчета,
|	ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.ВидРасчета),
|	ВложенныйЗапрос.ВидРасчетаПредставление КАК ВидРасчетаПредставление1,
|	ВложенныйЗапрос.Результат КАК Результат,
|	ВложенныйЗапрос.ТипРасчета КАК ТипРасчета
|ИЗ
|	(ВЫБРАТЬ
|		БУОсновныеНачисления.ФизЛицо КАК ФизЛицо,
|		ПРЕДСТАВЛЕНИЕ(БУОсновныеНачисления.ФизЛицо) КАК ФизЛицоПредставление,
|		БУОсновныеНачисления.ВидРасчета КАК ВидРасчета,
|		ПРЕДСТАВЛЕНИЕ(БУОсновныеНачисления.ВидРасчета) КАК ВидРасчетаПредставление,
|		БУОсновныеНачисления.Результат КАК Результат,
|		""""Начисления"""" КАК ТипРасчета
|	 ИЗ
|		РегистрРасчета.БУОсновныеНачисления КАК БУОсновныеНачисления
|	 ГДЕ
|		БУОсновныеНачисления.ФизЛицо = &ФизЛицо И БУОсновныеНачисления.ПериодРегистрации = &НужныйПериод
|	
|	 ОБЪЕДИНИТЬ ВСЕ
|	
|	 ВЫБРАТЬ
|		УдержанияРаботниковОрганизаций.ФизЛицо,
|		ПРЕДСТАВЛЕНИЕ(УдержанияРаботниковОрганизаций.ФизЛицо),
|		УдержанияРаботниковОрганизаций.ВидРасчета,
|		ПРЕДСТАВЛЕНИЕ(УдержанияРаботниковОрганизаций.ВидРасчета),
|		- УдержанияРаботниковОрганизаций.Результат,
|		""""Удержания""""
|	 ИЗ
|		РегистрРасчета.УдержанияРаботниковОрганизаций КАК УдержанияРаботниковОрганизаций
|	 ГДЕ
|		УдержанияРаботниковОрганизаций.ФизЛицо = &ФизЛицо  И УдержанияРаботниковОрганизаций.ПериодРегистрации = &НужныйПериод) КАК ВложенныйЗапрос
|ИТОГИ
|	СУММА(Результат)
|ПО
|	ОБЩИЕ,
|	ТипРасчета"";"}
},
{0,
{"3.123. Сторнирование расчетов прошлых периодов",0,0,"3.123","ТаблицаСторноЗаписей = Движения.ОсновныеНачисленияРаботниковОрганизации.ПолучитьДополнение();

Для Каждого СтрокаСторно Из ТаблицаСторноЗаписей Цикл

	// Добавить сторно-записи в набор записей регистра.
	// Новая запись движений.
	Движение = Движения.ОсновныеНачисленияРаботниковОрганизации.Добавить();

	// Заполнить свойства.
	Движение.ПериодРегистрации 	  = Строка.ПериодРегистрацииСторно;
	Движение.ПериодДействияНачало = Строка.ПериодДействияНачалоСторно;
	Движение.ПериодДействияКонец  = Строка.ПериодДействияКонецСторно;
	Движение.БазовыйПериодНачало  = Строка.БазовыйПериодНачало;
	Движение.БазовыйПериодКонец	  = Строка.БазовыйПериодКонец;
	Движение.ВидРасчета			  = Строка.ВидРасчета;
	Движение.Сторно 			  = Истина;

	// Заполнить измерения.
	Движение.ФизЛицо 	 = Строка.ФизЛицо;
	Движение.Приказ 	 = Строка.Приказ;
	Движение.Организация = Строка.Организация;

	// Ресурсы не заполнять, потому что здесь не происходит расчет, 
	// только подготовка новой записи

	// Заполнить реквизиты.
	Движение.ГрафикРаботы 							 = Строка.ГрафикРаботы;
	Движение.Размер 								 = Строка.Размер;
	Движение.ВидУчетаВремени 						 = Строка.ВидУчетаВремени;
	Движение.ПодразделениеОрганизации 				 = Строка.ПодразделениеОрганизации;
	Движение.ПериодРасчетаСреднегоЗаработкаНачало 	 = Строка.ПериодРасчетаСреднегоЗаработкаНачало;
	Движение.ПериодРасчетаСреднегоЗаработкаОкончание = Строка.ПериодРасчетаСреднегоЗаработкаОкончание;
	
КонецЦикла;

Движения.ОсновныеНачисленияРаботниковОрганизации.Записать();"}
},
{0,
{"3.124. Обработчик события Перед выполнением",0,0,"3.124","Процедура ПередВыполнением(Отказ)

	Если Исполнитель.Пустая() Тогда
		Исполнитель = ПараметрыСеанса.ТекущийИсполнитель; 
		
	КонецЕсли;
	
	ДатаВыполнения = ТекущаяДата();

КонецПроцедуры
"}
},
{0,
{"3.125. Обработка интерактивной активации",0,0,"3.125","ПолучитьФорму(""Маршрут"").Открыть();
СтандартнаяОбработка = Ложь;"}
},
{0,
{"3.126. Обработчик события При выполнении",0,0,"3.126","Если ТочкиМаршрута.Количество() = 0 Тогда
	
	Сообщить(""Не определен маршрут!!!"");
	
	Отказ = Истина;
	
КонецЕсли;"}
},
{0,
{"3.127. Обработчик события Проверка условия",0,0,"3.127","Результат = ПолучитьТочкуМаршрута().Пустая();"}
},
{0,
{"3.128. Функция ПолучитьТочкуМаршрута()",0,0,"3.128","Функция ПолучитьТочкуМаршрута()

	Запрос=Новый Запрос;
	
	Запрос.Текст= 
	""ВЫБРАТЬ ПЕРВЫЕ 1
	|	НаМаршрутеТочкиМаршрута.НомерСтроки КАК НомерСтроки,
	|	НаМаршрутеТочкиМаршрута.Склад
	|ИЗ
	|	БизнесПроцесс.НаМаршруте.ТочкиМаршрута КАК НаМаршрутеТочкиМаршрута
	|
	|ГДЕ
	|	(НаМаршрутеТочкиМаршрута.Склад НЕ В (ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|												ЭтапПути.Склад 
	|											ИЗ 
	|												Задача.ЭтапПути КАК ЭтапПути 
	|											ГДЕ
	|												ЭтапПути.БизнесПроцесс = &БизнесПроцесс ))
	|	 И (Ссылка = &БизнесПроцесс)
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки"";
	
	Запрос.УстановитьПараметр(""БизнесПроцесс"", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат (Выборка.Склад);
	
	Иначе
		Возврат(Справочники.Склады.ПустаяСсылка());
		
	КонецЕсли;	

КонецФункции	"}
},
{0,
{"3.129. Обработчик события При создании задач",0,0,"3.129","ФормируемыеЗадачи[0].Склад = ПолучитьТочкуМаршрута();"}
},
{0,
{"3.130. Обработчик события Обработка интерактивной активации",0,0,"3.130","ПолучитьФорму(""ПутевойЛист"").Открыть();
СтандартнаяОбработка = Ложь;"}
},
{0,
{"3.131. Обработчик события При выполнении",0,0,"3.131","Если ПоказанияСпидометраКонечные = 0 Или Ссылка.РасходТоплива = 0 Тогда
	Сообщить(""Не введены данные по путевому листу!"");
	
	Отказ = Истина;
	
КонецЕсли;"}
},
{0,
{"3.132. Название листинга",0,0,"3.132","Для Каждого Рецензент Из НаСогласование Цикл
	НоваяЗадача = Задачи.ЭтапПути.СоздатьЗадачу();
	
	НоваяЗадача.БизнесПроцесс = Ссылка;
	НоваяЗадача.Пользователь  = Рецензент.Рецензент;
	НоваяЗадача.Наименование  = ""Согласование со специалистом"";
	НоваяЗадача.ТочкаМаршрута = БизнесПроцессы.НаПараллельноеСогласование.ТочкиМаршрута.Согласование;
	НоваяЗадача.Дата 		  = ТекущаяДата();
	
	НоваяЗадача.Записать();
	
	ФормируемыеЗадачи.Добавить(НоваяЗадача);
	
КонецЦикла;

СтандартнаяОбработка = Ложь;"}
},
{0,
{"3.133. Выполнение процедуры внешней обработки",0,0,"3.133","Обработка = ВнешниеОбработки.Создать(ИмяФайла);
Обработка.Печать(Ссылка);"}
},
{0,
{"3.134. Использование критерия отбора",0,0,"3.134","МассивСсылок = КритерииОтбора.КомпетенцияМенеджераПродаж.Найти(Менеджер);

Для Каждого Ссылка из МассивСсылок Цикл
	Сообщить(Ссылка);
	
КонецЦикла; "}
},
{0,
{"3.135. Использование критерия отбора с помощью запроса",0,0,"3.135","ВЫБРАТЬ
	КомпетенцияМенеджераПродаж.Ссылка
ИЗ
	КритерийОтбора.КомпетенцияМенеджераПродаж(&Менеджер) КАК КомпетенцияМенеджераПродаж"}
},
{0,
{"3.136. Назначение обработчика события экземпляру документа",0,0,"3.136","Процедура НазначитьДокументу(Кнопка)
	
	НакладнаяОбъект = НакладнаяСсылка.ПолучитьОбъект();
	
	ДобавитьОбработчик НакладнаяОбъект.ПриЗаписи, ПриЗаписиДокумента; 

	НакладнаяОбъект.ПолучитьФорму().Открыть();

КонецПроцедуры"}
},
{0,
{"3.137. Процедура ПриЗаписиДокумента",0,0,"3.137","Процедура ПриЗаписиДокумента(Объект, Отказ)

	Сообщить(""Документ записывается!!!"");
	
КонецПроцедуры	"}
},
{0,
{"3.138. Процедура ПриЗаписи",0,0,"3.138","Процедура ПриЗаписи(Объект, Отказ) Экспорт

	// Вставить содержимое обработчика.

КонецПроцедуры"}
}
},
{5,
{"Работа с данными",1,0,"",""},
{0,
{"4.1. Проверка, заблокированы ли данные объекта",0,0,"4.1","Если Объект.Заблокирован() Тогда
	
	// Объект заблокирован через данную переменную
	
Иначе
	
	// Объект не заблокирован через данную переменную
	
КонецЕсли;"}
},
{0,
{"4.2. Попытка установки блокировки",0,0,"4.2","Объект = Номенклатура.ПолучитьОбъект();

Попытка
	Объект.Заблокировать();
	
Исключение
	
	// Данные объекта уже заблокированы.	
	
КонецПопытки;"}
},
{0,
{"4.3. Установка разделяемой блокировки",0,0,"4.3","БлокировкаДанных = Новый БлокировкаДанных;
	
// При создании элемента блокировки указывается пространство блокировки.
ЭлементБлокировки = БлокировкаДанных.Добавить(""РегистрНакопления.ОстаткиНоменклатуры"");
	
// Возможна установка либо исключительного, либо разделяемого режима.
ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	
// Ввод значения, сужающего указанное пространство блокировки
// (используется вариант установки одного конкретного значения).
ЭлементБлокировки.УстановитьЗначение(""Склад"", Склад);
	
// Указание источника, данные из которого сузят указанное пространство блокировки
// используется вариант установки нескольких значений из источника данных – 
// табличной части Товары).
ЭлементБлокировки.ИсточникДанных = Товары; 
	
// Установка соотвествия между полем пространства блокировки и полем источника.
ЭлементБлокировки.ИспользоватьИзИсточникаДанных(""Номенклатура"", ""Номенклатура"");
	
БлокировкаДанных.Заблокировать();"}
},
{0,
{"4.4. Установка исключительной блокировки",0,0,"4.4","БлокировкаДанных = Новый БлокировкаДанных;
	
// При создании элемента блокировки указывается пространство блокировки.
ЭлементБлокировки = БлокировкаДанных.Добавить(""РегистрНакопления.ОстаткиНоменклатуры"");
	
// Возможна установка либо исключительного, либо разделяемого режима.
ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
// Ввод значения, сужающее указанное пространство блокировки
// (используется вариант установки одного конкретного значения).
ЭлементБлокировки.УстановитьЗначение(""Склад"", Склад);
	
// Указание источника, данные из которого сузят указанное пространство блокировки
// (используется вариант установки нескольких значений из источника данных – 
// табличной части Товары).
ЭлементБлокировки.ИсточникДанных = Товары; 
	
// Установка соотвествия между полем пространства блокировки и полем источника.
ЭлементБлокировки.ИспользоватьИзИсточникаДанных(""Номенклатура"", ""Номенклатура"");
	
БлокировкаДанных.Заблокировать();"}
},
{0,
{"4.5. Указание режима открываемой транзакции",0,0,"4.5","НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый); 
	
	// Код исполняемый в рамках транзакции
	// ...
	
ЗафиксироватьТранзакцию();"}
}
},
{62,
{"Формы и элементы управления",1,0,"",""},
{0,
{"5.1. Открытие формы документа",0,0,"5.1","ФормаДокумента = СсылкаНаДокумент.ПолучитьФорму();

ФормаДокумента.Открыть();"}
},
{0,
{"5.2. Открытие формы внешней обработки",0,0,"5.2","Обработка = ВнешниеОбработки.ПолучитьФорму(ИмяФайла);

Обработка.Открыть();"}
},
{0,
{"5.3. Открытие формы с указанием ключа уникальности",0,0,"5.3","Обработка = ВнешниеОбработки.ПолучитьФорму(""C:\Внешние\СпецОтчет.epf"", ИмяФормы, , Ключ);

Обработка.Открыть();"}
},
{0,
{"5.4. Указание положения окна при открытии формы",0,0,"5.4","Форма = Отчеты.ОтчетДиаграмма.ПолучитьФорму(""ФормаОсновная"", ЭтаФорма);

Форма.ПоложениеОкна = ВариантПоложенияОкна.НеПерекрыватьВладельца;

Форма.Открыть();"}
},
{0,
{"5.5. Открытие формы на весь экран",0,0,"5.5","СпособОтображенияОкна = ВариантСпособаОтображенияОкна.Максимизированное;"}
},
{0,
{"5.6. Запрет минимизации/максимизации окна",0,0,"5.6","ИзмененятьСпособОтображенияОкна = ИзменениеСпособаОтображенияОкна.Запретить;"}
},
{0,
{"5.7. Позиционирование в форме списка",0,0,"5.7","ФормаСписка = Документы[Метаданные().Имя].ПолучитьФормуСписка();

ФормаСписка.ПараметрТекущаяСтрока = Ссылка;

ФормаСписка.Открыть();"}
},
{0,
{"5.8. Гарантированное открытие формы в новом окне",0,0,"5.8","ФормаСписка = Документы[Метаданные().Имя].ПолучитьФормуСписка( , , Новый УникальныйИдентификатор());
"}
},
{0,
{"5.9. Открытие формы подчиненного справочника",0,0,"5.9","Если Не Контрагент.Пустая() Тогда
	ФормаПодчиненныхДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьФормуСписка();
	
	ФормаПодчиненныхДоговоров.ПараметрОтборПоВладельцу = Контрагент;
	
	ФормаПодчиненныхДоговоров.Открыть();
	
КонецЕсли;"}
},
{0,
{"5.10. Отображение картинки, сохраненной в реквизите справочника",0,0,"5.10","// Значение, сохраненное в реквизите справочника, имеющем тип 
// ХранилищеЗначения, можно только получить.
СохраненнаяКартинка = Фотография.Получить();

Если СохраненнаяКартинка <> Неопределено Тогда
	
	// Если в хранилище было что-нибудь заранее записано…
	ЭлементыФормы.Фото.Картинка = СохраненнаяКартинка;
	
КонецЕсли;"}
},
{0,
{"5.11. Отбор документов в журнале",0,0,"5.11","ЖурналДокументовСписок.Отбор.ВидДокумента.Установить(Метаданные.Документы.ПриемНаРаботу);"}
},
{0,
{"5.12. Определение интервала дат в журнале",0,0,"5.12","Если ЖурналДокументовСписок.Отбор.Дата.Использование Тогда
	Сообщить(ЖурналДокументовСписок.Отбор.Дата);

Иначе
	Сообщить(""Без ограничения по датам"");

КонецЕсли;"}
},
{0,
{"5.13. Отбор по контрагентам, входящим в список",0,0,"5.13","Процедура ПриОткрытии()

	СправочникСписок.Отбор.Ссылка.ВидСравнения 	= ВидСравнения.ВСписке;
	СправочникСписок.Отбор.Ссылка.Значение 		= СписокКонтрагентов;
	СправочникСписок.Отбор.Ссылка.Использование = Истина;

КонецПроцедуры"}
},
{0,
{"5.14. Обработчик события Начало выбора",0,0,"5.14","Процедура КонтрагентНачалоВыбора(Элемент, СтандартнаяОбработка)
 
 Если Элемент.Значение.Пустая() Тогда 
		СтандартнаяОбработка = Ложь;
		
		ФормаВыбора = Справочники.Контрагенты.ПолучитьФормуВыбора( , Элемент); 
		
		ФормаВыбора.ВыборПокупателя = Истина;
		
		ФормаВыбора.Открыть();
	 
 КонецЕсли;

КонецПроцедуры"}
},
{0,
{"5.15. Открытие группы в форме справочника, вариант а",0,0,"5.15","Если ВыборПокупателя Тогда 
	ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Истина;
	ЭлементыФормы.СправочникСписок.ТекущийРодитель 		 = Константы.ГруппаПокупатели.Получить();
	
КонецЕсли;"}
},
{0,
{"5.16. Открытие группы в форме справочника, вариант б",0,0,"5.16","Если ВыборПокупателя Тогда 
	ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Истина;
	ЭлементыФормы.СправочникСписок.ТекущийРодитель 		 = Справочники.Контрагенты.Покупатели;
	
КонецЕсли;"}
},
{0,
{"5.17. Запрет изменения порядка всех колонок табличного поля",0,0,"5.17","ЭлементыФормы.ТабличноеПоле.ИзменятьПозициюКолонок = Ложь;"}
},
{0,
{"5.18. Запрет изменения порядка некоторых колонок табличного поля",0,0,"5.18","ЭлементыФормы.ТабличноеПоле.Колонки.Картинка.ИзменятьПозицию 	 = Ложь;	
ЭлементыФормы.ТабличноеПоле.Колонки.Код.ИзменятьПозицию 		 = Ложь;	
ЭлементыФормы.ТабличноеПоле.Колонки.Наименование.ИзменятьПозицию = Ложь; "}
},
{0,
{"5.19. Запрет изменения настройки всех колонок табличного поля",0,0,"5.19","ЭлементыФормы.ТабличноеПоле.ИзменятьНастройкуКолонок= Ложь;"}
},
{0,
{"5.20. Запрет изменения настройки некоторых колонок табличного поля",0,0,"5.20","ЭлементыФормы.ТабличноеПоле.Колонки.Картинка.ИзменятьНастройку 	   = Ложь;	
ЭлементыФормы.ТабличноеПоле.Колонки.Код.ИзменятьНастройку 		   = Ложь;	
ЭлементыФормы.ТабличноеПоле.Колонки.Наименование.ИзменятьНастройку = Ложь; "}
},
{0,
{"5.21. Получение представления отбора в журнале",0,0,"5.21","ЭлементыФормы.НадписьОтбор.Заголовок = СписокДокументов.Отбор;"}
},
{0,
{"5.22. Получение подробной информации об отборе",0,0,"5.22","УстановленныйОтбор = СписокДокументов.Отбор;
Сообщить(""Элементы отбора:"");

Для Каждого ЭлементОтбора из УстановленныйОтбор Цикл
	Сообщить(Строка(ЭлементОтбора) + "" использование = "" + ЭлементОтбора.Использование);
	
КонецЦикла;"}
},
{0,
{"5.23. Позиционирование на элементе с известным наименованием",0,0,"5.23","ЭлементыФормы.СправочникСписок.ТекущаяСтрока = Справочники.Контрагенты.НайтиПоНаименованию(""ПОСТАВЩИКИ"", Истина);"}
},
{0,
{"5.24. Отбор в форме списка",0,0,"5.24","СправочникСписок.Отбор.СтавкаНДС.Установить(Перечисления.СтавкиНДС.НДС18);"}
},
{0,
{"5.25. Установка значения отбора в форме списка",0,0,"5.25","СправочникСписок.Отбор.СтавкаНДС.Значение 	   = Перечисления.СтавкиНДС.НДС18;
СправочникСписок.Отбор.СтавкаНДС.ВидСравнения  = ВидСравнения.Равно;
СправочникСписок.Отбор.СтавкаНДС.Использование = Истина;"}
},
{0,
{"5.26. Отказ от проверки того, что введенные данные соответствуют отбору",0,0,"5.26","ЭлементыФормы.ПолеСписка.ПроверкаОтображенияНовойСтроки = ВариантПроверкиОтображенияНовойСтроки.НеПроверять;
"}
},
{0,
{"5.27. Заполнение ячейки табличного поля",0,0,"5.27","Процедура ТабличноеПолеЗаказовЗаказПриИзменении(Элемент)

	// Получить текущую строку табличного поля.
	СтрокаТаблицы = ЭлементыФормы.ТабличноеПолеЗаказов.ТекущаяСтрока;

	// Ввести значения в ячейки строки.
	СтрокаТаблицы.Контрагент   = СтрокаТаблицы.Заказ.Контрагент;
	СтрокаТаблицы.ДатаОтгрузки = СтрокаТаблицы.Заказ.ДатаОтгрузки;

КонецПроцедуры"}
},
{0,
{"5.28. Выделение ячеек табличного поля",0,0,"5.28","Процедура ТоварыПриПолученииДанных(Элемент, ОформленияСтрок)

	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ЗначениеЯчейкиОстаток = ОформлениеСтроки.Ячейки.Остаток.Значение;
 
		Если ЗначениеЯчейкиОстаток <> Неопределено Тогда
 
			Если ЗначениеЯчейкиОстаток < 10 Тогда
				ОформлениеСтроки.Ячейки.Остаток.ЦветФона = WebЦвета.Красный;
 
			ИначеЕсли ЗначениеЯчейкиОстаток > 100 Тогда
				ОформлениеСтроки.Ячейки.Остаток.ЦветФона = WebЦвета.Желтый;
				
			КонецЕсли; 
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры"}
},
{0,
{"5.29. Добавление колонки в табличное поле",0,0,"5.29","Если ТаблицаКонтрагентов.Колонки.Найти(""ОсновнойДоговор"") = Неопределено Тогда
	МассивТипов = Новый Массив();
	
	МассивТипов.Добавить(Тип(""СправочникСсылка.ДоговорыКонтрагентов""));
	
	ОписаниеНужныхТипов = Новый ОписаниеТипов(МассивТипов);

	ТаблицаКонтрагентов.Колонки.Добавить(""ОсновнойДоговор"", ОписаниеНужныхТипов);
	
КонецЕсли;

Для Каждого СтрокаТаблицы из ТаблицаКонтрагентов Цикл
	СтрокаТаблицы[""ОсновнойДоговор""] = СтрокаТаблицы[""Контрагент""][""ОсновнойДоговорКонтрагента""];
	
КонецЦикла;

ЭлементыФормы.ВыбранныеКонтрагенты.СоздатьКолонки();
ЭлементыФормы.ВыбранныеКонтрагенты.Колонки.ОсновнойДоговор.ЭлементУправления.КнопкаОткрытия = Истина;
"}
},
{0,
{"5.30. Задание списка выбора",0,0,"5.30","Процедура ПриОткрытии()

	СписокВидовДокументов = Новый СписокЗначений;

	Для Каждого ДокументКонфигурации из Метаданные.Документы Цикл
		СписокВидовДокументов.Добавить(ДокументКонфигурации.Имя); 
		
	КонецЦикла;

	ЭлементыФормы.ПодборДанных.Колонки.ВидДокумента.ЭлементУправления.СписокВыбора = СписокВидовДокументов;

КонецПроцедуры"}
},
{0,
{"5.31. Выбор произвольных документов",0,0,"5.31","ЭлементыФормы.ПодборДанных.Колонки.ВидДокумента.ЭлементУправления.КнопкаСпискаВыбора = Истина;"}
},
{0,
{"5.32. Настройка отбора и порядка",0,0,"5.32","ЭлементыФормы.СправочникСписок.НастройкаОтбора.ОсновнойПоставщик.Доступность  = Истина;
ЭлементыФормы.СправочникСписок.НастройкаПорядка.ОсновнойПоставщик.Доступность = Истина;"}
},
{0,
{"5.33. Обработчик события Начало перетаскивания",0,0,"5.33","Процедура НоменклатураНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)

	// Получить значение, переданное системой.
	Значение = ПараметрыПеретаскивания.Значение;

	// В любом случае значением будет массив.
	МассивЗначений = Новый Массив;

	// Если перетаскивается группа, то в массив записываем входящие в нее элементы.
	Если Значение.ЭтоГруппа Тогда
		Выборка = Справочники.Номенклатура.Выбрать(Значение);

			Пока Выборка.Следующий() Цикл

				Если Не Выборка.ЭтоГруппа Тогда
					МассивЗначений.Добавить(Выборка.Ссылка);
					
				КонецЕсли;
				
			КонецЦикла;	

	Иначе	
		МассивЗначений.Добавить(Значение);
		
	КонецЕсли;	

	// Заполненный массив записываем в параметры.
	ПараметрыПеретаскивания.Значение = МассивЗначений;

КонецПроцедуры"}
},
{0,
{"5.34. Обработчик события Проверка перетаскивания",0,0,"5.34","Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры
"}
},
{0,
{"5.35. Обработчик события Перетаскивание",0,0,"5.35","Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	ПолученныйМассив = ПараметрыПеретаскивания.Значение;

	Если ТипЗнч(ПолученныйМассив) = Тип(""Массив"") Тогда

		Для Каждого Значение Из ПолученныйМассив Цикл
			НоваяСтрока = ДокументОбъект.Товары.Добавить();
			
			НоваяСтрока.Номенклатура = Значение;
			НоваяСтрока.Количество 	 = 1;
			
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры"}
},
{0,
{"5.36. Вывод остатков в списке номенклатуры",0,0,"5.36","Процедура СписокНоменклатураПриПолученииДанных(Элемент, ОформленияСтрок)

	Запрос = Новый Запрос(""
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Остаток,
	|	ТоварыНаСкладахОстатки.Номенклатура.Ссылка КАК Товар
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки( , Номенклатура В (&МассивТоваров)) КАК ТоварыНаСкладахОстатки"");	
	
	МассивНоменклатуры = Новый Массив; 			// для передачи в параметр запроса
	Соответствие 	   = Новый Соответствие;	// для заполнения остатков в строках табличного поля
	
	Для Каждого Строка из ОформленияСтрок Цикл
		МассивНоменклатуры.Добавить(Строка.ДанныеСтроки.Ссылка);
		Соответствие.Вставить(Строка.ДанныеСтроки.Ссылка, Строка);
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр(""МассивТоваров"", МассивНоменклатуры);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Вывести остаток в строку, найденную в соответствии по номенклатуре из запроса.
	Пока Выборка.Следующий() Цикл
		Соответствие.Получить(Выборка.Товар.Ссылка).Ячейки.Остаток.Значение = Выборка.Остаток;
		
	КонецЦикла;	

КонецПроцедуры"}
},
{0,
{"5.37. Размещение картинки на закладке",0,0,"5/37","ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаУчета.КартинкаЗаголовка = БиблиотекаКартинок.ДебетКредит; 
"}
},
{0,
{"5.38. Переход на активную закладку",0,0,"5/38","Процедура ПриОткрытии()

	Если ЭтоНовый() = Ложь Тогда
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.СчетаИДоговоры;
		
	КонецЕсли;

КонецПроцедуры"}
},
{0,
{"5.39. Организация выбора документов",0,0,"5/39","СписокДокументов = Новый СписокЗначений();

Док = Метаданные.Документы;

СписокДокументов.Добавить(Док.ПлатежноеПоручениеИсходящее			  , , Ложь);
СписокДокументов.Добавить(Док.ПлатежноеПоручениеВходящее			  , , Ложь);
СписокДокументов.Добавить(Док.АккредитивПереданный					  , , Ложь);
СписокДокументов.Добавить(Док.АккредитивПолученный					  , , Ложь);
СписокДокументов.Добавить(Док.ПлатежноеТребованиеВыставленное		  , , Ложь);
СписокДокументов.Добавить(Док.ПлатежноеТребованиеПолученное			  , , Ложь);
СписокДокументов.Добавить(Док.ИнкассовоеПоручениеПереданное			  , , Ложь);
СписокДокументов.Добавить(Док.ИнкассовоеПоручениеПолученное			  , , Ложь);
СписокДокументов.Добавить(Док.ПлатежныйОрдерСписаниеДенежныхСредств	  , , Ложь);
СписокДокументов.Добавить(Док.ПлатежныйОрдерПоступлениеДенежныхСредств, , Ложь);

Если СписокДокументов.ОтметитьЭлементы(""Укажите, какие списки документов открыть"") Тогда
	
	Для Каждого НазваниеДокумента из СписокДокументов Цикл
		
		Если НазваниеДокумента.Пометка Тогда
			ФормаСписка = Документы[НазваниеДокумента.Значение.Имя].ПолучитьФормуСписка();
			ФормаСписка.Открыть();
			
		КонецЕсли;
 
 КонецЦикла;

КонецЕсли;"}
},
{0,
{"5.40. Обработчик события Окончание ввода текста",0,0,"5/40","Процедура ПерсонаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)

	Значение = Новый СписокЗначений();
	
	Значение.Добавить(""Уважаемый "" + Текст);
	Значение.Добавить(""Уважаемая "" + Текст);
	Значение.Добавить(""Уважаемое "" + Текст);
	Значение.Добавить(""Уважаемые "" + Текст);
	Значение.Добавить(Текст);	
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры"}
},
{0,
{"5.41. Создание подменю",0,0,"5/41","КнопкиКоманднойПанели = ЭлементыФормы.КоманднаяПанельФормы.Кнопки;

// Проверить, нет ли уже на командной панели кнопки ""Сформировать"".
// Если есть – удалить. 
Индекс = КнопкиКоманднойПанели.Индекс(КнопкиКоманднойПанели.Найти(""Сформировать""));

Если Индекс = -1 Тогда
	Индекс = 0;
	
Иначе 
	КнопкиКоманднойПанели.Удалить(Индекс);
	
КонецЕсли;

// Создать подменю ""Сформировать"".
ПодменюСформировать = КнопкиКоманднойПанели.Вставить(Индекс, ""Сформировать"", ТипКнопкиКоманднойПанели.Подменю, ""Сформировать""); 

// Добавить картинку.
ПодменюСформировать.Картинка 	= БиблиотекаКартинок.Сформировать;
ПодменюСформировать.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;

// Опросить перечисление о возможных вариантах периодичности.
Запрос = Новый Запрос(""ВЫБРАТЬ Ссылка ИЗ Перечисление.Периодичность"");
Выборка = Запрос.Выполнить().Выбрать();

//Добавить кнопки к подменю.
Пока Выборка.Следующий() Цикл
	Период = Выборка.Ссылка;
	ПодменюСформировать.Кнопки.Добавить(""кн"" + Период, ТипКнопкиКоманднойПанели.Действие,
										""Сформировать за "" + Период, 
										Новый Действие(""КнопкаСформироватьНажатие""));
КонецЦикла;"}
},
{0,
{"5.42. Обработчик события нажатия на кнопку",0,0,"5.42","Процедура КнопкаСформироватьНажатие(Элемент)

	НазваниеПериодичности = СтрЗаменить(Элемент.Имя, ""кн"", """");
	//	...

КонецПроцедуры"}
},
{0,
{"5.43. Назначение сочетания клавиш",0,0,"5.43","СозданнаяКнопка.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.L, Истина, Истина,);"}
},
{0,
{"5.44. Обработчик события При изменении",0,0,"5.44","Процедура ОбрабатываемыйДокументПриИзменении(Элемент)

	СписокВыбора = ЭлементыФормы.ОбрабатываемаяТабличнаяЧасть.СписокВыбора;
	СписокВыбора.Очистить();

	Если Элемент.Значение <> Неопределено И Не(Элемент.Значение.Пустая()) Тогда
		ТабличныеЧасти = Элемент.Значение.Метаданные().ТабличныеЧасти; 

		Для Каждого ТабличнаяЧасть из ТабличныеЧасти Цикл
			СписокВыбора.Добавить(ТабличнаяЧасть);	
			
		КонецЦикла;	
		
	КонецЕсли;

КонецПроцедуры"}
},
{0,
{"5.45. Обработчик события Очистка",0,0,"5.45","Процедура ОбрабатываемыйДокументОчистка(Элемент, СтандартнаяОбработка)

	ОбрабатываемаяТабличнаяЧасть = """";

КонецПроцедуры"}
},
{0,
{"5.46. Перебор выделенных дат",0,0,"5.46","КоллекцияДат = ЭлементыФормы.ПолеКалендаря.ВыделенныеДаты;

Для каждого ДатаКалендаря из КоллекцияДат Цикл
	Сообщить(ДатаКалендаря);
	
КонецЦикла;"}
},
{0,
{"5.47. Включение режима множественного выделения дат",0,0,"5.47","ЭлементыФормы.ПолеКалендаря.РежимВыделения = РежимВыделенияДаты.Множественный;"}
},
{0,
{"5.48. Использование индикатора",0,0,"5.48","Выборка = РезультатЗапроса.Выбрать();
	
Индикатор = ЭлементыФормы.ИндикаторПеребора;

Индикатор.МаксимальноеЗначение = Выборка.Количество();
Индикатор.Значение 			   = 0;

Пока Выборка.Следующий() Цикл
	Индикатор.Значение = Индикатор.Значение + 1;	
	//	...	
	
КонецЦикла;"}
},
{0,
{"5.49. Установка свойств индикатора",0,0,"5.49","Выборка = РезультатЗапроса.Выбрать();
	
Индикатор = ЭлементыФормы.ИндикаторПеребора;

Индикатор.МаксимальноеЗначение = Выборка.Количество();
Индикатор.Значение 			   = 0;
Индикатор.ОтображатьПроценты   = Истина;
Индикатор.СтильОтображения 	   = РежимСглаживанияИндикатора.Прерывистый;
Индикатор.Ориентация 		   = Ориентация.Вертикально;
Индикатор.Шаг 				   = 0.1;

Пока Выборка.Следующий() Цикл
	
	Индикатор.Значение = Индикатор.Значение + 1;	
	//	...	
	
КонецЦикла;"}
},
{0,
{"5.50. Изменение источника данных, а",0,0,"5.50","Процедура КнопкаВыполнитьНажатие(Элемент)

	ЭлементыФормы.ТП.Данные = ""СписокКонтрагентов"";
	ЭлементыФормы.ТП.СоздатьКолонки();

КонецПроцедуры"}
},
{0,
{"5.51. Изменение источника данных, б",0,0,"5.51","Процедура Номенклатура(Кнопка)

	ЭлементыФормы.ТП.Данные = ""СписокНоменклатуры"";
	ЭлементыФормы.ТП.СоздатьКолонки();

КонецПроцедуры"}
},
{0,
{"5.52. Формат отображения даты по умолчанию",0,0,"5.52","ЭлементыФормы.ПолеВвода1.Формат = ""ДП='01.01.0001'"";

// Или
ЭлементыФормы.ПолеВвода1.Формат = ""ДП='00:00:00'"";

// Или
ЭлементыФормы.ПолеВвода1.Формат = ""ДП='01.01.0001 00:00:00'"";"}
},
{0,
{"5.53. Установка текста для невыбранной картинки",0,0,"5.53","ЭлементыФормы.ОсновноеИзображение.ТекстНевыбраннойКартинки = ""фотография номенклатуры отсутствует"";
"}
},
{0,
{"5.54. Открытие стандартного диалога выбора цвета",0,0,"5.54","Диалог = Новый ДиалогВыбораЦвета;

Если Диалог.Выбрать() Тогда
	ВыбранныйЦвет = Диалог.Цвет;
	
КонецЕсли;
"}
},
{0,
{"5.55. Открытие стандартного диалога выбора шрифта",0,0,"5.55","Диалог = Новый ДиалогВыбораШрифта;

Если Диалог.Выбрать() Тогда
	ВыбранныйШрифт = Диалог.Шрифт;
	
КонецЕсли;"}
},
{0,
{"5.56. Заполнение списка данными запроса",0,0,"5.56","Запрос = Новый Запрос(""
|ВЫБРАТЬ
|	Номенклатура.Ссылка КАК Значение,
|	Номенклатура.Представление КАК Представление,
|	ИСТИНА КАК Пометка
|ИЗ
|	Справочник.Номенклатура КАК Номенклатура
|ГДЕ
|	Номенклатура.ОсновнойПоставщик = &ОсновнойПоставщик"");

Запрос.УстановитьПараметр(""ОсновнойПоставщик"", ПолеПоставщик);

Выборка = Запрос.Выполнить().Выбрать();

Пока Выборка.Следующий() Цикл
	ЗаполнитьЗначенияСвойств(ПолеСписка.Добавить(), Выборка); 
	
КонецЦикла;"}
},
{0,
{"5.57. Отображение файла графической схемы",0,0,"5.57","Схема = Новый ГрафическаяСхема();

Схема.Прочитать(""D:/MyScheme.grs"");

ЭлементыФормы.СтруктурнаяСхема.УстановитьСхему(Схема);"}
},
{0,
{"5.58. Задание стиля",0,0,"5.58","ОсновнойИнтерфейс = ПользователиИнформационнойБазы.ТекущийПользователь().ОсновнойИнтерфейс.Имя;

Если ОсновнойИнтерфейс = ""ИнтерфейсКассира"" Тогда
	ГлавныйСтиль = БиблиотекаСтилей.СтильКассира;

ИначеЕсли ОсновнойИнтерфейс = ""Планирование"" Тогда
	ГлавныйСтиль = БиблиотекаСтилей.СтильПланирования;

Иначе	
	ГлавныйСтиль = БиблиотекаСтилей.Основной;
	
КонецЕсли;"}
},
{0,
{"5.59. Переключение интерфейсов",0,0,"5.59","СтрокаИменИнтерфейсов = """";

Для Каждого ИмяИнтерфейса из СписокИнтерфесов Цикл

	Если ИмяИнтерфейса.Пометка Тогда
		СтрокаИменИнтерфейсов = СтрокаИменИнтерфейсов + ИмяИнтерфейса + "","";
		
	КонецЕсли;
 
КонецЦикла;

ГлавныйИнтерфейс.ПереключитьИнтерфейс(СтрокаИменИнтерфейсов);"}
},
{0,
{"5.60. Подключение глобального обработчика ожидания",0,0,"5.60","Процедура ПриНачалеРаботыСистемы()

	ПодключитьОбработчикОжидания(""ПроверкаОпроса"", 60);

КонецПроцедуры"}
},
{0,
{"5.61. Процедура ОтказОтОпроса()",0,0,"5.61","Процедура ОтказОтОпроса() Экспорт

	ОтключитьОбработчикОжидания(""ПроверкаОпроса"");

КонецПроцедуры"}
},
{0,
{"5.62. Отключение обработчика ожидания в форме обработки",0,0,"5.62","ОтказОтОпроса();"}
}
},
{45,
{"Запросы, отчеты",1,0,"",""},
{0,
{"6.1. Получение данных из табличной части",0,0,"6.1","ВЫБРАТЬ РАЗЛИЧНЫЕ
	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура
ИЗ
	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары"}
},
{0,
{"6.2. Получение данных из табличной части в иерархическом виде",0,0,"6.2","ВЫБРАТЬ РАЗЛИЧНЫЕ
	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура
ИЗ
	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
ИТОГИ ПО
	Номенклатура ТОЛЬКО ИЕРАРХИЯ"}
},
{0,
{"6.3. Подсчет количества одинаковых элементов",0,0,"6.3","ВЫБРАТЬ
	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество
ИЗ
	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
СГРУППИРОВАТЬ ПО
	РеализацияТоваровУслугТовары.Номенклатура"}
},
{0,
{"6.4. Отбор по значениям вычисленных полей",0,0,"6.4","ВЫБРАТЬ
	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество
ИЗ
	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
СГРУППИРОВАТЬ ПО
	РеализацияТоваровУслугТовары.Номенклатура
ИМЕЮЩИЕ
	СУММА(РеализацияТоваровУслугТовары.Количество) > 10"}
},
{0,
{"6.5. Ограничение выборки из виртуальной таблицы",0,0,"6.5","ВЫБРАТЬ
	ПродажиОбороты.Номенклатура КАК Номенклатура
ИЗ
	РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон) КАК ПродажиОбороты"}
},
{0,
{"6.6. Получение информации о продажах с итогами по подразделениям",0,0,"6.6","ВЫБРАТЬ
	ПродажиОбороты.Подразделение КАК Подразделение,
	ПродажиОбороты.Номенклатура КАК Номенклатура,
	ПродажиОбороты.КоличествоОборот,
	ПродажиОбороты.СтоимостьОборот КАК СтоимостьОборот
ИЗ
	РегистрНакопления.Продажи.Обороты((&ДатаНач, &ДатаКон) КАК ПродажиОбороты
ИТОГИ СУММА(СтоимостьОборот) ПО
	Подразделение"}
},
{0,
{"6.7. Получение записей с условием на значение поля",0,0,"6.7","ВЫБРАТЬ
	ПродажиОбороты.Подразделение КАК Подразделение,
	ПродажиОбороты.Номенклатура КАК Номенклатура,
	ПродажиОбороты.КоличествоОборот,
	ПродажиОбороты.СтоимостьОборот КАК СтоимостьОборот
ИЗ
	РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон, , Подразделение = &Подразделение) КАК ПродажиОбороты
ГДЕ
	ПродажиОбороты.КоличествоОборот > &Порог"}
},
{0,
{"6.8. Обращение к подчиненным полям",0,0,"6.8","ВЫБРАТЬ
	ПродажиОбороты.ДоговорКонтрагента.Владелец,
	ПродажиОбороты.КоличествоОборот,
	ПродажиОбороты.СтоимостьОборот КАК СтоимостьОборот
ИЗ
	РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон) КАК ПродажиОбороты"}
},
{0,
{"6.9. Использование группировки по владельцу договора",0,0,"6.9","ВЫБРАТЬ
	ПродажиОбороты.ДоговорКонтрагента.Владелец,
	СУММА(ПродажиОбороты.КоличествоОборот) КАК КоличествоОборот,
	СУММА(ПродажиОбороты.СтоимостьОборот) КАК СтоимостьОборот
ИЗ
	РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон) КАК ПродажиОбороты

СГРУППИРОВАТЬ ПО
	ПродажиОбороты.ДоговорКонтрагента.Владелец"}
},
{0,
{"6.10. Объединение результатов нескольких запросов",0,0,"6.10","ВЫБРАТЬ РАЗЛИЧНЫЕ
	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура
ИЗ
	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары

ОБЪЕДИНИТЬ
 
ВЫБРАТЬ РАЗЛИЧНЫЕ
	РеализацияТоваровУслугВозвратнаяТара.Номенклатура
ИЗ
	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслугВозвратнаяТара
	
ОБЪЕДИНИТЬ

ВЫБРАТЬ РАЗЛИЧНЫЕ
	РеализацияТоваровУслугУслуги.Номенклатура
ИЗ
	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги"}
},
{0,
{"6.11. Внутреннее соединение таблиц источников",0,0,"6.11","ВЫБРАТЬ
	ЗаказыПокупателейОстатки.Номенклатура,
	ЗаказыПокупателейОстатки.КоличествоОстаток КАК ЗаказаноПокупателями,
	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК ЗаказаноПоставщикам
ИЗ
	РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОтч) КАК ЗаказыПокупателейОстатки
	
	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаОтч) КАК ЗаказыПоставщикамОстатки
	ПО 
		ЗаказыПокупателейОстатки.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура"}
},
{0,
{"6.12. Левое соединение источников",0,0,"6.12","ВЫБРАТЬ
	ЗаказыПокупателейОстатки.Номенклатура,
	ЗаказыПокупателейОстатки.КоличествоОстаток КАК ЗаказаноПокупателями,
	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК ЗаказаноПоставщикам
ИЗ
	РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОтч) КАК ЗаказыПокупателейОстатки
	
	ЛЕВОЕ СОЕДИНЕНИЕ 
		РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаОтч) КАК ЗаказыПоставщикамОстатки
	ПО 
		ЗаказыПокупателейОстатки.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура"}
},
{0,
{"6.13. Объединение данных по определенному условию",0,0,"6.13","ВЫБРАТЬ
	ВЫБОР 
		КОГДА (ЗаказыПокупателейОстатки.Номенклатура) ЕСТЬ NULL ТОГДА 
			ЗаказыПоставщикамОстатки.Номенклатура 
		ИНАЧЕ 
			ЗаказыПокупателейОстатки.Номенклатура 
	КОНЕЦ КАК Номенклатура,
	ЗаказыПокупателейОстатки.КоличествоОстаток КАК ЗаказаноПокупателями,
	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК ЗаказаноПоставщикам
ИЗ
	РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОтч) КАК ЗаказыПокупателейОстатки
	
	ПОЛНОЕ СОЕДИНЕНИЕ 
		РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаОтч) КАК ЗаказыПоставщикамОстатки
	ПО 
		ЗаказыПокупателейОстатки.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура"}
},
{0,
{"6.14. Вариант с использованием вложенного запроса",0,0,"6.14","ВЫБРАТЬ
	ВложенныйЗапрос.Номенклатура,
	СУММА(ВложенныйЗапрос.ЗаказаноПокупателями) КАК ЗаказаноПокупателями,
	СУММА(ВложенныйЗапрос.ЗаказаноПоставщикам) КАК ЗаказаноПоставщикам
ИЗ
	(ВЫБРАТЬ
		ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
		ЗаказыПокупателейОстатки.КоличествоОстаток КАК ЗаказаноПокупателями,
		0 КАК ЗаказаноПоставщикам
	ИЗ
		РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОтч, ) КАК ЗаказыПокупателейОстатки
	
	ОБЪЕДИНИТЬ
	
	ВЫБРАТЬ
		ЗаказыПоставщикамОстатки.Номенклатура,
		0,
		ЗаказыПоставщикамОстатки.КоличествоОстаток
	ИЗ
		РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаОтч, ) КАК ЗаказыПоставщикамОстатки
	) КАК ВложенныйЗапрос
СГРУППИРОВАТЬ ПО
	ВложенныйЗапрос.Номенклатура"}
},
{0,
{"6.15. Проверка значения NULL",0,0,"6.15","ВЫБРАТЬ
	ЕСТЬNULL(Справочник.Номенклатура.Артикул, ""---"") КАК Артикул,
	Справочник.Номенклатура.Представление КАК Номенклатура"}
},
{0,
{"6.16. Получение процентной доли продаж",0,0,"6.16","ВЫБРАТЬ
	ПродажиОбороты.Номенклатура КАК Номенклатура,
	ПродажиОбороты.СуммаОборот КАК СуммаПродаж,
	ПродажиОбороты.СуммаОборот / СовокупныеОбороты.СуммаОборот * 100 КАК ПроцентнаяДоля
ИЗ
	РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон) КАК ПродажиОбороты
	
	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон) КАК СовокупныеОбороты
	ПО ИСТИНА
УПОРЯДОЧИТЬ ПО
	ПроцентнаяДоля УБЫВ"}
},
{0,
{"6.17. Получение иерархических итогов",0,0,"6.17","ВЫБРАТЬ
	ТоварыГруппы.Ссылка КАК Номенклатура,
	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
ИЗ
	(ВЫБРАТЬ
		Номенклатура.Ссылка КАК Ссылка
	ИЗ
		Справочник.Номенклатура КАК Номенклатура
	ГДЕ
		Номенклатура.Родитель В ИЕРАРХИИ(&Группа) И (Номенклатура.ЭтоГруппа = ЛОЖЬ)
	) КАК ТоварыГруппы
	
	ЛЕВОЕ СОЕДИНЕНИЕ 
		РегистрНакопления.ТоварыНаСкладах.Остатки(&МоментПолучения, Номенклатура В ИЕРАРХИИ (&Группа)) КАК ТоварыНаСкладахОстатки
	ПО ТоварыГруппы.Ссылка = ТоварыНаСкладахОстатки.Номенклатура

ИТОГИ СУММА(КоличествоОстаток) ПО
	Номенклатура ТОЛЬКО ИЕРАРХИЯ"}
},
{0,
{"6.18. Поиск последнего документа с указанной номенклатурой",0,0,"6.18","ВЫБРАТЬ
	ВложенныйЗапрос.Номенклатура,
	МАКСИМУМ(ТоварыНаСкладах.Регистратор) КАК Регистратор
ИЗ
	(ВЫБРАТЬ
		ТоварыНаСкладах.Номенклатура КАК Номенклатура,
		МАКСИМУМ(ТоварыНаСкладах.Период) КАК Период
	 ИЗ
		РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	 ГДЕ
		ТоварыНаСкладах.Период <= &ДатаОтчета И (ТоварыНаСкладах.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг)
	 СГРУППИРОВАТЬ ПО
		ТоварыНаСкладах.Номенклатура) КАК ВложенныйЗапрос

	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	ПО 
		ВложенныйЗапрос.Номенклатура = ТоварыНаСкладах.Номенклатура И ВложенныйЗапрос.Период = ТоварыНаСкладах.Период
ГДЕ
	(ТоварыНаСкладах.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг)
СГРУППИРОВАТЬ ПО
	ВложенныйЗапрос.Номенклатура"}
},
{0,
{"6.19. Подсчет количества записей с одинаковым значением поля",0,0,"6.19","ВЫБРАТЬ
	Контрагенты.ОсновнойМенеджерПокупателя,
	КОЛИЧЕСТВО(Контрагенты.Ссылка) КАК КоличествоЗакрепленных
ИЗ
	Справочник.Контрагенты КАК Контрагенты
ГДЕ
	(Контрагенты.ЭтоГруппа = ЛОЖЬ) И (Контрагенты.ОсновнойМенеджерПокупателя <> ЗНАЧЕНИЕ(Справочники.Пользователи.ПустаяСсылка))
СГРУППИРОВАТЬ ПО
	Контрагенты.ОсновнойМенеджерПокупателя
УПОРЯДОЧИТЬ ПО
	КоличествоЗакрепленных УБЫВ"}
},
{0,
{"6.20. Вывод количества в итоговых записях",0,0,"6.20","ВЫБРАТЬ
	Контрагенты.ОсновнойМенеджерПокупателя.Представление КАК ОсновнойМенеджерПокупателя,
	Контрагенты.Представление,
	1 КАК КоличествоЗакрепленных
ИЗ
	Справочник.Контрагенты КАК Контрагенты
ГДЕ
	Контрагенты.ЭтоГруппа = ЛОЖЬ
УПОРЯДОЧИТЬ ПО 
	КоличествоЗакрепленных УБЫВ
ИТОГИ КОЛИЧЕСТВО(КоличествоЗакрепленных) ПО
	ОсновнойМенеджерПокупателя	"}
},
{0,
{"6.21. Получение количества записей в результате запроса",0,0,"6.21","Результат = Запрос.Выполнить();
КолЗаписей = Результат.Выбрать().Количество();"}
},
{0,
{"6.22. Получение отчета по остаткам",0,0,"6.22","ВЫБРАТЬ
	ВложенныйЗапрос.Номенклатура,
	ВложенныйЗапрос.Размещение КАК Склад,
	ВложенныйЗапрос.КоличествоСписываемое,
	ТоварыНаСкладахОстатки.КоличествоОстаток
ИЗ
	(ВЫБРАТЬ
		ВнутреннийЗаказТовары.Номенклатура КАК Номенклатура,
		ВнутреннийЗаказТовары.Размещение КАК Размещение,
		СУММА(ВнутреннийЗаказТовары.Количество*ВнутреннийЗаказТовары.Коэффициент) КАК КоличествоСписываемое
	ИЗ
		Документ.ВнутреннийЗаказ.Товары КАК ВнутреннийЗаказТовары
	ГДЕ
		ВнутреннийЗаказТовары.Ссылка = &Ссылка
	СГРУППИРОВАТЬ ПО
		ВнутреннийЗаказТовары.Номенклатура,
		ВнутреннийЗаказТовары.Размещение
	) КАК ВложенныйЗапрос

	ЛЕВОЕ СОЕДИНЕНИЕ 
		РегистрНакопления.ТоварыНаСкладах.Остатки(&МоментВремениДокумента, Склад В (ВЫБРАТЬ РАЗЛИЧНЫЕ
																						ВЫРАЗИТЬ(ВнутреннийЗаказТоварыДляОтбора.Размещение КАК Справочник.Склады)
																					ИЗ
																						Документ.ВнутреннийЗаказ.Товары КАК ВнутреннийЗаказТоварыДляОтбора
																					ГДЕ
																						ВнутреннийЗаказТоварыДляОтбора.Ссылка = &Ссылка И НЕ ВЫРАЗИТЬ(ВнутреннийЗаказТоварыДляОтбора.Размещение КАК Справочник.Склады) ЕСТЬ NULL ) 
																						И
																						Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ
																											ВнутреннийЗаказТоварыДляОтбора.Номенклатура
																										ИЗ
																											Документ.ВнутреннийЗаказ.Товары КАК ВнутреннийЗаказТоварыДляОтбора
																										ГДЕ
											 																ВнутреннийЗаказТоварыДляОтбора.Ссылка = &Ссылка)
																					) КАК ТоварыНаСкладахОстатки
	ПО 
		ВложенныйЗапрос.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура И ВложенныйЗапрос.Размещение = ТоварыНаСкладахОстатки.Склад"}
},
{0,
{"6.23. Отбор по значению перечисления",0,0,"6.23","Запрос.Текст = 
""ВЫБРАТЬ
|	ВоинскийУчетСрезПоследних.Физлицо
|ИЗ
|	РегистрСведений.ВоинскийУчет.СрезПоследних(&ДатаОтчета) КАК ВоинскийУчетСрезПоследних
|ГДЕ
|	ВоинскийУчетСрезПоследних.ОтношениеКВоинскомуУчету = &Состоит"""}
},
{0,
{"6.24. Установка параметров запроса",0,0,"6.24","Запрос.УстановитьПараметр(""ДатаОтчета"", ДатаОтчета);
Запрос.УстановитьПараметр(""Состоит""	  , Перечисления.ОтношениеКВоинскомуУчету.Состоит);"}
},
{0,
{"6.25. Получение курса валюты на две различные даты",0,0,"6.25","ВЫБРАТЬ
	ВалютыСрезПоследних.Валюта,
	ВалютыСрезПоследних.Курс,
	&ПерваяДата Как Дата
ИЗ
	РегистрСведений.Валюты.СрезПоследних(&ПерваяДата, ) КАК ВалютыСрезПоследних

ОБЪЕДИНИТЬ ВСЕ

ВЫБРАТЬ
	ВалютыСрезПоследних.Валюта,
	ВалютыСрезПоследних.Курс,
	&ВтораяДата
ИЗ
	РегистрСведений.Валюты.СрезПоследних(&ВтораяДата, ) КАК ВалютыСрезПоследних"}
},
{0,
{"6.26. Название листинга",0,0,"6.26","ВЫБРАТЬ
	ВложенныйЗапрос.Ссылка КАК Документ,
	ВложенныйЗапрос.ДоговорКонтрагентаВалютаВзаиморасчетов КАК ВалютаДоговора,
	ВложенныйЗапрос.КурсВзаиморасчетов,
	ВЫБОР
		КОГДА КурсыВалют.Курс ЕСТЬ NULL ТОГДА 
			0
		ИНАЧЕ 
			КурсыВалют.Курс
	КОНЕЦ КАК КурсОфициальный,
	ВЫБОР
		КОГДА КурсыВалют.Курс ЕСТЬ NULL ТОГДА 
			ВложенныйЗапрос.КурсВзаиморасчетов
		ИНАЧЕ 
			ВложенныйЗапрос.КурсВзаиморасчетов - КурсыВалют.Курс
	КОНЕЦ КАК Превышение
ИЗ
	(ВЫБРАТЬ
		ЗаказПокупателя.Ссылка КАК Ссылка,
		МАКСИМУМ(КурсыВалют.Период) КАК Период,
		ЗаказПокупателя.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		ЗаказПокупателя.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ДоговорКонтрагентаВалютаВзаиморасчетов
	ИЗ
		Документ.ЗаказПокупателя КАК ЗаказПокупателя
		
		ЛЕВОЕ СОЕДИНЕНИЕ 
			РегистрСведений.КурсыВалют КАК КурсыВалют
		ПО
			ЗаказПокупателя.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалют.Валюта
			И 
			ЗаказПокупателя.Дата >= КурсыВалют.Период
		СГРУППИРОВАТЬ ПО
			ЗаказПокупателя.КурсВзаиморасчетов,
			ЗаказПокупателя.ДоговорКонтрагента.ВалютаВзаиморасчетов,
			ЗаказПокупателя.Ссылка
	) КАК ВложенныйЗапрос

	ЛЕВОЕ СОЕДИНЕНИЕ 
		РегистрСведений.КурсыВалют КАК КурсыВалют
	ПО
		ВложенныйЗапрос.ДоговорКонтрагентаВалютаВзаиморасчетов = КурсыВалют.Валюта И ВложенныйЗапрос.Период = КурсыВалют.Период"}
},
{0,
{"6.27. Расчет различных итоговых функций в иерархии",0,0,"6.27","ВЫБРАТЬ
	ОстаткиТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
	ОстаткиТоваровКомпанииОстатки.Номенклатура.Представление,
	ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры.Представление,
	ОстаткиТоваровКомпанииОстатки.КоличествоОстаток КАК КоличествоОстаток,
	NULL как Заказ,
	0 КАК Резерв
ИЗ
	РегистрНакопления.ОстаткиТоваровКомпании.Остатки КАК ОстаткиТоваровКомпанииОстатки

ОБЪЕДИНИТЬ ВСЕ

ВЫБРАТЬ
	ЗаказыПокупателейОстатки.Номенклатура,
	ЗаказыПокупателейОстатки.Номенклатура.Представление,
	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры.Представление,
	0,
	ЗаказыПокупателейОстатки.ЗаказПокупателя,
	ЗаказыПокупателейОстатки.КоличествоОстаток
ИЗ
	РегистрНакопления.ЗаказыПокупателей.Остатки КАК ЗаказыПокупателейОстатки

ИТОГИ СУММА(КоличествоОстаток), СУММА(Резерв) ПО
	Номенклатура,
	ХарактеристикаНоменклатуры"}
},
{0,
{"6.28. Отчет по кандидатам",0,0,"6.28","ВЫБРАТЬ
	КандидатыНаРаботу.ФизЛицо КАК ФизЛицо,
	КандидатыНаРаботу.Регистратор КАК Документ,
	КандидатыНаРаботу.Статус КАК Статус
ИЗ
	РегистрСведений.КандидатыНаРаботу.СрезПоследних(&ДатаОтчета, ) КАК КандидатыНаРаботуСрезПоследних

	ЛЕВОЕ СОЕДИНЕНИЕ 
		РегистрСведений.КандидатыНаРаботу КАК КандидатыНаРаботу
	ПО 
		КандидатыНаРаботуСрезПоследних.ФизЛицо = КандидатыНаРаботу.ФизЛицо
ГДЕ
	КандидатыНаРаботуСрезПоследних.Статус = &Отложен И КандидатыНаРаботу.Период <= &ДатаОтчета
УПОРЯДОЧИТЬ ПО
	КандидатыНаРаботу.ФизЛицо.Наименование,
	Документ
ИТОГИ МАКСИМУМ(Статус) ПО
	ФизЛицо
АВТОУПОРЯДОЧИВАНИЕ"}
},
{0,
{"6.29. Установка параметров запроса",0,0,"6.29","Запрос = Новый Запрос(""
|ВЫБРАТЬ
|	Номенклатура.Ссылка
|ИЗ
|	Справочник.Номенклатура КАК Номенклатура
|ГДЕ
|	Номенклатура.Ссылка В ИЕРАРХИИ(&ГруппаНоменклатуры)"");

// Получить описание параметров запроса.	
ПараметрыЗапроса = Запрос.НайтиПараметры();

Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
	ЗаданноеЗначение = Неопределено;

	// Открыть диалог ввода значения данного параметра.
	Если ВвестиЗначение(ЗаданноеЗначение, ""Задайте значение параметра "" + ПараметрЗапроса.Имя, ПараметрЗапроса.ТипЗначения) Тогда
		Запрос.УстановитьПараметр(ПараметрЗапроса.Имя, ЗаданноеЗначение);

	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецЦикла;

РезультатЗапроса = Запрос.Выполнить();"}
},
{0,
{"6.30. Создание временной таблицы",0,0,"6.30","// Создание менеджера временной таблицы
МенеджерВТ = Новый МенеджерВременныхТаблиц;

Запрос = Новый Запрос;

// В свойство запроса ""МенеджерВременныхТаблиц"" записываем менеджер,
// в контексте которого создается временная таблица
Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

Запрос.Текст= ""
|ВЫБРАТЬ
|	РасходнаяНакладнаяСостав.Номенклатура,
|	СУММА(РасходнаяНакладнаяСостав.Количество) КАК Количество,
|	СУММА(РасходнаяНакладнаяСостав.Сумма) КАК Сумма
|ПОМЕСТИТЬ ТЧРеализации
|ИЗ
|	Документ.РеализацияТоваровУслуг.Товары КАК РасходнаяНакладнаяСостав
|ГДЕ
|	РасходнаяНакладнаяСостав.Ссылка = &ЗначениеСсылки
|СГРУППИРОВАТЬ ПО
|	РасходнаяНакладнаяСостав.Номенклатура"";

Запрос.УстановитьПараметр(""ЗначениеСсылки"", ДокументРеализации);

//Создание временной таблицы 
Результат = Запрос.Выполнить();"}
},
{0,
{"6.31. Создание временной таблицы из внешнего источника данных",0,0,"6.31","// Создание менеджера временной таблицы
МенеджерВТ = Новый МенеджерВременныхТаблиц;

Запрос = Новый Запрос;

// В свойство запроса ""МенеджерВременныхТаблиц"" записываем менеджер,
// в контексте которого создается временная таблица
Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

Запрос.Текст = ""
|ВЫБРАТЬ
|	Товар,
|	Количество
|ПОМЕСТИТЬ ТЧРеализацииИОстатки
|ИЗ
|	&ВнешнийИсточник КАК Внешний "";

Запрос.УстановитьПараметр(""ВнешнийИсточник"", ЭлементыФормы.ТПРезультатЗапроса.Значение);

Результат = Запрос.Выполнить();"}
},
{0,
{"6.32. Запрос к временной таблице",0,0,"6/32","Запрос = Новый Запрос;
	
// В свойство запроса ""МенеджерВременныхТаблиц"" записываем менеджер,
// в контексте которого была создана временная таблица
Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

Запрос.Текст = ""
|ВЫБРАТЬ
|	ТЧРеализации.Номенклатура КАК Товар,
|	УчетНоменклатурыОстатки.Склад,
|	УчетНоменклатурыОстатки.КоличествоОстаток,
|	ТЧРеализации.Количество
|ИЗ
|	ТЧРеализации
|	ЛЕВОЕ СОЕДИНЕНИЕ
|		РегистрНакопления.ОстаткиНоменклатуры.Остатки( , Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ ТЧРеализации)) КАК УчетНоменклатурыОстатки
|	ПО
|		ТЧРеализации.Номенклатура = УчетНоменклатурыОстатки.Номенклатура 
|
|ИТОГИ ПО 
|	Товар ИЕРАРХИЯ"";

Результат = Запрос.Выполнить();

// Далее обход результата запроса
//	...
"}
},
{0,
{"6.33. Удаление временной таблицы",0,0,"6.33","Запрос = Новый Запрос;

Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
Запрос.Текст 				   = ""УНИЧТОЖИТЬ ТЧРеализации"";

Результат = Запрос.Выполнить();"}
},
{0,
{"6.34. Использование предопределенных значений",0,0,"6.34","Запрос = Новый Запрос;

Запрос.Текст = ""
|ВЫБРАТЬ
|	ЦеныНоменклатуры.Номенклатура,
|	ЦеныНоменклатуры.Цена
|ИЗ
|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
|ГДЕ
|	ЦеныНоменклатуры.ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.Основной)"";

Результат = Запрос.Выполнить();

// Обход результата запроса
//	...
"}
},
{0,
{"6.35. Использование пустой ссылки",0,0,"6.35","Запрос = Новый Запрос;

Запрос.Текст = ""
|ВЫБРАТЬ
|	ЦеныПродажиСрезПоследних.Номенклатура,
|	ЦеныПродажиСрезПоследних.Цена
|ИЗ
|	РегистрСведений.ЦеныПродажи.СрезПоследних КАК ЦеныПродажиСрезПоследних
|ГДЕ
|	ЦеныПродажиСрезПоследних.ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ПустаяСсылка)"";

Результат = Запрос.Выполнить();

// Обход результата запроса
//	..."}
},
{0,
{"6.36. Использование значений системных перечислений",0,0,"6.36","Запрос = Новый Запрос;

Запрос.Текст = ""
|ВЫБРАТЬ
|	Основной.Код,
|	Основной.Наименование
|ИЗ
|	ПланСчетов.Основной КАК Основной
|ГДЕ
|	Основной.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)"";

Результат = Запрос.Выполнить();

// Обход результата запроса
//	...	"}
},
{0,
{"6.37. Использование нескольких полей периодов",0,0,"6.37","ВЫБРАТЬ
	ОстаткиНоменклатурыОбороты.ПериодГод КАК ПериодГод,
	ОстаткиНоменклатурыОбороты.ПериодКвартал КАК ПериодКвартал,
	ОстаткиНоменклатурыОбороты.ПериодМесяц КАК ПериодМесяц,
	ОстаткиНоменклатурыОбороты.Склад КАК Склад,
	ОстаткиНоменклатурыОбороты.Номенклатура КАК Номенклатура,
	ОстаткиНоменклатурыОбороты.СуммаПриход КАК СуммаПриход,
	ОстаткиНоменклатурыОбороты.СуммаРасход КАК СуммаРасход
ИЗ
	РегистрНакопления.ОстаткиНоменклатуры.Обороты( , , Авто, ) КАК ОстаткиНоменклатурыОбороты
ИТОГИ
	СУММА(СуммаПриход),
	СУММА(СуммаРасход)
ПО
	ПериодГод,
	ПериодКвартал,
	ПериодМесяц,
	Склад,
	Номенклатура"}
},
{0,
{"6.38. Установка отбора",0,0,"6.38","Процедура ПриОткрытии()
	ЭлементОтбора = ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
	
	ЭлементОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(""Номенклатура.Код"");

	// Например.
	ЭлементОтбора.ПравоеЗначение = 14;

КонецПроцедуры"}
},
{0,
{"6.39. Обработчик события При изменении",0,0,"6.39","Процедура НоменклатураПриИзменении(Элемент)
	ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	
	элОтбора = ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
	
	элОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	элОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(""Номенклатура"");
	элОтбора.ПравоеЗначение = Номенклатура;
	
	ЭлементыФормы.Результат.Очистить();
	
	ОтчетОбъект.СкомпоноватьРезультат(ЭлементыФормы.Результат);

КонецПроцедуры"}
},
{0,
{"6.40. Сохранение настроек",0,0,"6.40","Процедура СохранитьНастройки(Кнопка)

	Настройки  = ОтчетОбъект.КомпоновщикНастроек.Настройки;
	НовыйСXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	Путь 	   = СокрЛП(Константы.ПутьДоФайлов.Получить());

	Запись = Новый ЗаписьXML;
	
	Запись.ОткрытьФайл(Путь + ""\config.xml"");
	Запись.ЗаписатьОбъявлениеXML();
	
	НовыйСXDTO.ЗаписатьXML(Запись, Настройки, НазначениеТипаXML.Явное, ФормаXML.Элемент);
	
	Запись.Закрыть();

КонецПроцедуры"}
},
{0,
{"6.41. Восстановление настроек",0,0,"6.41","Процедура ВосстановитьНастройки(Кнопка)

	Чтение 	   = Новый ЧтениеXML;
	НовыйСXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	Путь 	   = СокрЛП(Константы.ПутьДоФайлов.Получить());
	
	Чтение.ОткрытьФайл(Путь + ""\config.xml"");
	
	Настройки = НовыйСXDTO.ПрочитатьXML(Чтение);
	
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);

КонецПроцедуры"}
},
{0,
{"6.42. Процедура формирования отчета",0,0,"6.42","Путь 					  = Константы.ПутьДоФайлов.Получить() + ""\"";
КомпоновщикМакета 		  = Новый КомпоновщикМакетаКомпоновкиДанных;
СхемаКД 				  = ОтчетОбъект.СхемаКомпоновкиДанных;
Настройки 				  = ОтчетОбъект.КомпоновщикНастроек.Настройки;
МакетКомпоновкиДанных 	  = КомпоновщикМакета.Выполнить(СхемаКД, Настройки);
ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
ПроцессорВывода 		  = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;

ТЗ = Новый ТаблицаЗначений();

ТЗ.Колонки.Добавить(""Поставщик"");
ТЗ.Колонки.Добавить(""Номенклатура"");
ТЗ.Колонки.Добавить(""Цена"");

// Обращение в внешнему источнику данных,
// получение данных,
// заполнение таблицы значений ТЗ.
//	...


ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, Новый Структура(""КупимВсегда"", ТЗ));
ЭлементыФормы.Результат.Очистить();

ПроцессорВывода.УстановитьДокумент(ЭлементыФормы.Результат);
ПроцессорВывода.НачатьВывод();

Пока Истина Цикл
	
	ЭлементРезультатаКомпоновкиДанных = ПроцессорКомпоновкиДанных.Следующий();
	
	Если ЭлементРезультатаКомпоновкиДанных = Неопределено Тогда
		Прервать;
		
	КонецЕсли;
	
	ПроцессорВывода.ВывестиЭлемент(ЭлементРезультатаКомпоновкиДанных);

КонецЦикла;

ПроцессорВывода.ЗакончитьВывод();"}
},
{0,
{"6.43. Товары, продаваемые вместе",0,0,"6.43","Анализ = Новый АнализДанных;

// Выбранный тип анализа как раз и указывает на то, что ищем «совместно продаваемые» товары.
Анализ.ТипАнализа = Тип(""АнализДанныхПоискАссоциаций"");

Запрос = Новый Запрос;
Запрос.Текст = 
""ВЫБРАТЬ
|	ПродажиКомпанииОбороты.Регистратор Как ДокументПродажи,
|	ПродажиКомпанииОбороты.Номенклатура
|ИЗ
|	РегистрНакопления.ПродажиКомпании.Обороты(&НачПериода, &КонПериода, Регистратор) КАК ПродажиКомпанииОбороты
|УПОРЯДОЧИТЬ ПО 
|	ДокументПродажи"";

Запрос.УстановитьПараметр(""НачПериода"", НачПериода);
Запрос.УстановитьПараметр(""КонПериода"", КонПериода);

// Получить продажи за указанный период.
// Выбрана периодичность по Регистратору, т.к. необходимо получить
// данные о совместных продажах в рамках одной покупки.
Анализ.ИсточникДанных = Запрос.Выполнить();

// Выполнить анализ в соответствии с указанным источником.
РезультатАнализа = Анализ.Выполнить();

// Для вывода результата анализа воспользуемся построителем отчета анализа данных.
Построитель = Новый ПостроительОтчетаАнализаДанных();

Построитель.Макет 	   = Неопределено;
Построитель.ТипАнализа = Тип(""АнализДанныхПоискАссоциаций"");

ТабДок = Новый ТабличныйДокумент;

Построитель.Вывести(РезультатАнализа, ТабДок);
ТабДок.Показать();"}
},
{0,
{"6.44. Поиск сопутствующих товаров",0,0,"6.44","Анализ = Новый АнализДанных;

// Найти ассоциации
Анализ.ТипАнализа = Тип(""АнализДанныхПоискАссоциаций"");

Запрос = Новый Запрос;
Запрос.Текст = ""ВЫБРАТЬ
|	ПродажиКомпанииОбороты.Регистратор КАК ДокументПродажи,
|	ПродажиКомпанииОбороты.Номенклатура
|ИЗ
|	РегистрНакопления.ПродажиКомпании.Обороты(&НачПериода, &КонПериода, Регистратор) КАК ПродажиКомпанииОбороты 
|УПОРЯДОЧИТЬ ПО 
|	ДокументПродажи"";

// Ассоциации ищем подокументно, это определяется поведением
// объекта «АнализДанных» «по умолчанию» при выборе
// периодичности виртуальной таблицы Регистратор
Запрос.УстановитьПараметр(""НачПериода"", НачПериода);
Запрос.УстановитьПараметр(""КонПериода"", КонПериода);

Анализ.ИсточникДанных = Запрос.Выполнить();
РезультатАнализа = Анализ.Выполнить();

// Исходя из полученного анализа создать прогноз.
МодельПрогноза = РезультатАнализа.СоздатьМодельПрогноза();

// ТЗ- таблица значений, содержащая данные о том, 
// какие номенклатурные позиции вошли в ""текущую"" покупку.
МодельПрогноза.ИсточникДанных = ТЗ;

// ТП – элемент управления ""Табличное поле"" связанный через
// свойство ""Данные"" с реквизитом формы ""ТП"" (тип ТаблицаЗначений)
ТП = МодельПрогноза.Выполнить();
ЭлементыФормы.ТП.СоздатьКолонки();"}
},
{0,
{"6.45. Поиск последовательностей",0,0,"6.45","ТабДок = Новый ТабличныйДокумент;

Анализ = Новый АнализДанных;

// Нужно спрогнозировать цепочку событий, поэтому выбираем 
// тип анализа «Поиск последовательностей».
Анализ.ТипАнализа = Тип(""АнализДанныхПоискПоследовательностей"");

Запрос = Новый Запрос;
Запрос.Текст = ""ВЫБРАТЬ
|	ПродажиКомпанииОбороты.ДоговорВзаиморасчетовПокупателя.Владелец	КАК Контрагент,
|	ПродажиКомпанииОбороты.Номенклатура,
|	ПродажиКомпанииОбороты.Период
|ИЗ
|	РегистрНакопления.ПродажиКомпании.Обороты(&НачПериода, &КонПериода, Регистратор) КАК ПродажиКомпанииОбороты"";

Запрос.УстановитьПараметр(""НачПериода"", НачПериода);	 
Запрос.УстановитьПараметр(""КонПериода"", КонПериода);

Анализ.ИсточникДанных = Запрос.Выполнить();

Колонка = Анализ.НастройкаКолонок.Найти(""Период"");

// Указать, что колонка «Период» имеет тип «Время»,
// что «позволит понять» хронологию событий
Колонка.ТипКолонки = ТипКолонкиАнализаДанныхПоискПоследовательностей.Время;

РезультатАнализа = Анализ.Выполнить();

МодельПрогноза = РезультатАнализа.СоздатьМодельПрогноза();

// ТЗ- таблица значений, содержащая исходные данные для прогноза
// например, какой контрагент, какой товар закупил (исходя из чего
// попытаемся узнать, что они еще закупят).
МодельПрогноза.ИсточникДанных = ТЗ;

// ТП – элемент управления «Табличное поле» связанный через
// свойство «Данные» с реквизитом формы «ТП» 
//(тип ТаблицаЗначений)
ТП = МодельПрогноза.Выполнить();
ЭлементыФормы.ТП.СоздатьКолонки();

// Построитель – реквизит формы, имеющий тип 
// ПостроительОтчетаАнализаДанных. Ряд табличных полей
// в диалоге могут быть связаны со свойствами-коллекциями 
// данного объекта
Построитель.ТипАнализа = Тип(""АнализДанныхПоискПоследовательностей"");

Построитель.Вывести(РезультатАнализа, ТабДок);
ТабДок.Показать();"}
}
},
{39,
{"Представление результатов отчетов",1,0,"",""},
{0,
{"7.1. Вывод результата запроса в табличный документ",0,0,"7.1","Запрос = Новый Запрос;

Запрос.Текст = 
""ВЫБРАТЬ
|	ОстаткиТоваровКомпанииОстатки.СкладКомпании КАК СкладКомпанииСсылка,
|	ОстаткиТоваровКомпанииОстатки.Номенклатура КАК НоменклатураСсылка,
|	СУММА(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток) КАК Остаток,
|	ОстаткиТоваровКомпанииОстатки.Номенклатура.Представление КАК Номенклатура,
|	ОстаткиТоваровКомпанииОстатки.СкладКомпании.Представление КАК Склад
|ИЗ
|	РегистрНакопления.ОстаткиТоваровКомпании.Остатки(&Момент) КАК ОстаткиТоваровКомпанииОстатки
|СГРУППИРОВАТЬ ПО
|	ОстаткиТоваровКомпанииОстатки.СкладКомпанииСсылка,
|	ОстаткиТоваровКомпанииОстатки.НоменклатураСсылка
|ИТОГИ СУММА(Остаток) ПО Общие,
|	Склад"";
			 
Запрос.УстановитьПараметр(""Момент"", Неопределено);

Результат = Запрос.Выполнить();

// Получить поле табличного документа, в которое будем выводить результат
ТабДок = ЭлементыФормы.ПолеТабличногоДокумента;

// Очистить данные в табличном документе (возможно данные уже выводились ранее)
ТабДок.Очистить();

Макет = ПолучитьМакет(""Макет"");

// Получить именованные области из макета.
ОбластьОбщийИтог 	= Макет.ПолучитьОбласть(""ОбщийИтог"");
ОбластьСклад 		= Макет.ПолучитьОбласть(""Склад"");
ОбластьНоменклатура = Макет.ПолучитьОбласть(""Номенклатура"");

// Получить выборку по первой итоговой группировке (первый уровень).
ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

// Запись общего итога всегда одна, поэтому можно обойтись без организации цикла.
ВыборкаОбщийИтог.Следующий();

// Произвести запись данных из полей выборки в именованные
// области с совпадающими именами.
ОбластьОбщийИтог.Параметры.Заполнить(ВыборкаОбщийИтог);

// Включить область с заполненными параметрами в табличный документ.
ТабДок.Вывести(ОбластьОбщийИтог);

// ""От"" записи первого уровня получить подчиненную выборку 
// записей второго уровня (по итоговой группировке ""Склад"").
ВыборкаПоСкладу = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

Пока ВыборкаПоСкладу.Следующий() Цикл
	ОбластьСклад.Параметры.Заполнить(ВыборкаПоСкладу);
	ТабДок.Вывести(ОбластьСклад);
	
	// Получить подчиненную выборку, содержащую детальные записи.
	ВыборкаПоНоменклатуре = ВыборкаПоСкладу.Выбрать();

	Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		ОбластьНоменклатура.Параметры.Заполнить(ВыборкаПоНоменклатуре);	
		
		ТабДок.Вывести(ОбластьНоменклатура);
		
	КонецЦикла;	
	
КонецЦикла;	"}
},
{0,
{"7.2. Организация группировок",0,0,"7.2","// Перед выводом данных в табличный документ используется метод:
ТабДок.НачатьАвтогруппировкуСтрок();

//	...

// Выести область с указанием уровня.
ТабДок.Вывести(ОбластьОбщийИтог, ВыборкаОбщийИтог.Уровень());

//	...

// В конце работы с табличным документом необходимо выполнить
// следующий метод:
ТабДок.ЗакончитьАвтогруппировкуСтрок();"}
},
{0,
{"7.3. Свертывание группировок",0,0,"7.3","УровеньГруппировки = 1; //содержит индекс, с нуля
ТабДок.ЗакончитьАвтогруппировкуСтрок();
ТабДок.ПоказатьУровеньГруппировокСтрок(УровеньГруппировки);"}
},
{0,
{"7.4. Свертывание группировок",0,0,"7.4","ТабДок.Вывести(ОбластьНоменклатура, ВыборкаПоНоменклатуре.Уровень(), , Ложь);"}
},
{0,
{"7.5. Вывод иерархического результата запроса",0,0,"7.5","Запрос = Новый Запрос;

Запрос.Текст = 
""ВЫБРАТЬ
|	ПродажиКомпанииОбороты.Номенклатура КАК Номенклатура,
|	ПродажиКомпанииОбороты.КоличествоОборот КАК КоличествоОборот
|ИЗ
|	РегистрНакопления.ПродажиКомпании.Обороты(&НачПериода, &КонПериода, , ) КАК ПродажиКомпанииОбороты
|ИТОГИ СУММА(КоличествоОборот) ПО
|	Номенклатура ИЕРАРХИЯ"";	

Запрос.УстановитьПараметр(""НачПериода"", НачПериода);
Запрос.УстановитьПараметр(""КонПериода"", КонПериода);

Результат = Запрос.Выполнить();

ЭлементыФормы.ТП.Значение = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);

// Осуществить выгрузку с сохранением иерархии.
ЭлементыФормы.ТП.СоздатьКолонки();"}
},
{0,
{"7.6. Стандартный макет",0,0,"7.6","ПостроительОтчета.Макет = Неопределено;
ПостроительОтчета.Макет.Показать()"}
},
{0,
{"7.7. Вывод данных в сводную таблицу",0,0,"7.7","ЭлементыФормы.ДокументРезультат.ВстроенныеТаблицы.СводнаяТаблица.ИсточникДанных = ПостроительОтчетаОтчет;
ЭлементыФормы.ДокументРезультат.ВстроенныеТаблицы.СводнаяТаблица.ОтображатьПоля = Истина;"}
},
{0,
{"7.8. Отчет по кандидатам",0,0,"7.8","Процедура АлфавитныйПереченьКандидатовСРасшифровкой()

	ПостроительОтчета = Новый ПостроительОтчета;
	
	ПостроительОтчета.Текст = 
	""ВЫБРАТЬ
	|	РегистрацияСобеседованияКандидата.ФизЛицо КАК Кандидат,
	|	РегистрацияСобеседованияКандидата.РезультатСобеседования КАК Результат,
	|	РегистрацияСобеседованияКандидата.Ссылка
	|ИЗ
	|	Документ.РегистрацияСобеседованияКандидата КАК РегистрацияСобеседованияКандидата
	|УПОРЯДОЧИТЬ ПО
	|	РегистрацияСобеседованияКандидата.ФизЛицо.Наименование"";
							 
	ПостроительОтчета.Выполнить();
	
	Макет = ПостроительОтчета.Макет;

	// Очистить области, связанные с ссылкой.
	ТекущаяОбласть = Неопределено;

	Пока Истина Цикл
		ТекущаяОбласть = Макет.НайтиТекст(""Ссылка"", ТекущаяОбласть, Макет.Область());
		
		Если ТекущаяОбласть = Неопределено Тогда
			
			Прервать;
			
		Иначе
			ТекущаяОбласть.Очистить(Истина, Истина, Истина);
			
		КонецЕсли;
		
	КонецЦикла;	
		
	// Заполнить параметр расшифровки для областей, где параметр = ""Результат"".
	ТекущаяОбласть = Неопределено;

	Пока Истина Цикл
		ТекущаяОбласть = Макет.НайтиТекст(""Результат"", ТекущаяОбласть, Макет.Область());
		
		Если ТекущаяОбласть = Неопределено Тогда
			
			Прервать;
			
		Иначе
			
			Если ТекущаяОбласть.Параметр = ""Результат"" Тогда
				ТекущаяОбласть.ПараметрРасшифровки = ""Ссылка"";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	

	ПостроительОтчета.Макет = Макет;
	ПостроительОтчета.Вывести();
		
КонецПроцедуры"}
},
{0,
{"7.9. Сохранение настроек",0,0,"7.9","СохранитьЗначение(""НастройкаПостроителяДляОтчетаПродажи"" + Метаданные().Имя, ПостроительОтчета.ПолучитьНастройки());
"}
},
{0,
{"7.10. Восстановление настроек",0,0,"7.10","// До установки настроек они ранее должны были быть заполнены 
// по тексту запроса.
ПостроительОтчета.ЗаполнитьНастройки();

// Установить настройки построителя отчета.
Настройка = ВосстановитьЗначение(""НастройкаПостроителяДляОтчетаПродажи"" + Метаданные().Имя);

Если Настройка <> Неопределено Тогда
	ПостроительОтчета.УстановитьНастройки(Настройка);
	
КонецЕсли;"}
},
{0,
{"7.11. Формирование табличного документа",0,0,"7.11","Процедура Отчет(ДатаНач, ДатаКон) Экспорт
	
	Запрос = Новый Запрос;
					
	// Сбор данных.
	Запрос.Текст = 
	""ВЫБРАТЬ
	|	Событие.Ответственный КАК Ответственный,
	|	Событие.Дата,
	|	Событие.ВидСобытия,
	|	Событие.Контрагент,
	|	Событие.СодержаниеСобытия,
	|	Событие.ОписаниеСобытия
	|ИЗ
	|	Документ.Событие КАК Событие
	|
	|ГДЕ
	|	Событие.Дата МЕЖДУ &ДатаНач И &ДатаКон И (Событие.Проведен) И Событие.СостояниеСобытия = &Завершено
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ответственный"";

	Запрос.УстановитьПараметр(""ДатаКон""	 , ДатаКон);
	Запрос.УстановитьПараметр(""ДатаНач""	 , ДатаНач);
	Запрос.УстановитьПараметр(""Завершено"", Перечисления.СостоянияСобытий.Завершено);

	Результат = Запрос.Выполнить();

	// Сформировать табличный документ.
	Макет = ПолучитьМакет(""Отчет"");
	
	ОбластьЗаголовок 		= Макет.ПолучитьОбласть(""Заголовок"");
	ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть(""ШапкаТаблицы"");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть(""Детали"");

	ТабДок = Новый ТабличныйДокумент;
	
	ОбластьЗаголовок.Параметры.ДатаНач = ДатаНач;
	ОбластьЗаголовок.Параметры.ДатаКон = ДатаКон;

	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	
	ВыборкаДетали = Результат.Выбрать();

	Пока ВыборкаДетали.Следующий() Цикл
		ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетали);
		ОбластьДетальныхЗаписей.Область(""Описание"").Примечание.Текст = ВыборкаДетали.СодержаниеСобытия;
		
		ТабДок.Вывести(ОбластьДетальныхЗаписей);
		
	КонецЦикла;

	ТабДок.Показать();

КонецПроцедуры"}
},
{0,
{"7.12. Установка области печати",0,0,"7.12","ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(2, 2, ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы);
"}
},
{0,
{"7.13. Фиксация строк",0,0,"7.13","ДокументРезультат.ФиксацияСверху = ПостроительОтчета.Макет.Области.ШапкаТаблицы.Низ;"}
},
{0,
{"7.14. Вывод шапки на каждой странице",0,0,"7.14","ОбластьШапки = ПостроительОтчета.Макет.Области.ШапкаТаблицы;
ДокументРезультат.ПовторятьПриПечатиСтроки = ДокументРезультат.Область(ОбластьШапки.Верх, , ОбластьШапки.Низ);
"}
},
{0,
{"7.15. Название листинга",0,0,"7.15","ТабДокумент.ВерхнийКолонтитул.Выводить 			= Истина;
ТабДокумент.ВерхнийКолонтитул.НачальнаяСтраница = 2;
ТабДокумент.ВерхнийКолонтитул.ТекстСлева 		= Метаданные().Представление() + "" № "" + Номер;
ТабДокумент.ВерхнийКолонтитул.ТекстСправа 		= ""[&НомерСтраницы]"";"}
},
{0,
{"7.16. Установка ориентации страницы",0,0,"7.16","ПостроительОтчета.Вывести(ДокументРезультат);
ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;"}
},
{0,
{"7.17. Редактирование областей макета",0,0,"7.17","// Получить макет построителя отчета.
Макет = ПостроительОтчета.Макет;

// Сформатировать все области, где встречается слово «Стоимость».
ТекущаяОбласть = Неопределено;

Пока Истина Цикл
	ТекущаяОбласть = Макет.НайтиТекст(""Стоимость"", ТекущаяОбласть, Макет.Область());

	Если ТекущаяОбласть = Неопределено Тогда
		
		Прервать;
		
	Иначе

		Если ТекущаяОбласть.Параметр <> """" Тогда
			ТекущаяОбласть.Формат = ""ЧДЦ=0"";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецЦикла;	

// Сформатировать все области, где встречается слово «Количество».
ТекущаяОбласть = Неопределено;

Пока Истина Цикл
	ТекущаяОбласть = Макет.НайтиТекст(""Количество"", ТекущаяОбласть, Макет.Область());

	Если ТекущаяОбласть = Неопределено Тогда
		
		Прервать;
		
	Иначе

		Если ТекущаяОбласть.Параметр <> """" Тогда
			ТекущаяОбласть.Формат = ""ЧДЦ=0"";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецЦикла;	

// Назначить построителю измененный макет.
ПостроительОтчета.Макет = Макет;

// Вывести результат работы построителя отчета в табличный документ.
// ..."}
},
{0,
{"7.18. Использование стандартных макетов оформления",0,0,"7.18","ПостроительОтчета.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Апельсин);

ПостроительОтчета.Макет = ПолучитьМакет(«МакетЭтогоОтчета»);

ПостроительОтчета.ОформитьМакет();"}
},
{0,
{"7.19. Обход итоговых записей",0,0,"7.19","ТабДок = ЭлементыФормы.ПолеТабличногоДокумента;
ТабДок.Очистить();

Макет = ПолучитьМакет(""Отчет"");

Запрос = Новый Запрос;

Запрос.Текст = 
""ВЫБРАТЬ
|	ПродажиКомпанииОбороты.Номенклатура КАК Номенклатура,
|	ПродажиКомпанииОбороты.Номенклатура.Представление,
|	ПродажиКомпанииОбороты.КоличествоОборот КАК КоличествоОборот,
|	ПродажиКомпанииОбороты.СуммаПродажиОборот КАК СуммаПродажиОборот
|ИЗ
|	РегистрНакопления.ПродажиКомпании.Обороты(&НачПериода,&КонПериода) КАК ПродажиКомпанииОбороты
|
|ИТОГИ СУММА(КоличествоОборот), СУММА(СуммаПродажиОборот) ПО
|	ОБЩИЕ,
|	Номенклатура Иерархия"";

Запрос.УстановитьПараметр(""&НачПериода"", НачПериода);
Запрос.УстановитьПараметр(""&КонПериода"", КонецДня(КонПериода));

Результат = Запрос.Выполнить();

ОбластьЗаголовок 		= Макет.ПолучитьОбласть(""Заголовок"");
ОбластьПодвал 			= Макет.ПолучитьОбласть(""Подвал"");
ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть(""ШапкаТаблицы"");
ОбластьПодвалТаблицы 	= Макет.ПолучитьОбласть(""ПодвалТаблицы"");
ОбластьОбщийИтог 		= Макет.ПолучитьОбласть(""ОбщиеИтоги"");
ОбластьНоменклатура 	= Макет.ПолучитьОбласть(""Номенклатура"");
ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть(""Детали"");

ТабДок.Вывести(ОбластьЗаголовок);
ТабДок.Вывести(ОбластьШапкаТаблицы);

// Обход по определенным в запросе итоговым группировкам.
ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
 
// Запись общих итогов одна, поэтому нет необходимости в цикле.
ВыборкаОбщийИтог.Следующий();		
ОбластьОбщийИтог.Параметры.Заполнить(ВыборкаОбщийИтог);
ТабДок.Вывести(ОбластьОбщийИтог);

// Получить подчиненную выборку по итоговой группировке «номенклатура».
ВыборкаНоменклатура = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

Пока ВыборкаНоменклатура.Следующий() Цикл
	ОбластьНоменклатура.Параметры.Заполнить(ВыборкаНоменклатура);
	ТабДок.Вывести(ОбластьНоменклатура);

	// Несмотря на то, что можем получить еще одну подчиненную 
	// выборку (по детальным записям) мы это не делаем, т.е. фактически
	// при обходе пропускаем детальные записи.

КонецЦикла;

ТабДок.Вывести(ОбластьПодвалТаблицы);
ТабДок.Вывести(ОбластьПодвал);"}
},
{0,
{"7.20. Обход иерархических итоговых записей",0,0,"7.20","ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
ВыборкаОбщийИтог.Следующий();		
ОбластьОбщийИтог.Параметры.Заполнить(ВыборкаОбщийИтог);
ТабДок.Вывести(ОбластьОбщийИтог);

ВыборкаНоменклатура = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

Пока ВыборкаНоменклатура.Следующий() Цикл
	ОбластьНоменклатура.Параметры.Заполнить(ВыборкаНоменклатура);
	
	ТабДок.Вывести(ОбластьНоменклатура);
	
КонецЦикла;"}
},
{0,
{"7.21. Вывод картинки",0,0,"7.21","ТабДок = Новый ТабличныйДокумент;
Макет = ОбработкаОбъект.ПолучитьМакет(""Макет"");
ОбластьКартинки = Макет.ПолучитьОбласть(""ОбластьСКартинкой"");
Картинка = Новый Картинка(ПутьККартинке);

// Элемент управления ""Логотип"" входит в коллекцию картинок области.
ОбластьКартинки.Рисунки.Логотип.Картинка = Картинка;

ТабДок.Вывести(ОбластьКартинки);
ТабДок.Показать();"}
},
{0,
{"7.22. Название листинга",0,0,"7.22","Область = Макет.ПолучитьОбласть(""Шапка"");

Рисунок = Область.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);

Рисунок.Верх		   = 5;
Рисунок.Высота 		   = 10;
Рисунок.Ширина		   = 10;
Рисунок.Лево		   = 5;
Рисунок.Картинка 	   = Новый Картинка(ПутьККартинке);
Рисунок.РазмерКартинки = РазмерКартинки.РеальныйРазмер;

ТабДок.Вывести(Область);"}
},
{0,
{"7.23. Обработчик нажатия кнопки Выполнить",0,0,"7.23","Запрос = Новый Запрос;

Запрос.Текст = 
""ВЫБРАТЬ
|	ПродажиКомпанииОбороты.ДоговорВзаиморасчетовПокупателя.Владелец КАК ДоговорВзаиморасчетовПокупателяВладелец,
|	ПродажиКомпанииОбороты.Номенклатура КАК Номенклатура,
|	ПродажиКомпанииОбороты.ПодразделениеКомпании КАК ПодразделениеКомпании,
|	СУММА(ПродажиКомпанииОбороты.КоличествоОборот) КАК КоличествоОборот,
|	СУММА(ПродажиКомпанииОбороты.СуммаПродажиОборот) КАК СуммаПродажиОборот
|ИЗ
|	РегистрНакопления.ПродажиКомпании.Обороты(&НачПериода,&КонПериода) КАК ПродажиКомпанииОбороты
|
|СГРУППИРОВАТЬ ПО
|	ПродажиКомпанииОбороты.ДоговорВзаиморасчетовПокупателя.Владелец,
|	ПродажиКомпанииОбороты.Номенклатура,
|	ПродажиКомпанииОбороты.ПодразделениеКомпании
|
|ИТОГИ СУММА(КоличествоОборот), СУММА(СуммаПродажиОборот) ПО
|	ДоговорВзаиморасчетовПокупателяВладелец,
|	Номенклатура,
|	ПодразделениеКомпании"";

// На состав полей, которые могут быть размещены в измерениях,
// данных сводной таблицы влияет раздел «Итоги».
 
Запрос.УстановитьПараметр(""НачПериода"", НачПериода);
Запрос.УстановитьПараметр(""КонПериода"", КонПериода);
 
Результат = Запрос.Выполнить();

Сводная = ЭлементыФормы.ПолеДокумента.ВстроенныеТаблицы.СводнаяТаблица1;
Сводная.ИсточникДанных = Результат;"}
},
{0,
{"7.24. Вывод данных в сводную таблицу",0,0,"7.24","Построитель = Новый ПостроительОтчета();

Построитель.Текст = 
""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоПриход) КАК КоличествоПриход,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоОборот) КАК КоличествоОборот,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоРасход) КАК КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты КАК ТоварыНаСкладахОстаткиИОбороты
|СГРУППИРОВАТЬ ПО
|	ТоварыНаСкладахОстаткиИОбороты.Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление
|
|ИТОГИ СУММА(КоличествоПриход), СУММА(КоличествоОборот), СУММА(КоличествоРасход) ПО
|	ОБЩИЕ,
|	Номенклатура ИЕРАРХИЯ,
|	Склад ИЕРАРХИЯ "";
	
Построитель.ЗаполнитьНастройки();
	
Таблица = ЭлементыФормы.ПолеТабличногоДокумента1.ВстроенныеТаблицы.СводнаяТаблица1;
Таблица.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Лед);

Таблица.ИсточникДанных = Построитель;

Таблица.Строки.Добавить(""Номенклатура"");
Таблица.Колонки.Добавить(""Склад"");
Таблица.Данные.Добавить(""КоличествоПриход"");
Таблица.ОтображатьЛинии = ТипОтображенияЛинийСводнойТаблицы.Всегда;"}
},
{0,
{"7.25. Формирование текстового документа",0,0,"7.25","// Создать текстовый документ, в который будет выполняться вывод.
ТекстДок = Новый ТекстовыйДокумент;
	
// Получить макет. 
Макет = ПолучитьМакет(""ЗаявкаНаПропуск"");
	
// Заголовок.
Область = Макет.ПолучитьОбласть(""Заголовок"");

Область.Параметры.Дата 		 = Дата;
Область.Параметры.ВремяНач 	 = НачалоСобытия;
Область.Параметры.ВремяОконч = ОкончаниеСобытия;

ТекстДок.Вывести(Область);
	 		
// Состав.
Область = Макет.ПолучитьОбласть(""Состав"");

Для Каждого ТекСтрокаСторонниеЛица Из СторонниеЛица Цикл
	Область.Параметры.ФИО = Строка(ТекСтрокаСторонниеЛица.Лицо);
	
	ТекстДок.Вывести(Область);
	
КонецЦикла;
	
// Подвал.
Область = Макет.ПолучитьОбласть(""Подвал"");
Область.Параметры.Ответственный = Ответственный.Наименование;

ТекстДок.Вывести(Область);

// Открыть сформированный документ.
ТекстДок.Показать(""Заявка на пропуска для События №"" + Номер);"}
},
{0,
{"7.26. Заполнение диаграммы",0,0,"7.26","Диаграмма = ЭлементыФормы.Диаграмма;

// Очистить диаграмму, возможно ранее в нее уже выводились данные.
Диаграмма.КоличествоСерий = 0;
Диаграмма.КоличествоТочек = 0;

// Количество серий будет ограничиваться (не все значения будут показываться).
Диаграмма.МаксимумСерий 		  = МаксимумСерий.Ограничено;
Диаграмма.МаксимумСерийКоличество = 7;

Диаграмма.ВидПодписей = ВидПодписейКДиаграмме.Процент;
Диаграмма.ОбластьЗаголовка.Текст = ""Обороты номенклатуры"";

Запрос = Новый Запрос;
Запрос.Текст = ""ВЫБРАТЬ
|	ПродажиКомпанииОбороты.Номенклатура,
|	СУММА(ПродажиКомпанииОбороты.КоличествоОборот) КАК КоличествоОборот
|ИЗ
|	РегистрНакопления.Продажи.Обороты(, , , ) КАК ПродажиКомпанииОбороты
|
|СГРУППИРОВАТЬ ПО
|	ПродажиКомпанииОбороты.Номенклатура"";

Результат = Запрос.Выполнить();

// Запретить обновление диаграммы на время вывода данных.
Диаграмма.Обновление = Ложь;

// Установить единственную точку.
Диаграмма.КоличествоТочек = 1;
Диаграмма.Точки[0].Текст = ""Количество"";

Выборка = Результат.Выбрать();

Пока Выборка.Следующий() Цикл

	// Количество серий, если бы не ограничивали зависело бы от результата запроса.
	КоличествоСерий = Диаграмма.Серии.Количество();
	Диаграмма.КоличествоСерий = КоличествоСерий + 1;
	Диаграмма.Серии[КоличествоСерий].Текст = Выборка.Номенклатура;

	// Установить значение «на пересечении» точки и серии.
	// Первый параметр – 0 , так как в диаграмме только одна точка.
	Диаграмма.УстановитьЗначение(0, КоличествоСерий, Выборка.КоличествоОборот);

КонецЦикла;	

// Обновить диаграмму.
Диаграмма.Обновление = Истина;	"}
},
{0,
{"7.27. Заполнение измерительной диаграммы",0,0,"7.27","// Настроить свойства диаграммы.
Диаграмма = ЭлементыФормы.ДиаграммаПродажи;

Диаграмма.ТипДиаграммы 			   = ТипДиаграммы.Измерительная;
Диаграмма.АвтоМаксимальноеЗначение = Ложь;
Диаграмма.МаксимальноеЗначение 	   = 20000;
Диаграмма.АвтоМинимальноеЗначение  = Ложь;
Диаграмма.МинимальноеЗначение 	   = 0;

// Создать три полосы.
Полосы = Диаграмма.ПолосыИзмерительнойДиаграммы;

НоваяПолоса = Полосы.Добавить();

НоваяПолоса.Начало 	 = 0;
НоваяПолоса.Конец 	 = 1000;
НоваяПолоса.ЦветФона = WebЦвета.Красный;

НоваяПолоса = Полосы.Добавить();

НоваяПолоса.Начало 	 = 1000;
НоваяПолоса.Конец 	 = 5000;
НоваяПолоса.ЦветФона = WebЦвета.Желтый;

НоваяПолоса = Полосы.Добавить();

НоваяПолоса.Начало 	 = 5000;
НоваяПолоса.Конец 	 = 20000;
НоваяПолоса.ЦветФона = WebЦвета.Зеленый;
	
Запрос = Новый Запрос(""
|ВЫБРАТЬ
|	ПродажиОбороты.Период,
|	ПродажиОбороты.СтоимостьОборот
|ИЗ
|	РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, День, ) КАК ПродажиОбороты
|"");

Запрос.УстановитьПараметр(""ДатаНачала""	 , '2004.08.10 00:00:00');
Запрос.УстановитьПараметр(""ДатаОкончания"", '2004.08.30 23:59:59');

ЭлементыФормы.ДиаграммаПродажи.ИсточникДанных = Запрос.Выполнить().Выгрузить();"}
},
{0,
{"7.28. Вывод в сводную диаграмму",0,0,"7.28","Запрос = Новый Запрос( 
""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоПриход) КАК КоличествоПриход,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоОборот) КАК КоличествоОборот,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоРасход) КАК КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты КАК ТоварыНаСкладахОстаткиИОбороты
|СГРУППИРОВАТЬ ПО
|	ТоварыНаСкладахОстаткиИОбороты.Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление
|
|ИТОГИ СУММА(КоличествоПриход), СУММА(КоличествоОборот), СУММА(КоличествоРасход) ПО
|	ОБЩИЕ,
|	Номенклатура ИЕРАРХИЯ,
|	Склад ИЕРАРХИЯ"");
	
Диаграмма = ЭлементыФормы.СводнаяДиаграмма1;
Диаграмма.ОбластьЗаголовка.Текст = ""Приход товаров"";

Диаграмма.ИсточникДанных = Запрос.Выполнить();
Диаграмма.Серии.Добавить(""Номенклатура"");
Диаграмма.Точки.Добавить(""Склад"");
Диаграмма.Ресурсы.Добавить(""КоличествоПриход"");"}
},
{0,
{"7.29. Заполнение диаграммы Ганта",0,0,"7.29","ДГ = ЭлементыФормы.ДГ;

// Установить заголовок диаграммы.
ДГ.ОбластьЗаголовка.Текст = ""График дежурств"";

// Интервал будем определять самостоятельно.
ДГ.АвтоОпределениеПолногоИнтервала = Ложь;

// Установить интервал.
ДГ.УстановитьПолныйИнтервал(НачалоМесяца(ТекущаяДата()), КонецМесяца(ТекущаяДата()));

// В диаграмме будет две точки - сотрудники Петров и Сидоров...
ТочкаП = ДГ.УстановитьТочку(""Петров"");
ТочкаС = ДГ.УстановитьТочку(""Сидоров"");

// и две серии - дежурство на вахте и дежурство в центральном офисе.	
СерияНаВахте = ДГ.УстановитьСерию(""На вахте"");
СерияВЦентре = ДГ.УстановитьСерию(""В центральном офисе"");

// Задать цвета серий, отличные от цвета по умолчанию.
СерияНаВахте.Цвет = WebЦвета.Синий;
СерияВЦентре.Цвет = WebЦвета.СветлоЖелтый;

ПервыйДень = НачалоМесяца(ТекущаяДата());

// Получить значение диаграммы - дежурство Петрова на вахте.
Значение = ДГ.ПолучитьЗначение(ТочкаП, СерияНаВахте);

// В значении определить новый интервал.
Интервал = Значение.Добавить();

Интервал.Текст = ""Работает на вахте"";

// Определить границы интервала.
Интервал.Начало = ПервыйДень;
Интервал.Конец 	= ПервыйДень + 10 * 24 * 60 * 60;

// Получить значение диаграммы - дежурство Петрова в центральном офисе.
Значение = ДГ.ПолучитьЗначение(ТочкаП, СерияВЦентре);
Интервал = Значение.Добавить();

Интервал.Текст 	= ""Работает в центральном офисе"";
Интервал.Начало = ПервыйДень + 14 * 24 * 60 * 60;
Интервал.Конец 	= ПервыйДень + 24 * 24 * 60 * 60;

// Получить значение диаграммы - дежурство Сидорова на вахте.
Значение = ДГ.ПолучитьЗначение(ТочкаС, СерияНаВахте);
Интервал = Значение.Добавить();

Интервал.Текст 	= ""Работает на вахте"";
Интервал.Начало = ПервыйДень + 5 * 24 * 60 * 60;
Интервал.Конец 	= ПервыйДень + 15 * 24 * 60 * 60;
	
// Получить значение диаграммы - дежурство Сидорова в центральном офисе.
Значение = ДГ.ПолучитьЗначение(ТочкаС, СерияВЦентре);
Интервал = Значение.Добавить();

Интервал.Текст 	= ""Работает в центральном офисе"";
Интервал.Начало = ПервыйДень + 21 * 24 * 60 * 60;
Интервал.Конец 	= ПервыйДень + 25 * 24 * 60 * 60;"}
},
{0,
{"7.30. Связь интервалов диаграммы Ганта",0,0,"7.30","// Получить значение диаграммы - дежурство Петрова на вахте.
Значение = ДГ.ПолучитьЗначение(ТочкаП, СерияНаВахте);

// В значении определить новый интервал.
Интервал = Значение.Добавить();

// Запомнить интервал начала связи.
СвязьИнтервалНачало = Интервал;

//	...
// Получить значение диаграммы - дежурство Петрова в центральном офисе.
Значение = ДГ.ПолучитьЗначение(ТочкаП, СерияВЦентре);
Интервал = Значение.Добавить();

// Запомнить интервал окончания связи.
СвязьИнтервалКонец = Интервал;

//	...
// Связать два интервала.
Связь = СвязьИнтервалНачало.Добавить(СвязьИнтервалКонец);
Связь.Цвет = WebЦвета.Синий; 

// Получить значение диаграммы - дежурство Сидорова на вахте.
Значение = ДГ.ПолучитьЗначение(ТочкаС, СерияНаВахте);
Интервал = Значение.Добавить();
СвязьИнтервалНачало = Интервал;

//	...
// Получить значение диаграммы - дежурство Сидорова в центральном офисе.
Значение = ДГ.ПолучитьЗначение(ТочкаС, СерияВЦентре);
Интервал = Значение.Добавить();
СвязьИнтервалКонец = Интервал;

//	...
// Связать два интервала.
Связь = СвязьИнтервалНачало.Добавить(СвязьИнтервалКонец);
Связь.Цвет = WebЦвета.Синий; "}
},
{0,
{"7.31. Заполнение диаграммы Ганта данными",0,0,"7.31","// Получить значение диаграммы - дежурство Петрова на вахте.
Значение = ДГ.ПолучитьЗначение(ТочкаП, СерияНаВахте);

// Разрешить интерактивное редактирование интервалов.
Значение.Редактирование = Истина;

//	...
// Получить значение диаграммы - дежурство Петрова в центральном офисе.
Значение = ДГ.ПолучитьЗначение(ТочкаП, СерияВЦентре);
Значение.Редактирование = Истина;

//	...
// Получить значение диаграммы - дежурство Сидорова на вахте.
Значение = ДГ.ПолучитьЗначение(ТочкаС, СерияНаВахте);
Значение.Редактирование = Истина;

//	...
// Получить значение диаграммы - дежурство Сидорова в центральном офисе.
Значение = ДГ.ПолучитьЗначение(ТочкаС, СерияВЦентре);
Значение.Редактирование = Истина;"}
},
{0,
{"7.32. Обработчик события При окончании редактирования интервала",0,0,"7.32","Процедура ДГПриОкончанииРедактированияИнтервала(Элемент, Интервал, Отмена)

	// Сгладить погрешности интерактивного перетаскивания -
	// округлить интервал по границе дня.
	Интервал.Начало = Интервал.Начало + 3600 * 12;
	Интервал.Начало = НачалоДня(Интервал.Начало);
	Интервал.Конец 	= Интервал.Конец + 3600 * 12;
	Интервал.Конец 	= НачалоДня(Интервал.Конец);

	// Скорректировать цвета связей.
	Для Каждого Связь Из Интервал Цикл

		Если Связь.Начало.Конец <= Связь.Конец.Начало Тогда
			Связь.Цвет = WebЦвета.Синий;

		Иначе	// есть пересечение интервалов - выделить красным
			Связь.Цвет = WebЦвета.Красный;
			
		КонецЕсли;			
		
	КонецЦикла;	

КонецПроцедуры"}
},
{0,
{"7.33. Размещение непериодических меток",0,0,"7.33","// Установить непериодические метки - контроль дежурства.

// Создать отдельный элемент шкалы времени (для более наглядного отображения)
ЭлементМеток = ДГ.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
ЭлементМеток.Единица = ТипЕдиницыШкалыВремени.День;

// Скрыть периодические метки добавленного элемента.
ЭлементМеток.ОтображатьПериодическиеМетки = Ложь;

// Установить метку - первая проверка - 10 часов утра 9 числа.
ПерваяПроверка = ПервыйДень + 8 * 24 * 60 * 60 + 10 * 60 * 60;

Метка = ЭлементМеток.Метки.Добавить(ПерваяПроверка);

Метка.Текст 	 = ""Проверка"";
Метка.ЦветТекста = WebЦвета.Красный;				
Метка.ЦветЛинии  = Метка.ЦветТекста;

// Установить метку - вторая проверка - 8 часов вечера 23 числа.
ВтораяПроверка = ПервыйДень + 22 * 24 * 60 * 60 + 20 * 60 * 60;

Метка = ЭлементМеток.Метки.Добавить(ВтораяПроверка);

Метка.Текст 	 = ""Проверка"";
Метка.ЦветТекста = WebЦвета.Красный;				
Метка.ЦветЛинии  = Метка.ЦветТекста;"}
},
{0,
{"7.34. Выделение интервалов фона",0,0,"7.34","// Выделить выходные дни другим цветом фона.
Неделя			 = 3600 * 24 * 7;
Выходные		 = 3600 * 48;
МаксимальнаяДата = ПервыйДень + Неделя * 4;
ТекущаяДата 	 = ПервыйДень;

Пока ТекущаяДата <= МаксимальнаяДата Цикл;
	Конец  = НачалоНедели(ТекущаяДата);
	Начало = Конец - Выходные;
	
	ДГ.ИнтервалыФона.Добавить(Начало, Конец);

	ТекущаяДата = ТекущаяДата + Неделя;
	
КонецЦикла;"}
},
{0,
{"7.35. Отображение файла географической схемы",0,0,"7.35","Схема = ЭлементыФормы.ГеоСхема;
Схема.Прочитать(""D:/MyGeo.geo"");"}
},
{0,
{"7.36. Отображение макета географической схемы",0,0,"7.36","Схема = ЭлементыФормы.ГеоСхема;
Схема.Вывести(ПолучитьОбщийМакет(""ГеографическаяСхемаРоссии""));"}
},
{0,
{"7.37. Изменение масштаба",0,0,"7.37","Масштаб = 100000;

Если ВвестиЗначение(Масштаб) Тогда
	ЭлементыФормы.ГеоСхема.ПоддержкаМасштаба = РежимОтображенияГеографическойСхемы.ЗадаетсяМасштабом;
	ЭлементыФормы.ГеоСхема.Масштаб 			 = Масштаб;
	
КонецЕсли;"}
},
{0,
{"7.38. Отображение выбранного города",0,0,"7.38","Схема 		  = ЭлементыФормы.ГеоСхема;
СписокГородов = Новый СписокЗначений;
	
// Запретить перерисовку схемы на время обновления.
Схема.Обновление = Ложь;
		
// Отобразить слой Регионы. 
Схема.Слои.Регионы.Видимость = Истина;
	
// Задать тип отображения названий городов.
СлойГорода = Схема.Слои.Города;
СлойГорода.Серии.Название.ТипОтображения = ТипОтображенияСерииСлояГеографическойСхемы.Текст;
	
// Сформировать список городов и скрыть все города.
Для Счетчик = 0 По СлойГорода.Объекты.Количество() - 1 Цикл
	Город = СлойГорода.Объекты.Получить(Счетчик);
	Город.Видимость = Ложь;
	
	НазваниеГорода 	= СлойГорода.ПолучитьЗначение(Город, СлойГорода.Серии.Название);
	НазваниеРегиона = СлойГорода.ПолучитьЗначение(Город, СлойГорода.Серии.Регион);
	
	СписокГородов.Добавить(Счетчик, НазваниеГорода.Значение + "" ("" + НазваниеРегиона.Значение + "")"");
	
КонецЦикла;
	
СлойГорода.Видимость = Истина; // Отобразить слой Города.

СписокГородов.СортироватьПоПредставлению();

ВыбранныйГород = СписокГородов.ВыбратьЭлемент();

Если ВыбранныйГород <> Неопределено Тогда
	ГородСхемы = СлойГорода.Объекты.Получить(ВыбранныйГород.Значение);
	
	ГородСхемы.Видимость = Истина; // отобразить выбранный город
	
КонецЕсли;	

Схема.Обновление = Истина; // Обновить схему."}
},
{0,
{"7.39. Использование источника данных",0,0,"7.39","Схема = ЭлементыФормы.ГеоСхема;

Схема.Обновление = Ложь; // Запретить обновление схемы.

// Отобразить слои Регионы и Города.
Схема.Слои.Регионы.Видимость = Истина;
СлойГорода = Схема.Слои.Города;
СлойГорода.Видимость = Истина;

// Добавить новую серию для отображения данных источника.
СерияИнформация = Схема.Слои.Города.Серии.Добавить(""Информация"");
СерияИнформация.Значение = ""Информация"";

// СФормировать таблицу значений источника данных.
ИсточникДанныхГеоСхемы.Колонки.Добавить(""ЗначениеГорода"");
ИсточникДанныхГеоСхемы.Колонки.Добавить(""СерияИнформация"", Новый ОписаниеТипов(""Строка""));

// Добавить ""справочную"" колонку в истоник данных 
// (нужна только для ""наглядности"" работы с источником).
ИсточникДанныхГеоСхемы.Колонки.Добавить(""НазваниеГорода"");

// Заполнить в первой строке источника данных значение серии, 
// для которой будут выводиться данные.
ИсточникДанныхГеоСхемы.Добавить().СерияИнформация = ""Информация"";

// Задать тип источника данных
Схема.Слои.Города.ТипОрганизацииИсточникаДанных = ТипОрганизацииИсточникаДанныхГеографическойСхемы.НаПересечении;

// Задать тип отображения значений серии источника данных.
СлойГорода.Серии.Информация.ТипОтображения = ТипОтображенияСерииСлояГеографическойСхемы.Текст;

// Заполнить источник данных значениями всех объектов.
Для Каждого Город Из СлойГорода.Объекты Цикл
	Город.Видимость = Истина;
	СтрокаИсточникаДанных = ИсточникДанныхГеоСхемы.Добавить();
	
	СтрокаИсточникаДанных.ЗначениеГорода = Город.Значение;
	СтрокаИсточникаДанных.НазваниеГорода = СлойГорода.ПолучитьЗначение(Город, СлойГорода.Серии.Название).Значение;
	
КонецЦикла;

ЭлементыФормы.ИсточникДанныхГеоСхемы.СоздатьКолонки();

Схема.Обновление = Истина; // Обновить поле географической схемы.

// Назначить источник данных.
СлойГорода.ИсточникДанных = ИсточникДанныхГеоСхемы;"}
}
},
{49,
{"Администрирование",1,0,"",""},
{0,
{"8.1. Запуск в режиме 1С:Предприятие в файловом варианте работы",0,0,"8.1","""C:\Program Files\1cv81\bin\1cv8.exe"" ENTERPRISE /F D:\Конфигурации\Типовые\УпрТорг /N ИмяПользователя /P Пароль
"}
},
{0,
{"8.2. Запуск в режиме Конфигуратор в файловом варианте работы",0,0,"8.2","""C:\Program Files\1cv81\bin\1cv8.exe"" CONFIG /F D:\Конфигурации\Типовые\УпрТорг /N ИмяПользователя /P Пароль
"}
},
{0,
{"8.3. Запуск в режиме 1С:Предприятие в клиент-серверном варианте работы",0,0,"8.3","""C:\Program Files\1cv81\bin\1cv8.exe"" ENTERPRISE /S Сервер\База /N ИмяПользователя /P Пароль"}
},
{0,
{"8.4. Запуск в режиме 1С:Предприятие в клиент-серверном варианте работы",0,0,"8.4","""C:\Program Files\1cv81\bin\1cv8.exe"" CONFIG /F D:\Конфигурации\Типовые\УпрТорг /N ИмяПользователя /P Пароль
"}
},
{0,
{"8.5. Выгрузка базы данных",0,0,"8.5","""C:\Program Files\1cv81\bin\1cv8.exe"" CONFIG /F D:\Конфигурации\Типовые\УпрТорг /N ИмяПользователя /P Пароль /DumpIB c:\имя.dt
"}
},
{0,
{"8.6. Обновление конфигурации базы данных",0,0,"8.6","""C:\Program Files\1cv81\bin\1cv8.exe"" CONFIG /F D:\Конфигурации\Типовые\УпрТорг /N ИмяПользователя /P Пароль /UpdateDBCfg
"}
},
{0,
{"8.7. Тестирование и исправление",0,0,"8.7","""C:\Program Files\1cv81\bin\1cv8.exe"" CONFIG /F""C:\Documents and Settings\user\My Documents\1C\DemoTrd2"" /N""Федоров (администратор)"" /P"""" /IBcheckAndRepair –LogIntegrity
"}
},
{0,
{"8.8. Проверка конфигурации",0,0,"8.8","""C:\Program Files\1cv81\bin\1cv8.exe"" CONFIG /F""C:\Documents and Settings\user\My Documents\1C\DemoTrd2"" /N""Федоров (администратор)"" /P"""" /OutD:\my\log.txt /CheckConfig -ClientServer -Client -ExternalConnectionServer -ExternalConnection –Server -DistributiveModules -IncorrectReferences -ConfigLogicalIntegrity –UnreferenceProcedures -HandlersExistence –EmptyHandlers
"}
},
{0,
{"8.9. Сокращение журнала регистрации",0,0,"8.9","""C:\Program Files\1cv81\bin\1cv8.exe"" CONFIG /F""C:\Documents and Settings\user\My Documents\1C\DemoTrd2"" /N""Федоров (администратор)"" /P"""" /OutD:\my\log.txt /ReduceEventLogSize 2004-12-26 -saveAsC:\OldLog.elf -KeepSplitting 
"}
},
{0,
{"8.10. Выгрузка модулей",0,0,"8.10","""C:\Program Files\1cv81\bin\1cv8.exe"" CONFIG /F""C:\Documents and Settings\user\My Documents\1C\DemoTrd2"" /N""Федоров (администратор)"" /P"""" /DumpConfigFiles ""D:\1\11"" –Module
"}
},
{0,
{"8.11. Загрузка справки",0,0,"8.11","""C:\Program Files\1cv81\bin\1cv8.exe"" CONFIG /F""C:\Documents and Settings\user\My Documents\1C\DemoTrd2"" /N""Федоров (администратор)"" /P"""" /LoadConfigFiles ""D:\1\11"" –Help
"}
},
{0,
{"8.12. Обновление индекса полнотекстового поиска",0,0,"8.12","Процедура ПереиндексацияИндексаПолнотекстовогоПоиска() Экспорт

	ПолнотекстовыйПоиск.ОчиститьИндекс();
	ПолнотекстовыйПоиск.ОбновитьИндекс(Истина, Ложь);

КонецПроцедуры
"}
},
{0,
{"8.13. Запуск регламентного задания",0,0,"8.13","РЗ = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.ПереиндексацияИндексаППД);
РЗ.Использование = Истина;
ФормаРасписания = Новый ДиалогРасписанияРегламентногоЗадания(РЗ.Расписание); 

// Открывается диалог по установке расписания
ФормаРасписания.ОткрытьМодально();

РЗ.Расписание 	= ФормаРасписания.Расписание;
РЗ.Наименование = ""Создали программно"";

РЗ.Записать();
"}
},
{0,
{"8.14. Запуск фонового задания",0,0,"8.14","МассивПараметров = Новый Массив;
МассивПараметров.Добавить(100);
ФЗ = ФоновыеЗадания.Выполнить(""РегламентныеПроцедуры.ПроведениеДокументов"", МассивПараметров, ""1"", ""Проведение 100 документов"");
"}
},
{0,
{"8.15. Процедура фонового задания",0,0,"8.15","Процедура ПроведениеДокументов(Количество) Экспорт
	
	//	...
	
КонецПроцедуры
"}
},
{0,
{"8.16. Просмотр информации по выполненным фоновым заданиям",0,0,"8.16","Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания();
Для Каждого Задание Из Задания Цикл
		
	// Можно также просматривать активные, завершенные, отмененные 
	Если Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		Наменование 	   = Задание.Наименование;
		ИнформацияОбОшибке = Задание.ИнформацияОбОшибке;
			
		// Просмотр других свойств
			
	КонецЕсли;
	
КонецЦикла;	"}
},
{0,
{"8.17. Просмотр списка кластеров",0,0,"8.17","Соединитель = Новый COMObject(""V81.COMConnector"");
ИмяМашины = ""NoName"";

// по умолчанию
Порт = ""1540""; 
СтрокаСоединения = ""TCP://"" + ИмяМашины + "":"" + Порт;

// соединение с агентом сервера
СоединениеСАгентом = Соединитель.ConnectAgent(СтрокаСоединения);
МассивКластеров    = СоединениеСАгентом.GetClusters();
МаксимальныйИндекс = МассивКластеров.GetUpperBound();

Для ТекущийИндекс = МассивКластеров.GetLowerBound() По МаксимальныйИндекс Цикл

	ОписаниеКластера = МассивКластеров.GetValue(ТекущийИндекс);
	
	// полученная информация используется в своих целях
	Сообщить(""Кластер: "" + ОписаниеКластера.Name);
	Сообщить(ОписаниеКластера.HostName);
	Сообщить(Формат(ОписаниеКластера.MainPort, ""ЧГ=0""));
	Сообщить(ОписаниеКластера.MultiProcess);
	Сообщить(ОписаниеКластера.SecurityLevel);
	Сообщить(Формат(ОписаниеКластера.SyncPort, ""ЧГ=0""));

КонецЦикла; "}
},
{0,
{"8.18. Просмотр данных по рабочим серверам",0,0,"8.18","Соединитель = Новый COMObject(""V81.COMConnector"");

ИмяМашины 		 = ""MOBILE-ADS"";
Порт 			 = ""1540""; 
СтрокаСоединения = ""TCP://"" + ИмяМашины + "":"" + Порт;

СоединениеСАгентом = Соединитель.ConnectAgent(СтрокаСоединения);
МассивКластеров = СоединениеСАгентом.GetClusters();

// получается первый массив кластера
ОписаниеКластера = МассивКластеров.GetValue(МассивКластеров.GetLowerBound());

// в случае если определены администраторы кластера должны
// быть указаны данные о логине
СоединениеСАгентом.authenticate(ОписаниеКластера, """", """");

МассивСерверовКластера = СоединениеСАгентом.GetWorkingServers(ОписаниеКластера);
МинимальныйИндекс 	   = МассивСерверовКластера.GetLowerBound();
МаксимальныйИндекс 	   = МассивСерверовКластера.GetUpperBound();

Для ТекущийИндекс = МинимальныйИндекс По МаксимальныйИндекс Цикл
	ОписаниеСервераКластера = МассивСерверовКластера.GetValue(ТекущийИндекс);
	
	Сообщить(ОписаниеСервераКластера.Name);
	Сообщить(ОписаниеСервераКластера.HostName);
	Сообщить(Формат(ОписаниеСервераКластера.MainPort, ""ЧГ=0""));
	Сообщить(Формат(ОписаниеСервераКластера.SyncPort, ""ЧГ=0""));
	
КонецЦикла;"}
},
{0,
{"8.19. Просмотр списка информационных баз",0,0,"8/19","Соединитель = Новый COMObject(""V81.COMConnector"");

ИмяМашины 		 = ""MOBILE-ADS"";
Порт 			 = ""1540""; 
СтрокаСоединения = ""TCP://"" + ИмяМашины + "":"" + Порт;

СоединениеСАгентом = Соединитель.ConnectAgent(СтрокаСоединения);
МассивКластеров    = СоединениеСАгентом.GetClusters();

// получается первый массив кластера
ОписаниеКластера = МассивКластеров.GetValue(МассивКластеров.GetLowerBound());

// в случае если определены администраторы кластера должны
// быть указаны данные о логине
СоединениеСАгентом.authenticate(ОписаниеКластера, """", """");
	
МассивБаз 		   = СоединениеСАгентом.GetInfoBases(ОписаниеКластера);
МаксимальныйИндекс = МассивБаз.GetUpperBound();

Для ТекущийИндекс = МассивБаз.GetLowerBound() По МаксимальныйИндекс Цикл
	ОписаниеБазы = МассивБаз.GetValue(ТекущийИндекс);
	
	Сообщить(ОписаниеБазы.Descr);
	Сообщить(ОписаниеБазы.Name);
	
КонецЦикла;"}
},
{0,
{"8.20. Просмотр списка рабочих процессов",0,0,"8/20","Соединитель = Новый COMObject(""V81.COMConnector"");

ИмяМашины 		 = ""MOBILE-ADS"";
Порт 			 = ""1540""; 
СтрокаСоединения = ""TCP://"" + ИмяМашины + "":"" + Порт;

СоединениеСАгентом = Соединитель.ConnectAgent(СтрокаСоединения);
МассивКластеров    = СоединениеСАгентом.GetClusters();

// получается первый массив кластера
ОписаниеКластера = МассивКластеров.GetValue(МассивКластеров.GetLowerBound());

// в случае если определены администраторы кластера должны
// быть указаны данные о логине
СоединениеСАгентом.authenticate(ОписаниеКластера, """", """");

МассивСерверовКластера = СоединениеСАгентом.GetWorkingServers(ОписаниеКластера);

// выбирается самый первый рабочий сервер кластера
ОписаниеСервераКластера = МассивСерверовКластера.GetValue(МассивСерверовКластера.GetLowerBound());
	
МассивПроцессов    = СоединениеСАгентом.GetServerWorkingProcesses(ОписаниеКластера,ОписаниеСервераКластера);
МинимальныйИндекс  = МассивПроцессов.GetLowerBound();
МаксимальныйИндекс = МассивПроцессов.GetUpperBound();

Для ТекущийИндекс = МинимальныйИндекс По МаксимальныйИндекс Цикл
	ОписаниеПроцесса = МассивПроцессов.GetValue(ТекущийИндекс);
	
КонецЦикла;	"}
},
{0,
{"8.21. Запрет запуска рабочих процессов",0,0,"8/21","Соединитель = Новый COMObject(""V81.COMConnector"");

ИмяМашины 		 = ""MOBILE-ADS"";
Порт 			 = ""1540""; 
СтрокаСоединения = ""TCP://"" + ИмяМашины + "":"" + Порт;

СоединениеСАгентом = Соединитель.ConnectAgent(СтрокаСоединения);
МассивКластеров    = СоединениеСАгентом.GetClusters();

// получается первый массив кластера
ОписаниеКластера = МассивКластеров.GetValue(МассивКластеров.GetLowerBound());

// в случае если определены администраторы кластера должны
// быть указаны данные о логине
СоединениеСАгентом.authenticate(ОписаниеКластера, """", """");

МассивСерверовКластера = СоединениеСАгентом.GetWorkingServers(ОписаниеКластера);

// выбирается самый первый рабочий сервер кластера
ОписаниеСервераКластера = МассивСерверовКластера.GetValue(МассивСерверовКластера.GetLowerBound());
	
МассивПроцессов    = СоединениеСАгентом.GetServerWorkingProcesses(ОписаниеКластера,ОписаниеСервераКластера);
МинимальныйИндекс  = МассивПроцессов.GetLowerBound();
МаксимальныйИндекс = МассивПроцессов.GetUpperBound();

Для ТекущийИндекс = МинимальныйИндекс По МаксимальныйИндекс Цикл
	ОписаниеПроцесса = МассивПроцессов.GetValue(ТекущийИндекс);
	
	СоединениеСАгентом.StopWorkingProcess(ОписаниеКластера, ОписаниеПроцесса);
	
КонецЦикла;	"}
},
{0,
{"8.22. Запуск остановленных рабочих процессов",0,0,"8/22","Соединитель = Новый COMObject(""V81.COMConnector"");

ИмяМашины 		 = ""MOBILE-ADS"";
Порт 			 = ""1540""; 
СтрокаСоединения = ""TCP://"" + ИмяМашины + "":"" + Порт;

СоединениеСАгентом = Соединитель.ConnectAgent(СтрокаСоединения);
МассивКластеров    = СоединениеСАгентом.GetClusters();

// получается первый массив кластера
ОписаниеКластера = МассивКластеров.GetValue(МассивКластеров.GetLowerBound());

// в случае если определены администраторы кластера должны
// быть указаны данные о логине
СоединениеСАгентом.authenticate(ОписаниеКластера, """", """");

МассивСерверовКластера = СоединениеСАгентом.GetWorkingServers(ОписаниеКластера);

// выбирается самый первый рабочий сервер кластера
ОписаниеСервераКластера = МассивСерверовКластера.GetValue(МассивСерверовКластера.GetLowerBound());
	
МассивПроцессов    = СоединениеСАгентом.GetServerWorkingProcesses(ОписаниеКластера,ОписаниеСервераКластера);
МинимальныйИндекс  = МассивПроцессов.GetLowerBound();
МаксимальныйИндекс = МассивПроцессов.GetUpperBound();

Для ТекущийИндекс = МинимальныйИндекс По МаксимальныйИндекс Цикл
	ОписаниеПроцесса = МассивПроцессов.GetValue(ТекущийИндекс);
	
	СоединениеСАгентом.StartWorkingProcess(ОписаниеКластера, ОписаниеПроцесса);
	
КонецЦикла;	"}
},
{0,
{"8.23. Запуск нового рабочего процесса",0,0,"8/23","Соединитель = Новый COMObject(""V81.COMConnector"");

ИмяМашины 		 = ""MOBILE-ADS"";
Порт 			 = ""1540""; 
СтрокаСоединения = ""TCP://"" + ИмяМашины + "":"" + Порт;

СоединениеСАгентом = Соединитель.ConnectAgent(СтрокаСоединения);
МассивКластеров    = СоединениеСАгентом.GetClusters();

// получается первый массив кластера
ОписаниеКластера = МассивКластеров.GetValue(МассивКластеров.GetLowerBound());

// в случае если определены администраторы кластера должны
// быть указаны данные о логине
СоединениеСАгентом.authenticate(ОписаниеКластера, """", """");

МассивСерверовКластера = СоединениеСАгентом.GetWorkingServers(ОписаниеКластера);

// выбирается самый первый рабочий сервер кластера
ОписаниеСервераКластера = МассивСерверовКластера.GetValue(МассивСерверовКластера.GetLowerBound());
	
ОписаниеПроцесса = СоединениеСАгентом.CreateWorkingProcessInfo();

ОписаниеПроцесса.HostName = ОписаниеСервераКластера.HostName;
ОписаниеПроцесса.Enable   = Истина;
ОписаниеПроцесса.Capacity = 1000;

Попытка
	СоединениеСАгентом.RegWorkingProcess(ОписаниеКластера, ОписаниеПроцесса);
	
Исключение
	Отказ = Истина;
	Вопрос(ОписаниеОшибки(), РежимДиалогаВопрос.ОК, , , ""Ошибка"");
	
	Возврат;
	
КонецПопытки;"}
},
{0,
{"8.24. Просмотр информации о соединениях",0,0,"8/24","Соединитель = Новый COMObject(""V81.COMConnector"");

ИмяМашины 		 = ""MOBILE-ADS"";
Порт 			 = ""1540""; 
СтрокаСоединения = ""TCP://"" + ИмяМашины + "":"" + Порт;

СоединениеСАгентом = Соединитель.ConnectAgent(СтрокаСоединения);
МассивКластеров    = СоединениеСАгентом.GetClusters();

// получается первый массив кластера
ОписаниеКластера = МассивКластеров.GetValue(МассивКластеров.GetLowerBound());

// в случае если определены администраторы кластера должны
// быть указаны данные о логине
СоединениеСАгентом.authenticate(ОписаниеКластера, """", """");
	
МассивСоединений   = СоединениеСАгентом.GetConnections(ОписаниеКластера);
МаксимальныйИндекс = МассивСоединений.GetUpperBound();
	
Для ТекущийИндекс = МассивСоединений.GetLowerBound() По МаксимальныйИндекс Цикл
	ОписаниеСоединения = МассивСоединений.GetValue(ТекущийИндекс);
	
КонецЦикла;"}
},
{0,
{"8.25. Получение соединений информационной базы",0,0,"8/25","МассивСоединений = СоединениеСАгентом.GetInfoBaseConnections(ОписаниеКластера, ОписаниеБазы);"}
},
{0,
{"8.26. Получение информации по информационной базе",0,0,"8/26","Соединитель = Новый COMObject(""V81.COMConnector"");

ИмяМашины 		 = ""MOBILE-ADS"";
Порт 			 = ""1540""; 
СтрокаСоединения = ""TCP://"" + ИмяМашины + "":"" + Порт;

СоединениеСАгентом = Соединитель.ConnectAgent(СтрокаСоединения);
МассивКластеров    = СоединениеСАгентом.GetClusters();

// получается первый массив кластера
ОписаниеКластера = МассивКластеров.GetValue(МассивКластеров.GetLowerBound());

// в случае если определены администраторы кластера должны
// быть указаны данные о логине
СоединениеСАгентом.authenticate(ОписаниеКластера, """", """");

МассивСерверовКластера = СоединениеСАгентом.GetWorkingServers(ОписаниеКластера);

// выбирается самый первый рабочий сервер кластера
ОписаниеСервераКластера = МассивСерверовКластера.GetValue(МассивСерверовКластера.GetLowerBound());
МассивПроцессов 		= СоединениеСАгентом.GetServerWorkingProcesses(ОписаниеКластера,ОписаниеСервераКластера);

// выбирается самый первый рабочий процесс рабочего сервера
ОписаниеПроцесса = МассивПроцессов.GetValue(МассивПроцессов.GetLowerBound());

СтрокаСоединения 	 = ""TCP://"" + ОписаниеПроцесса.HostName + "":"" + Формат(ОписаниеПроцесса.MainPort, ""ЧГ="");
СоединениеСПроцессом = Соединитель.ConnectWorkingProcess(СтрокаСоединения);

// вводятся данные пользователя информационной базы
СоединениеСПроцессом.AddAuthentication("""", """");

МассивБаз = СоединениеСПроцессом.GetInfoBases();"}
},
{0,
{"8.27. Изменение рабочей даты",0,0,"8.27","Если ИспользованиеРабочейДаты = РежимРабочейДаты.Назначать Тогда
	РабочаяДата = УстанавливаемаяДата; 

Иначе
	Сообщить(""Рабочая дата не будет сменена. 
			 |Необходимо сначала в меню Сервис-Параметры-Общая 
			 |снять флажок – Использовать текущую дату компьютера "")
КонецЕсли;
"}
},
{0,
{"8.28. Установка монопольного режима",0,0,"8.28","Попытка
	УстановитьМонопольныйРежим(Истина);

Исключение
	Предупреждение(""К базе подключены пользователи. 
					|Монопольный режим установить невозможно!"", 7);
КонецПопытки;	"}
},
{0,
{"8.29. Проверка монопольного режима",0,0,"8.29","Если МонопольныйРежим() Тогда
	Сообщить(""Монопольный режим установлен"");
	
КонецЕсли;
"}
},
{0,
{"8.30. Отмена монопольного режима",0,0,"8.30","УстановитьМонопольныйРежим(Ложь);"}
},
{0,
{"8.31. Добавление записи в журнал регистрации",0,0,"8.31","ЗаписьЖурналаРегистрации(""ОтчетныеДанные.Просмотр"", УровеньЖурналаРегистрации.Информация, Метаданные(), ДатаКон,);"}
},
{0,
{"8.32. Получение данных о пользователях",0,0,"8.32","Выборка = ПользователиИнформационнойБазы.ПолучитьПользователей();

Для Каждого ЭлементМассива Из Выборка Цикл
	ИмяПользователя 	  = ЭлементМассива.Имя;	
	ПолноеИмяПользователя = ЭлементМассива.ПолноеИмя;
	ЕстьПароль 			  = ЭлементМассива.ПарольУстановлен;
	Роли 				  = ЭлементМассива.Роли;
	
	Для Каждого Роль Из Роли Цикл
		ИмяРоли = Роль.Имя;
		
	КонецЦикла;	

КонецЦикла;	"}
},
{0,
{"8.33. Получение общей системной информации",0,0,"8.33","Инфо = Новый СистемнаяИнформация;

Текст = ""Версия 1С:Предприятия 8.0: "" + Инфо.ВерсияПриложения;
Текст = Текст + Символы.ПС + ""Конфигурация: "" 			 + Метаданные.Синоним;
Текст = Текст + Символы.ПС + ""Поставщик: "" 				 + Метаданные.Поставщик;
Текст = Текст + Символы.ПС + ""Операционная система: "" 	 + Инфо.ВерсияОС;
Текст = Текст + Символы.ПС + ""Оперативная память (МБ): "" + Инфо.ОперативнаяПамять;
Текст = Текст + Символы.ПС + ""Процессор: "" 				 + Инфо.Процессор;

Предупреждение(Текст, , ""ДАННЫЕ ТЕКУЩЕГО КОМПЬЮТЕРА И КОНФИГУРАЦИИ"");"}
},
{0,
{"8.34. Добавление пользователя информационной базы",0,0,"8.34","НовыйПользователь = ПользователиИнформационнойБазы.СоздатьПользователя();

НовыйПользователь.Имя 						= ""Имя"";
НовыйПользователь.ПолноеИмя 				= ""Фамилия Имя Отчество"";
НовыйПользователь.АутентификацияСтандартная = Истина;
НовыйПользователь.ОсновнойИнтерфейс 		= Метаданные.Интерфейсы.Администратор;
НовыйПользователь.Пароль 					= ""пароль"";
НовыйПользователь.Роли.Добавить(Метаданные.Роли.Администратор);
НовыйПользователь.ПоказыватьВСпискеВыбора 	= Ложь;
НовыйПользователь.Язык 						= Метаданные.Языки.Русский;

НовыйПользователь.Записать();"}
},
{0,
{"8.35. Вызов процедуры привилегированного модуля",0,0,"8.35","ЗаписатьНовогоПользователя(НовыйПользователь);"}
},
{0,
{"8.36. Текст процедуры привилегированного модуля",0,0,"8.36","Процедура ЗаписатьНовогоПользователя(НовыйПользователь) Экспорт
	
	// Проверить наличие роли Администратор у нового пользователя.
	РольАдминистратор = Метаданные.Роли.Администратор;
	
	Если НовыйПользователь.Роли.Содержит(РольАдминистратор) Тогда
		Сообщить(""Добавление пользователя с административными правами запрещено."");
		
	Иначе // у нового пользователя нет роли Администратор
		
		// Проверить, что текущий пользователь обладает правами Менеджера
		// или Администратора
		Если РольДоступна(РольАдминистратор) ИЛИ РольДоступна(Метаданные.Роли.Менеджер) Тогда
			
			// Выполнить запись нового пользователя.
			НовыйПользователь.Записать();
			
		Иначе
			Сообщить(""Недостаточно прав доступа для добавления пользователя."");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры"}
},
{0,
{"8.37. Запись в лог-файл",0,0,"8.37","ФайлРегистрации = Новый ЗаписьТекста(""C:\LogFile.txt"", КодировкаТекста.ANSI, , Истина);

//	...

ФайлРегистрации.Записать(""Первое сообщение"" + Символы.ПФ);	

//	...

ФайлРегистрации.Записать(""Второе сообщение""+ Символы.ПФ);	

//	...

ФайлРегистрации.Закрыть();"}
},
{0,
{"8.38. Название листинга",0,0,"8.38","МассивСоединений = ПолучитьСоединенияИнформационнойБазы();		

Колонки = Пользователи.Колонки;

Колонки.Добавить(""Пользователь"", , , 10);
Колонки.Добавить(""Приложение""  , , , 10);
Колонки.Добавить(""НачалоРаботы"", , , 10);
Колонки.Добавить(""Компьютер""   , , , 10);
Колонки.Добавить(""Соединение""  , , , 10);

Для Каждого Соединение из МассивСоединений цикл
	НоваяСтрока = Пользователи.Добавить();
	
	НоваяСтрока.Компьютер 	 = Соединение.ИмяКомпьютера;
	НоваяСтрока.Приложение 	 = ПредставлениеПриложения(Соединение.ИмяПриложения);
	НоваяСтрока.НачалоРаботы = Соединение.НачалоСеанса;
	НоваяСтрока.Соединение 	 = Соединение.НомерСоединения;
	НоваяСтрока.Пользователь = Соединение.Пользователь.Имя;
	
КонецЦикла;

ЭлементыФормы.Пользователи.СоздатьКолонки();	"}
},
{0,
{"8.39. Выгрузка журнала регистрации",0,0,"8.39","ВыгрузитьЖурналРегистрации(""C:\log.xml"");"}
},
{0,
{"8.40. Заполнение списка пользователей",0,0,"8.40","Пользователи = ПользователиИнформационнойБазы.ПолучитьПользователей();

Для Каждого Пользователь из Пользователи цикл
	НовыйЭлемент = СписокПользователей.Добавить();
	
	НовыйЭлемент.Пометка 	   = Истина;
	НовыйЭлемент.Значение 	   = Пользователь;
	НовыйЭлемент.Представление = Пользователь.Имя;
	
КонецЦикла;"}
},
{0,
{"8.41. Выгрузка журнала регистрации по указанным пользователям",0,0,"","Массив = Новый Массив;

Для Каждого Пользователь из СписокПользователей Цикл
	
	Если Пользователь.Пометка Тогда
		Массив.Добавить(Пользователь);
		
	КонецЕсли;
	
КонецЦикла;

СтруктураФильтра = Новый Структура;
СтруктураФильтра.Вставить(""Пользователь"", Массив);
ВыгрузитьЖурналРегистрации(""C:\log.xml"", СтруктураФильтра, ""Дата, Пользователь, ПредставлениеСобытия"");
"}
},
{0,
{"8.42. Завершение работы пользователей",0,0,"8.42","Коннектор = Новый COMОбъект(""V81.COMConnector"");
Сервер = Коннектор.ConnectWorkingProcess(""TestServer"");
	
// Аутентифицироваться с административными правами в нужной базе.
Сервер.AddAuthentication(""Администратор"", """");
	
// Создать объект нужной информационной базы. 
ИнформационнаяБаза = Сервер.CreateInfoBaseInfo();
ИнформационнаяБаза.Name = ""Test_Base"";
	
// Получить соединения базы.
СоединенияБазы = Сервер.GetIBConnections(ИнформационнаяБаза);
	
// Разорвать соединения клиентских приложений.
Для Каждого Соединение Из СоединенияБазы Цикл
	Сервер.Disconnect(Соединение);
	
КонецЦикла;"}
},
{0,
{"8.43. Обработчик события При начале работы системы",0,0,"8.43","Процедура ПриНачалеРаботыСистемы()
	
	Интервал = Константы.ИнтервалПроверки.Получить();
	
	Если Интервал = 0 Тогда 
		Интервал = 60; 
		
	КонецЕсли; 
	
	ПодключитьОбработчикОжидания(""ПроверкаДинамическогоИзмененияИБ"", Интервал);
	
КонецПроцедуры"}
},
{0,
{"8.44. Процедура обработки ожидания",0,0,"8.44","Процедура ПроверкаДинамическогоИзмененияИБ() Экспорт

	// Если в конфигурации что-то изменилось
	Если КонфигурацияБазыДанныхИзмененаДинамически() Тогда

		// Предупредим пользователя о необходимости перезапустить сеанс
		ТекстВопроса = ""В конфигурацию информационной базы внесены изменения."" + Символы.ПС + ""Для работы с ними необходимо перезапустить программу."" + Символы.ПС + ""Перезапустить?"";
		РезультатВопроса = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 30, КодВозвратаДиалога.Да);

		// Если пользователь вообще не хочет ничего проверять 
		Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
			
			// Завершим проверку обновления
			ОтключитьОбработчикОжидания(""ПроверкаДинамическогоИзмененияИБ"");
			
			Возврат;
			
		КонецЕсли;
		
		// Если пользователь хочет перезапускать сеанс
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			
			// Завершаем текущий сеанс и запускаем новый
			ЗавершитьРаботуСистемы(Истина, Истина); 
			
			Возврат;
			
		КонецЕсли;
 
	КонецЕсли;

КонецПроцедуры"}
},
{0,
{"8.45. Установка максимального уровня регистрации событий",0,0,"8.45","МассивСоединений = ПолучитьСоединенияИнформационнойБазы();

Если МассивСоединений.Количество() > 1 Тогда
	Сообщить(""Существуют другие соединения с информационной базой,"" + Символы.ПС + ""изменение уровня регистрации не произведено!"");
	
	Возврат;
	
КонецЕсли;	
	
УровниЖурналаРегистрации = ПолучитьИспользованиеЖурналаРегистрации();

Если УровниЖурналаРегистрации.Количество() = 0 Тогда
		
	УровниЖурналаРегистрации.Добавить(УровеньЖурналаРегистрации.Ошибка);
	УровниЖурналаРегистрации.Добавить(УровеньЖурналаРегистрации.Информация);
	УровниЖурналаРегистрации.Добавить(УровеньЖурналаРегистрации.Предупреждение);
	УровниЖурналаРегистрации.Добавить(УровеньЖурналаРегистрации.Примечание);
		
	// Установка использования уровней
	УстановитьИспользованиеЖурналаРегистрации(УровниЖурналаРегистрации);	
	
КонецЕсли;	"}
},
{0,
{"8.46. Отключение регистрации событий",0,0,"8.46","МассивСоединений = ПолучитьСоединенияИнформационнойБазы();

Если МассивСоединений.Количество() > 1 Тогда
	Сообщить(""Существуют другие соединения с информационной базой,"" + Символы.ПС + ""изменение уровня регистрации не произведено!"");
	
	Возврат;
	
КонецЕсли;	

УстановитьИспользованиеЖурналаРегистрации(Новый Массив);"}
},
{0,
{"8.47. Запрет установки соединения с информационной базой",0,0,"8.47","Блокировка = ПолучитьБлокировкуУстановкиСоединений();
	
// Используя код разрешения можно будет подключиться к базе
// при установленной блокировке
Блокировка.КодРазрешения = ""КодДоступа"";
Блокировка.Начало 		 = ТекущаяДата() - 1;
Блокировка.Конец 		 = ТекущаяДата() + 100;
	
// Текст сообщения, который будет отображаться при попытке соединения
Блокировка.Сообщение 	 = ""ТекстСообщения"";
Блокировка.Установлена 	 = Истина;

УстановитьБлокировкуУстановкиСоединений(Блокировка);"}
},
{0,
{"8.48. Разрешение установки соединений с информационной базой",0,0,"8.48","Блокировка = ПолучитьБлокировкуУстановкиСоединений();
Блокировка.Установлена = Ложь;
УстановитьБлокировкуУстановкиСоединений(Блокировка);"}
},
{0,
{"8.49. Получение структуры хранения данных",0,0,"8.49","МассивИменМетаданных = Новый Массив();
МассивИменМетаданных.Добавить(""Справочник.Номенклатура"");
	
// Таблица значений, содержащая таблицы указанного объекта
Таблицы = ПолучитьСтруктуруХраненияБазыДанных(МассивИменМетаданных);
	
Для Каждого Таблица Из Таблицы Цикл

	ПоляТаблицы = Таблица.Поля;
	
	Для Каждого Поле Из ПоляТаблицы Цикл
		
		// Просмотр свойств поля
		
	КонецЦикла;	
		
	ИндексыТаблицы = Таблица.Индексы;
	
	Для Каждого Индекс Из ИндексыТаблицы Цикл

		// Просмотр свойств индекса

	КонецЦикла;	
		
КонецЦикла;	"}
}
},
{85,
{"Интеграция",1,0,"",""},
{0,
{"9.1. Выгрузка данных в текстовый файл",0,0,"9.1","Текст = Новый ТекстовыйДокумент;

Выборка = Справочники.Номенклатура.Выбрать();

Пока Выборка.Следующий() Цикл
	Стр = СтрЗаменить(Выборка.Наименование, Символ(34), ""%квч%"");
	Код = Строка(Выборка.Код) + Символ(34);
	
	Текст.ДобавитьСтроку(Код + Стр);
	
КонецЦикла;

Текст.Записать(""c:\temp\text.txt"");"}
},
{0,
{"9.2. Загрузка данных из  текстового файла",0,0,"9.2","Текст = Новый ТекстовыйДокумент;

Текст.Прочитать(""c:\temp\text.txt"");

Для НомерСтроки = 1 По Текст.КоличествоСтрок() Цикл
	Стр = Текст.ПолучитьСтроку(НомерСтроки);
	
	Позиция 	   = Найти(Стр, Символ(34));
	Код 		   = Сред(Стр, 1, Позиция-1);
	прНаименование = Сред(Стр, Позиция + 1);
	
	Наименование   = СтрЗаменить(прНаименование, ""%квч%"", Символ(34));

	Сообщить(Код + ""-"" + Наименование);
	
КонецЦикла;	"}
},
{0,
{"9.3. Запись данных в файл",0,0,"9.3","Путь = ""c:\temp\text.txt"";
Текст = Новый ЗаписьТекста(Путь, КодировкаТекста.UTF8);
Выборка = Справочники.Номенклатура.Выбрать();

Пока Выборка.Следующий() Цикл
	Текст.ЗаписатьСтроку(Выборка.Наименование);
	
КонецЦикла;	

Текст.Закрыть();"}
},
{0,
{"9.4. Чтение данных из файла",0,0,"9.4","Путь = ""c:\temp\text.txt"";
Текст = Новый ЧтениеТекста(Путь, КодировкаТекста.UTF8);
Стр = Текст.ПрочитатьСтроку();

Пока Стр <> Неопределено Цикл
	Стр = Текст.ПрочитатьСтроку();
	
	Сообщить(Стр);
	
КонецЦикла;	"}
},
{0,
{"9.5. Выгрузка данных в XML",0,0,"9.5","// Выгрузить в файл xml.
ЗаписьXML = Новый ЗаписьXML();

ЗаписьXML.ОткрытьФайл(""c:\doc.xml"");
ЗаписьXML.ЗаписатьНачалоЭлемента(""Root"");

// Получить объект по ссылке.
ВыгружаемыйОбъект = Документ.ПолучитьОбъект();

// С помощью средств сериализации записать объект в файл.
ЗаписатьXML(ЗаписьXML,ВыгружаемыйОбъект);
	
ЗаписьXML.ЗаписатьКонецЭлемента();

ЗаписьXML.Закрыть();"}
},
{0,
{"9.6. Название листинга",0,0,"9.6","ЧтениеXML = Новый ЧтениеXML();
ЧтениеXML.ОткрытьФайл(""c:\doc.xml"");


// Текущим становится элемент Root.
ЧтениеXML.Прочитать();

// Текущим становится элемент с документом.
ЧтениеXML.Прочитать();

// Проверить сможет ли с данным значением ""справиться"" 
// система сериализации в данной базе.
Если ВозможностьЧтенияXML(ЧтениеXML) Тогда

	// Получить ДокументОбъект.РеализацияТоваровУслуг
	ЗагружаемыйОбъект = ПрочитатьXML(ЧтениеXML);
	ЗагружаемыйОбъект.Записать();
	
КонецЕсли;	

ЧтениеXML.Закрыть();"}
},
{0,
{"9.7. Формирование XML-документа произвольной структуры",0,0,"9.7","Запись = Новый ЗаписьXML;

Запись.ОткрытьФайл(ПутьКФайлу);

Запись.ЗаписатьОбъявлениеXML();
Запись.ЗаписатьНачалоЭлемента(""Корневой"");
Запись.ЗаписатьАтрибут(""Справочник"", ""Номенклатура"");
Запись.ЗаписатьКомментарий(""Краткая информация о номенклатуре"");

Выборка = Справочники.Номенклатура.ВыбратьИерархически();

Пока Выборка.Следующий() Цикл

	Если Выборка.ЭтоГруппа Тогда
		
		Продолжить;
		
	КонецЕсли;	

	Запись.ЗаписатьНачалоЭлемента(""Элемент"");
	Запись.ЗаписатьАтрибут(""Код"", Строка(Выборка.Код));
	Запись.ЗаписатьАтрибут(""Артикул"", Строка(Выборка.Артикул));
	Запись.ЗаписатьТекст(Выборка.Наименование);
	Запись.ЗаписатьКонецЭлемента();
	
КонецЦикла;	

Запись.ЗаписатьКонецЭлемента();

Запись.Закрыть();"}
},
{0,
{"9.8. Пример структуры XML-документа",0,0,"9.8","<НачалоЭлемента 
	ИмяАтрибута=Значение ИмяАтрибута=Значение......>
	Текст
<КонецЭлемента>"}
},
{0,
{"9.9. Запись XML в строку",0,0,"9.9","Запись = Новый ЗаписьXML();

Запись.УстановитьСтроку();

Запись.ЗаписатьОбъявлениеXML();
Запись.ЗаписатьНачалоЭлемента(""Корневой"");
Запись.ЗаписатьАтрибут(""Справочник"", ""Номенклатура"");
Запись.ЗаписатьКомментарий(""Краткая информация о номенклатуре"");

Выборка = Справочники.Номенклатура.ВыбратьИерархически();

Пока Выборка.Следующий() Цикл

	Если Выборка.ЭтоГруппа Тогда
		
		Продолжить;
		
	КонецЕсли;	

	Запись.ЗаписатьНачалоЭлемента(""Элемент"");
	Запись.ЗаписатьАтрибут(""Код"", Строка(Выборка.Код));
	Запись.ЗаписатьАтрибут(""Артикул"", Строка(Выборка.Артикул));
	Запись.ЗаписатьТекст(Выборка.Наименование);
	Запись.ЗаписатьКонецЭлемента();
	
КонецЦикла;	

Запись.ЗаписатьКонецЭлемента();

Стр = Запись.Закрыть();

Сообщить(Стр);"}
},
{0,
{"9.10. Запись в текстовый файл",0,0,"9.10","ЗаписьXML = Новый ЗаписьXML();

ЗаписьXML.УстановитьСтроку();	

Данные = СсылкаНаДокумент.ПолучитьОбъект();

ЗаписатьXML(ЗаписьXML, Данные);

ТекстСообщения = ЗаписьXML.Закрыть();

Текст = Новый ТекстовыйДокумент;

Текст.УстановитьТекст(ТекстСообщения);

Текст.Записать(ПутьКФайлу);"}
},
{0,
{"9.11. Чтение из текстового файла",0,0,"9.11","Текст = Новый ТекстовыйДокумент;

Текст.Прочитать(ПутьКФайлу);

ЧтениеXML = Новый ЧтениеXML();

ЧтениеXML.УстановитьСтроку(Текст.ПолучитьТекст());

Если ВозможностьЧтенияXML(ЧтениеXML) Тогда
	Данные = ПрочитатьXML(ЧтениеXML);
	
	Данные.Записать();
	
КонецЕсли;"}
},
{0,
{"9.12. Загрузка XML-документа произвольной структуры",0,0,"9.12","Чтение = Новый ЧтениеXML;

Чтение.ОткрытьФайл(ПутьКФайлу);

Пока Чтение.Прочитать() Цикл // Прочитать «структурные части» элементов.

	// Проверить, какая часть элемента – текущая.
	Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ИмяУзла = Чтение.Имя;
		
		Сообщить(""--"" + ИмяУзла);

		// Атрибуты элементов можно читать только если текущая часть – начало элемента
		Пока Чтение.ПрочитатьАтрибут() Цикл

			// Прочитать данные узла атрибута.
			ТипУзла  = Чтение.ТипУзла;
			Имя 	 = Чтение.Имя;
			Значение = Чтение.Значение;
	
		// Обработать полученные значения.
		//	...
		
		КонецЦикла;
		
	ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст Тогда	

		// В примере просто выводим текст в окно сообщений.	
		Сообщить(""Текст:"" + Чтение.Значение);
		
	ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда

		// В примере просто выводим признак конца элемента
		// в окно сообщений
		Сообщить(""--Конец:"" + Чтение.Имя);
		
	КонецЕсли;	
	
КонецЦикла	"}
},
{0,
{"9.13. Текст файла new.xml",0,0,"9.13","<Товары xmlns=""http://www.sample-package.org"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""Товары"">
	<СписокТоваров>
		<Наименование>Ardo TL 1000 EX-1</Наименование>
		<ПризнакКомплекта>false</ПризнакКомплекта>
		<Код>14</Код>
	</СписокТоваров>
	<СписокТоваров>
		<Наименование>BOSCH KGS 3760 IE </Наименование>
		<ПризнакКомплекта>false</ПризнакКомплекта>
		<Код>11</Код>
	</СписокТоваров>
	<СписокТоваров>
		<Наименование>ELECTROLUX ER 9007 B</Наименование>
		<ПризнакКомплекта>false</ПризнакКомплекта>
		<Код>12</Код>
	</СписокТоваров>
</Товары>
"}
},
{0,
{"9.14. Текст файла ПримерСхемы.xsd",0,0,"9.14","<xsd:schema xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:tns=""http://www.sample-package.org"" attributeFormDefault=""unqualified"" elementFormDefault=""qualified"" targetNamespace=""http://www.sample-package.org"">
	<xsd:complexType name=""Товар"">
		<xsd:sequence>
			<xsd:element name=""Наименование"" type=""xsd:string""/>
			<xsd:element name=""ПризнакКомплекта"" type=""xsd:boolean""/>
			<xsd:element name=""Код"" type=""xsd:string""/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name=""Товары"">
		<xsd:sequence>
			<xsd:element maxOccurs=""unbounded"" name=""СписокТоваров"" type=""tns:Товар""/>
		</xsd:sequence>
	</xsd:complexType>
</xsd:schema>"}
},
{0,
{"9.15. Процедура чтения XML-документа",0,0,"9.15","Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	// Читаем XML-схему
	Чтение = Новый ЧтениеXML;
	
	Чтение.ОткрытьФайл(""c:\ПримерСхемы.xsd"");
	
	// Создадим документ DOM, чтобы с его помощью получить схему XML
	НовыйПостроительДом = Новый ПостроительDOM;
	
	НовыйДокументДом = НовыйПостроительДом.Прочитать(Чтение);
	
	// Получаем схему XML-документа (как объект)
	НовыйПостроительСхем = Новый ПостроительСхемXML;
	
	НоваяСхема = НовыйПостроительСхем.СоздатьСхемуXML(НовыйДокументДом);
	
	// Создаем набор схем XML и добавляем в него нашу схему XML
	НаборСхем = Новый НаборСхемXML;
	
	НаборСхем.Добавить(НоваяСхема);
	
	// На основе созданного набора схем XML создаем фабрику XDTO,
	// в параметр передаем набор схем XML
	НоваяФабрика = Новый ФабрикаXDTO(НаборСхем);
	
	// Открываем XML-документ для чтения
	Чтение = Новый ЧтениеXML;
	
	Чтение.ОткрытьФайл(""c:\new.xml"");
	
	// Производим считывание всех данных XML-документа
	// используя фабрику XDTO, содержащую полученную схему XML
	Данные = НоваяФабрика.ПрочитатьXML(Чтение);
	
	Если Данные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Обходим полученные данные
	Для Каждого Элемент Из Данные.СписокТоваров Цикл
		
		НаименованиеЭлемента = Элемент.Наименование;
		ПризнакКомплекта 	 = Элемент.ПризнакКомплекта;
		КодЭлемента 		 = Элемент.Код;
		
		// Обрабатываем полученные данные
		Сообщить(НаименованиеЭлемента + "" "" + ПризнакКомплекта + "" "" + КодЭлемента);
		
	КонецЦикла;
	
КонецПроцедуры"}
},
{0,
{"9.16. Процедура чтения XML-документа",0,0,"9.16","Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	// Открываем XML-документ для чтения
	Чтение = Новый ЧтениеXML;
	
	Чтение.ОткрытьФайл(""c:\new.xml"");
	
	// Производим считывание всех данных XML-документа
	// используя фабрику XDTO, содержащую полученную схему XML
	Данные = ФабрикаXDTO.ПрочитатьXML(Чтение);
	
	Если Данные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Обходим полученные данные
	Для Каждого Элемент Из Данные.СписокТоваров Цикл
		
		НаименованиеЭлемента = Элемент.Наименование;
		ПризнакКомплекта 	 = Элемент.ПризнакКомплекта;
		КодЭлемента 		 = Элемент.Код;
		
		// Обрабатываем полученные данные
		Сообщить(НаименованиеЭлемента + "" "" + ПризнакКомплекта + "" "" + КодЭлемента);
		
	КонецЦикла;
	
КонецПроцедуры"}
},
{0,
{"9.17. Текст файла ПримерСхемы.xsd",0,0,"9.17","<xsd:schema xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:tns=""http://www.sample-package.org"" attributeFormDefault=""unqualified"" elementFormDefault=""qualified"" targetNamespace=""http://www.sample-package.org"">
	<xsd:complexType name=""Товар"">
		<xsd:sequence>
			<xsd:element name=""Наименование"" type=""xsd:string""/>
			<xsd:element name=""ПризнакКомплекта"" type=""xsd:boolean""/>
			<xsd:element name=""Код"" type=""xsd:string""/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name=""Товары"">
		<xsd:sequence>
			<xsd:element maxOccurs=""unbounded"" name=""СписокТоваров"" type=""tns:Товар""/>
		</xsd:sequence>
	</xsd:complexType>
</xsd:schema>"}
},
{0,
{"9.18. Процедура записи данных в XML-документ",0,0,"9.18","	// Читаем XML-документ, содержащий XML-схему 
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(""c:\ПримерСхемы.xsd"");
	
	// Создадим документ DOM, чтобы с его помощью получить схему XML
	НовыйПостроительДом = Новый ПостроительDOM;
	НовыйДокументДом = НовыйПостроительДом.Прочитать(Чтение);
	
	// Получаем схему XML-документа (как объект)
	НовыйПостроительСхем = Новый ПостроительСхемXML;
	НоваяСхема = НовыйПостроительСхем.СоздатьСхемуXML(НовыйДокументДом);
	
	// Создаем набор схем XML и добавляем в него нашу схему XML
	НаборСхем = Новый НаборСхемXML;
	НаборСхем.Добавить(НоваяСхема);
	
	// На основе созданного набора схем XML создаем фабрику XDTO,
	// в параметр передаем набор схем XML
	НоваяФабрика = Новый ФабрикаXDTO(НаборСхем);
	
	// Создаем типы объектов, описанные в схеме XML
	ТоварТип = НоваяФабрика.Тип(""http://www.sample-package.org"", ""Товар"");
	КорневойТип = НоваяФабрика.Тип(""http://www.sample-package.org"", ""Товары"");
	
	// Создаем элемент, который будет корневым в XML-документе
	Корневой = НоваяФабрика.Создать(КорневойТип);
	
	Выборка = Справочники.Номенклатура.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Пропускаем группы
		Если Выборка.ЭтоГруппа Тогда Продолжить; КонецЕсли;
		
		// Создаем объект XDTO (определенный в схеме)
		ЭлементНоменклатуры = НоваяФабрика.Создать(ТоварТип);
		
		// Заполняем свойства объекта
		ЭлементНоменклатуры.Наименование 	 = Выборка.Наименование;
		ЭлементНоменклатуры.ПризнакКомплекта = Ложь;
		ЭлементНоменклатуры.Код 			 = Выборка.Код;
		
		// Включаем созданный объект в список товаров
		//(свойство корневого объекта)
		Корневой.СписокТоваров.Добавить(ЭлементНоменклатуры);
		
	КонецЦикла;	
	
	Запись = Новый ЗаписьXML;
	
	Запись.ОткрытьФайл(""c:\new.xml"");
	
	НоваяФабрика.ЗаписатьXML(Запись, Корневой, , , , НазначениеТипаXML.Явное);
	
	Запись.Закрыть();"}
},
{0,
{"9.19. Текст сформированного XML-документа",0,0,"9.19","<Товары xmlns=""http://www.sample-package.org"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""Товары"">
	<СписокТоваров>
		<Наименование>Ardo TL 1000 EX-1</Наименование>
		<ПризнакКомплекта>false</ПризнакКомплекта>
		<Код>14</Код>
	</СписокТоваров>
	<СписокТоваров>
		<Наименование>BOSCH KGS 3760 IE </Наименование>
		<ПризнакКомплекта>false</ПризнакКомплекта>
		<Код>11</Код>
	</СписокТоваров>
	<СписокТоваров>
		<Наименование>ELECTROLUX ER 9007 B</Наименование>
		<ПризнакКомплекта>false</ПризнакКомплекта>
		<Код>12</Код>
	</СписокТоваров>
</Товары>"}
},
{0,
{"9.20. Процедура записи данных в XML-документ",0,0,"9.20","	// Создаем типы объектов, описанные в схеме XML
	ТоварТип 	= ФабрикаXDTO.Тип(""http://www.sample-package.org"", ""Товар"");
	КорневойТип = ФабрикаXDTO.Тип(""http://www.sample-package.org"", ""Товары"");
	
	// Создаем элемент, который будет корневым в XML-документе
	Корневой = ФабрикаXDTO.Создать(КорневойТип);
	
	Выборка = Справочники.Номенклатура.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Пропускаем группы
		Если Выборка.ЭтоГруппа Тогда Продолжить; КонецЕсли;
		
		// Создаем объект XDTO (определенный в схеме)
		ЭлементНоменклатуры = ФабрикаXDTO.Создать(ТоварТип);
		
		// Заполняем свойства объекта
		ЭлементНоменклатуры.Наименование 	 = Выборка.Наименование;
		ЭлементНоменклатуры.ПризнакКомплекта = Ложь;
		ЭлементНоменклатуры.Код 			 = Выборка.Код;
		
		// Включаем созданный объект в список товаров
		//(свойство корневого объекта)
		Корневой.СписокТоваров.Добавить(ЭлементНоменклатуры);
		
	КонецЦикла;	
	
	Запись = Новый ЗаписьXML;
	
	Запись.ОткрытьФайл(""c:\new.xml"");
	
	ФабрикаXDTO.ЗаписатьXML(Запись, Корневой, , , , НазначениеТипаXML.Явное);
	
	Запись.Закрыть();"}
},
{0,
{"9.21. Текст сформированного XML-документа",0,0,"9.21","<Товары xmlns=""http://www.sample-package.org"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""Товары"">
	<СписокТоваров>
		<Наименование>Ardo TL 1000 EX-1</Наименование>
		<ПризнакКомплекта>false</ПризнакКомплекта>
		<Код>14</Код>
	</СписокТоваров>
	<СписокТоваров>
		<Наименование>BOSCH KGS 3760 IE </Наименование>
		<ПризнакКомплекта>false</ПризнакКомплекта>
		<Код>11</Код>
	</СписокТоваров>
	<СписокТоваров>
		<Наименование>ELECTROLUX ER 9007 B</Наименование>
		<ПризнакКомплекта>false</ПризнакКомплекта>
		<Код>12</Код>
	</СписокТоваров>
</Товары>"}
},
{0,
{"9.22. Выгрузка документа «частями»",0,0,"9.22","Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	ОченьСложныйТип = ФабрикаXDTO.Тип(""http://www.sample-package.org"", ""СложныйТип"");
	
	Запись = Новый ЗаписьXML;
	
	Запись.ОткрытьФайл(СокрЛП(Константы.ПутьДоФайлов.Получить()) + ""\new.xml"");
	
	Запись.ЗаписатьОбъявлениеXML();

	// записываем начало корневого элемента
	Запись.ЗаписатьНачалоЭлемента(""Контейнер"");

	// позволяет уменьшить размер выгружаемого файла
	Запись.ЗаписатьСоответствиеПространстваИмен(""""	 , ""http://www.sample-package.org"");
	Запись.ЗаписатьСоответствиеПространстваИмен(""xsd"", ""http://www.w3.org/2001/XMLSchema"");
	Запись.ЗаписатьСоответствиеПространстваИмен(""xsi"", ""http://www.w3.org/2001/XMLSchema-instance"");

	// цикл по «структурно сложным объектам»
	Для Каждого Объект Из КоллекцияОбъектов Цикл

		Элемент = ФабрикаXDTO.Создать(ОченьСложныйТип);

		// работа со «сложным» объектом

		// сбрасываем объект в файл		
		ФабрикаXDTO.ЗаписатьXML(Запись, Элемент, , , , НазначениеТипаXML.Явное);

	КонецЦикла;

	// закрываем элемент «Контейнер»
	Запись.ЗаписатьКонецЭлемента();
	
	Запись.Закрыть();

КонецПроцедуры"}
},
{0,
{"9.23. Загрузка документа «частями»",0,0,"9.23","Процедура ОсновныеДействияФормыДействие(Кнопка)

	Чтение = Новый ЧтениеXML;
	
	Чтение.ОткрытьФайл(СокрЛП(Константы.ПутьДоФайлов.Получить()) + ""\new.xml"");

	Чтение.Прочитать();
	Чтение.Прочитать();

	Пока Чтение.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
		Данные = ФабрикаXDTO.ПрочитатьXML(Чтение);

		Если Данные = Неопределено Тогда
			
			Прервать;
			
		КонецЕсли;

		// разбор объекта XDTO
		
	КонецЦикла;	

КонецПроцедуры"}
},
{0,
{"9.24. Непосредственное указание свойств объекта",0,0,"9.24","ТипСпр 	= ФабрикаXDTO.Тип(""http://v8.1c.ru/8.1/data/enterprise/current-config"", ""CatalogObject.Номенклатура"");
СпрXDTO = ФабрикаXDTO.Создать(ТипСпр);

СпрXDTO.Code = 1;
СпрXDTO.Description = ""Наименование"";

// определим остальные свойства объекта	"}
},
{0,
{"9.25. Сериализация XDTO",0,0,"9.25","НовыйСXDTO = Новый СериализаторXDTO(ФабрикаXDTO);

// получим объект справочника
Спр = Справочники.Номенклатура.НайтиПоКоду(14).ПолучитьОбъект();

// сериализуем его в XDTO
СпрXDTO = НовыйСXDTO.ЗаписатьXDTO(Спр);
"}
},
{0,
{"9.26. Выгрузка данных в DBF",0,0,"9.26","БД = Новый XBase;

БД.Поля.Добавить(""CODE"", ""S"", 5);
БД.Поля.Добавить(""NAME"", ""S"", 40);

БД.СоздатьФайл(Путь + ""start.dbf"", Путь + ""index.cdx"");
БД.Индексы.Добавить(""IDXCODE"", ""CODE"");

ФлИБД = БД.СоздатьИндексныйФайл(Путь + ""index.cdx"");

БД.АвтоСохранение = Истина;

Выборка = Справочники.Номенклатура.ВыбратьИерархически();

Пока Выборка.Следующий() Цикл
	БД.Добавить();
	
	БД.CODE = Выборка.Код;
	БД.NAME = Выборка.Наименование;
	
КонецЦикла;

БД.ЗакрытьФайл();"}
},
{0,
{"9.27. Загрузка данных из DBF",0,0,"9.27","БД = Новый XBase;

БД.ОткрытьФайл(Путь + ""start.dbf"", Путь + ""index.cdx""); 

БД.ТекущийИндекс = БД.Индексы.IDXCODE;

Пока БД.Следующая() Цикл
	Сообщить(БД.CODE);
	Сообщить(БД.NAME);
	
КонецЦикла;	

БД.ЗакрытьФайл();"}
},
{0,
{"9.28. Фрагмент HTML-кода анкеты",0,0,"9.28","<form name='frm' action=”anketa.asp”>
<table>
<tr><td>Фамилия</td><td><input type=text name='fam'></td></tr>
<tr><td>Имя</td><td><input type=text name='nam'></td></tr>
<tr><td>Отчество</td><td><input type=text name='otch'></td></tr>
</table>"}
},
{0,
{"9.29. Обработчик события При изменении",0,0,"9.29","Процедура URLПриИзменении(Элемент)
	
	ЭлементыФормы.ПолеHTML.Перейти(URL);
	
КонецПроцедуры "}
},
{0,
{"9.30. Обработчик события Документ сформирован",0,0,"9.30","Процедура ПолеHTMLДокументСформирован(Элемент)
	
	// Событие возникает и при открытии формы, когда в реквизите URL содержится пустая строка.
	Если URL <> """" Тогда
		Док = ЭлементыФормы.ПолеHTML.Документ;
		
		// При попытке обратиться к несуществующему свойству произойдет ошибка
		Док.forms[""frm""].fam.Value 	= ""Иванов"";
		Док.forms[""frm""].nam.Value 	= ""Иван"";
		Док.forms[""frm""].otch.Value = ""Иванович"";
		
	КонецЕсли;
	
КонецПроцедуры"}
},
{0,
{"9.31. Указание пути к файлу",0,0,"9.31","Режим = РежимДиалогаВыбораФайла.Открытие;

ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);

ДиалогОткрытияФайла.ПолноеИмяФайла 	   = """";
Фильтр = ""Текст(*,txt)|*.txt"";
ДиалогОткрытияФайла.Фильтр 			   = Фильтр;
ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
ДиалогОткрытияФайла.Заголовок 		   = ""Выберите файл"";

Если ДиалогОткрытияФайла.Выбрать() Тогда
	ПутьКФайлу = ДиалогОткрытияФайла.ПолноеИмяФайла;
	
КонецЕсли"}
},
{0,
{"9.32. Выбор каталога",0,0,"9.32","Режим = РежимДиалогаВыбораФайла.ВыборКаталога;

ДиалогОткрытия = Новый ДиалогВыбораФайла(Режим);

ДиалогОткрытия.Каталог 			  = """";
ДиалогОткрытия.МножественныйВыбор = Ложь;
ДиалогОткрытия.Заголовок 		  = ""Выберите каталог"";

Если ДиалогОткрытия.Выбрать() Тогда
	ПутьККаталогу = ДиалогОткрытия.Каталог;
	
КонецЕсли"}
},
{0,
{"9.33. Чтение информации о файле",0,0,"9.33","ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

ДиалогОткрытияФайла.Выбрать();

Файл = Новый Файл(ДиалогОткрытияФайла.ПолноеИмяФайла);

Текст = ""Файл: "" + Файл.Имя;
Текст = Текст + Символы.ПС + ""Расширение: "" + Файл.Расширение;
Текст = Текст + Символы.ПС + ""Полное имя: "" + Файл.ПолноеИмя;
Текст = Текст + Символы.ПС + ""Путь: "" + Файл.Путь;
Текст = Текст + Символы.ПС + ""Размер: "" + Файл.Размер() + "" байт"";
Текст = Текст + ?(Файл.ПолучитьНевидимость(), Символы.ПС + ""Невидимый. "", """");
Текст = Текст + ?(Файл.ПолучитьТолькоЧтение(), Символы.ПС + ""Только чтение."", """");
Текст = Текст + Символы.ПС + ""Последнее изменение: "" + Файл.ПолучитьВремяИзменения();

Сообщить(Текст);"}
},
{0,
{"9.34. Получение списка файлов в каталоге",0,0,"9.34","МассивНайденных = НайтиФайлы(""C:\Обмен\Входящие"", ""*.xml""); 

Для каждого Файл из МассивНайденных Цикл
	Сообщить(Файл.Имя);

	// Обработать найденные файлы. 
	// ...
	
КонецЦикла;
"}
},
{0,
{"9.35. Чтение файлов по FTP",0,0,"9.35","Если НайтиФайлы(""C:\Temp\Sklad.xml"") <> Неопределено Тогда
	УдалитьФайлы(""C:\Temp\ Sklad.xml "");
	
КонецЕсли;

Если НайтиФайлы(""ftp://111.222.333.4/Sklad.xml"") <> Неопределено Тогда
	ПереместитьФайл(""ftp://111.222.333.4/Sklad.xml"", ""C:\Temp\ Sklad.xml"");
	
	Сообщить(""Файл перемещен."");

Иначе
	Сообщить(""Действие не выполнено. Файл в источнике не найден."");
	
КонецЕсли;"}
},
{0,
{"9.36. Разделение файла",0,0,"9.36","РазделитьФайл(""D:/1/MyFile.xml"", 1024*1024, ""D:/1/11/"");"}
},
{0,
{"9.37. Объединение файлов",0,0,"9.37","ОбъединитьФайлы(""D:/1/11/MyFile.xml.*"", ""D:/1/11/MyProg.exe"");"}
},
{0,
{"9.38. Архивирование файлов",0,0,"9.38","ФайлАрхива = Новый ЗаписьZipФайла(""C:\Arch.zip"", , , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);	
ФайлАрхива.Добавить(""C:\Inetpub\wwwroot\Applic1\*.*"", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
ФайлАрхива.Записать();
"}
},
{0,
{"9.39. Извлечение файлов из архива",0,0,"9.39","ФайлАрхива = Новый ЧтениеZIPФайла(""C:\Arch.zip"");
ФайлАрхива.ИзвлечьВсе(""C:\Open"", РежимВосстановленияПутейФайловZIP.Восстанавливать);
ФайлАрхива.Закрыть();"}
},
{0,
{"9.40. Сравнение файлов",0,0,"9.40","ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

ДиалогОткрытияФайла.Фильтр = ""Текстовый документ(*.txt)|*.txt"";

// Выбрать первый файл.
ДиалогОткрытияФайла.Заголовок = ""Выберите первый файл:"";
ДиалогОткрытияФайла.Выбрать();
ИмяФайла1 = ДиалогОткрытияФайла.ПолноеИмяФайла;

// Выбрать второй файл.
ДиалогОткрытияФайла.Заголовок = ""Выберите второй файл:"";
ДиалогОткрытияФайла.Выбрать();
ИмяФайла2 = ДиалогОткрытияФайла.ПолноеИмяФайла;

// Сравнить выбранные файлы.
СравнениеФайлов = Новый СравнениеФайлов();

СравнениеФайлов.ПервыйФайл 					   = ИмяФайла1;
СравнениеФайлов.ВторойФайл 					   = ИмяФайла2;
СравнениеФайлов.ИгнорироватьПустоеПространство = Истина;
СравнениеФайлов.СпособСравнения 			   = СпособСравненияФайлов.ТекстовыйДокумент;

СравнениеФайлов.ПоказатьРазличия();"}
},
{0,
{"9.41. Процедура проверки наличия файлов",0,0,"9.41","Процедура ПроверкаНаличияФайла()

	ИмяКаталога = ""c:\temp"";
	Маска 		= ""*.xml"";
	
	НайденныеФайлы = НайтиФайлы(ИмяКаталога, Маска);
	
	Для Каждого Файл Из НайденныеФайлы Цикл
		Сообщить(Файл.Имя);
		
	КонецЦикла;	

КонецПроцедуры"}
},
{0,
{"9.42. Подключение обработчика ожидания",0,0,"9.42","ПодключитьОбработчикОжидания(""ПроверкаНаличияФайла"", 10);"}
},
{0,
{"9.43. Открытие медиа-файла",0,0,"9.43","Режим = РежимДиалогаВыбораФайла.Открытие;

ДиалогФыбораФайла = Новый ДиалогВыбораФайла(Режим);

ДиалогФыбораФайла.Фильтр 	= ""Все файлы (все)|*.*"";	
ДиалогФыбораФайла.Заголовок = ""Выберите медиа файл"";

Если ДиалогФыбораФайла.Выбрать() Тогда
	ПутьКМедиаФайлу = ДиалогФыбораФайла.ПолноеИмяФайла;

	// В зависимости от варианта объекта запись полного пути к файлу
	// производится либо в свойство FileName, либо в свойство URL.

	Попытка
		ЭлементыФормы.WMP.FileName = ПутьКМедиаФайлу;

	Исключение	
		ЭлементыФормы.WMP.URL = ПутьКМедиаФайлу;
		
	КонецПопытки;	

КонецЕсли;"}
},
{0,
{"9.44. Использование макета Active Document",0,0,"9.44","Договор = ПолучитьМакет(""Договор"");

// Получить объект из макета.
MSWord = Договор.Получить();
	
НаименованиеКонтрагента = ""ООО Торгуем всем"";

Попытка
	Документ = MSWord.Application.Documents(1);
	Документ.Activate();

	// Получить объект, который будем использовать для поиска и замены.
	Замена = Документ.Content.Find;

	// Заменить заранее определенные ключевые конструкции на требуемый текст.
	Замена.Execute(""<НазваниеКомпании>"",
		Ложь, Истина, Ложь, , , Истина, , Ложь,	НаименованиеКонтрагента);

	// Далее аналогично для остальных ключевых конструкций.
	//	...

	// Делаем видимым приложение и активизируем его.
	MSWord.Application.Visible = Истина;
	MSWord.Activate();

Исключение

	// Если произойдет ошибка выводятся данные об ошибке и объект закрывается.
	Сообщить(ОписаниеОшибки());
	MSWord.Application.Quit();
	
КонецПопытки;"}
},
{0,
{"9.45. Отправка сообщения электронной почты",0,0,"9.45","Почта = Новый Почта;

Почта.Подключиться(""login"", ""password"");

Сообщ = Новый ПочтовоеСообщение;

Сообщ.Текст = ""Доброе время суток!!!!"";
Сообщ.Тема 	= ""Срочно в номер!!!"";

Данные = Новый ДвоичныеДанные(""c:\attach.txt"");

Сообщ.Вложения	.Добавить(Данные,""attach.txt"");
Сообщ.Получатели.Добавить(""hline@1c.ru"");

Почта.Послать(Сообщ, Ложь);
Почта.Отключиться();"}
},
{0,
{"9.46. Прием сообщения электронной почты",0,0,"9.46","Почта = Новый Почта;

Почта.Подключиться(""login"", ""password"");

Выборка = Почта.Выбрать(Истина, Ложь);

Для Каждого Сообщение Из Выборка Цикл
	Сообщить(""Тема: "" + Строка(Сообщение.Тема));	
	Сообщить(""Текст: "" + Строка(Сообщение.Текст));	
	
	Для Каждого Вложение Из Сообщение.Вложения Цикл
		Сообщить(Строка(Вложение.Наименование));	
		
	КонецЦикла;	

КонецЦикла;	"}
},
{0,
{"9.47. Отправка сообщения",0,0,"9.47","// Сформировать почтовый профиль.
// При отправке нет необходимости указывать настройки, связанные с POP сервером.
ИПП = Новый ИнтернетПочтовыйПрофиль;

ИПП.АдресСервераSMTP = Константы.АдресСервераSMTP.Получить();
ИПП.ВремяОжидания 	 = Константы.ВремяОжидания.Получить();
ИПП.Пароль 			 = Константы.Пароль.Получить();
ИПП.ПарольSMTP 		 = Константы.ПарольSMTP.Получить();
ИПП.Пользователь 	 = Константы.Пользователь.Получить();
ИПП.ПользовательSMTP = Константы.ПользовательSMTP.Получить();
ИПП.ПортSMTP 		 = Константы.ПортSMTP.Получить();

// Создать сообщение.
Сообщение = Новый ИнтернетПочтовоеСообщение;

Сообщение.Получатели.Добавить(""hline@1c.ru"");
Сообщение.Отправитель.Адрес = ""booktest@yandexyandex.ru"";
Сообщение.Тема = ""Срочно в номер!"";
Сообщение.Тексты.Добавить(""Доброе время суток!"");

Вложение = Новый ДвоичныеДанные(ПутьКФайлуВложения);

Сообщение.Вложения.Добавить(Вложение,""attach.txt"");

// Подключиться и отправить.
Почта = Новый ИнтернетПочта;

Почта.Подключиться(Профиль);
Почта.Послать(Сообщение);
Почта.Отключиться();"}
},
{0,
{"9.48. Прием сообщения",0,0,"9.48","// Формирование почтового профиля.
// При получении нет необходимости указывать настройки, связанные с SMTP сервером.
СостояниеПриема = ""Подключение к серверу"";

ИПП = Новый ИнтернетПочтовыйПрофиль;

ИПП.АдресСервераPOP3 = Константы.АдресСервераPOP3.Получить();
ИПП.ВремяОжидания 	 = Константы.ВремяОжидания.Получить();
ИПП.Пароль 			 = Константы.Пароль.Получить();
ИПП.Пользователь 	 = Константы.Пользователь.Получить();
ИПП.ПортPOP3 		 = Константы.ПортPOP3.Получить();

Соединение = Новый ИнтернетПочта;
Соединение.Подключиться(ИПП);
СостояниеПриема = ""Получение выборки писем"";
Выборка = Соединение.Выбрать(ЗабиратьССервера);

СостояниеПриема = ""Создание документов - писем"";
КоличествоВВыборке = Выборка.Количество();
Индекс = 1;

Для Каждого Письмо Из Выборка Цикл
	ТекПозиция = Окр(Индекс * 100 / КоличествоВВыборке);

	Если ТекПозиция <> Позиция Тогда
		Позиция = ТекПозиция;
		
	КонецЕсли;	

	Док = Документы.Письмо.СоздатьДокумент();
	Док.Тема = Письмо.Тема;
	СтрПолучатели = """";

	Для Каждого Адрес Из Письмо.Получатели Цикл
		СтрПолучатели = СтрПолучатели + Адрес.Адрес + "","";
		
	КонецЦикла;	

	Док.Получатели = СтрПолучатели;

	Если ТипЗнч(Письмо.Отправитель) = Тип(""Строка"") Тогда
		Отправитель = Письмо.Отправитель;

	Иначе									 
		Отправитель = Письмо.Отправитель.Адрес;
		
	КонецЕсли;

	Док.Отправитель = Отправитель;
	Содержание = """";

	Для Каждого ТекстСообщения Из Письмо.Тексты Цикл
		Содержание = Содержание + ТекстСообщения.Текст + Символы.ПС;
		
	КонецЦикла;	
	
	Док.Содержание = Содержание;
	Док.Записать();
	
	Индекс = Индекс + 1;
	
КонецЦикла;	

Соединение.Отключиться();
"}
},
{0,
{"9.49. Загрузка файлов с FTP",0,0,"9.49","Процедура ЗагрузитьОтмеченные(Кнопка)

	Сервер = Новый FTPСоединение(FTPServer);
	
	Для Каждого Файл Из ПолеСписка Цикл
		
		Если Файл.Пометка Тогда
			Сервер.Получить(Файл.Значение.ПолноеИмя, ""с:\temp"" + Файл.Значение.ПолноеИмя);	
			Файл.Пометка = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;	

КонецПроцедуры"}
},
{0,
{"9.50. Просмотр файлов",0,0,"9.50","Процедура Просмотреть(Кнопка)

	Сервер = Новый FTPСоединение(FTPServer);
	МассивФайлов = Сервер.НайтиФайлы(""/"", ""*.*"");
	
	Для Каждого Файл Из МассивФайлов Цикл
		
		Если Файл.ЭтоФайл() Тогда
			ПолеСписка.Добавить(Файл, Файл.Имя)	
			
		КонецЕсли;	
		
	КонецЦикла;	

КонецПроцедуры"}
},
{0,
{"9.51. Получение файлов по HTTP",0,0,"9.51","СерверИсточник 	  = HTTPserver;
Адрес 			  = ""/price.asp"";
ИмяВходящегоФайла = ""c:\temp\input.html"";

НТТР = Новый HTTPСоединение(СерверИсточник);
НТТР.Получить(Адрес, ИмяВходящегоФайла);

ВходящийФайл = Новый Файл(ИмяВходящегоФайла);"}
},
{0,
{"9.52. Перенос остатков с помощью COM-соединения",0,0,"9.52","Запрос = Новый Запрос;

Запрос.Текст= ""ВЫБРАТЬ
|	ОстаткиТоваровОрганизацийОстатки.Организация КАК Организация,
|	ОстаткиТоваровОрганизацийОстатки.Номенклатура,
|	ОстаткиТоваровОрганизацийОстатки.ГТДОрганизации,
|	ОстаткиТоваровОрганизацийОстатки.СтранаПроисхождения,
|	ОстаткиТоваровОрганизацийОстатки.Комиссионер,
|	ОстаткиТоваровОрганизацийОстатки.КоличествоОстаток
|ИЗ
|	РегистрНакопления.ОстаткиТоваровОрганизаций.Остатки(&ДатаПереноса, ) КАК ОстаткиТоваровОрганизацийОстатки
|ИТОГИ ПО
|	Организация"";

Запрос.УстановитьПараметр(""ДатаПереноса"", ДатаПереноса);
	
V8 = Новый COMОбъект(""V81.ComConnector"");

Попытка
	Открытие = V8.Connect(""File="""""" + Путь + """""";Usr=""""Usr1"""";"");

Исключение
	Предупреждение(""База данных не открыта!!!"");
	Возврат;
КонецПопытки;
	
Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

МенеджерДокумента 	 = Открытие.Документы.ОприходованиеТоваров;
МенеджерНоменклатуры = Открытие.Справочники.Номенклатура;
МенеджерОрганизаций  = Открытие.Справочники.Организации;

// Менеджеры остальных справочников:
//	...

Пока Выборка.Следующий() Цикл
	Документ 	= МенеджерДокумента.СоздатьДокумент();
	Код 		= Выборка.Организация.Код;
	Организация = МенеджерОрганизаций.НайтиПоКоду(Код);

	Если Организация.Пустая() Тогда
		Организация = МенеджерОрганизаций.СоздатьЭлемент();
		Организация.Код = Код;

		// Остальные реквизиты:
		//	...

		Организация.Записать();
	КонецЕсли;	

	// Обработка остальных реквизитов, справочников:
		…

	ВыборкаПодчиненная = Выборка.Выбрать();

	Пока ВыборкаПодчиненная.Следующий() Цикл
		
		// Поиск/перенос данных справочников
		// заполнение табличной части документа
		//	...
		
	КонецЦикла;

	Документ.Записать(РежимЗаписиДокумента.Проведение);
	
КонецЦикла;	"}
},
{0,
{"9.53. Перенос данных из Excel",0,0,"9.53","Sub load()

	Dim cntr As Object
	Dim trade As Object
	Dim Элемент As Object
	Dim СправочникКонтрагентов As Object
	Dim ГруппаКонтрагентов As Object
	
	Set cntr = CreateObject(""V81.COMConnector"")
	Set trade =	cntr.Connect(""File=""""C:\DemoTrd4"""";Usr=""""Федоров (администратор)"""";"")
	
	Set СправочникКонтрагентов = trade.Справочники.Контрагенты
	Set ГруппаКонтрагентов = СправочникКонтрагентов.СоздатьГруппу()
	ГруппаКонтрагентов.Наименование = ""***** Экспорт из Excel ******""
	ГруппаКонтрагентов.Записать
	
	N = 11	'Количество строк в списке поставщиков
	
	For Count = 3 To N
		Set Элемент = СправочникКонтрагентов.СоздатьЭлемент()
		Элемент.Код = Application.Cells(Count, 1).Value
		Элемент.Наименование = Application.Cells(Count, 2).Value
		Элемент.ИНН = Application.Cells(Count, 3).Value
		Элемент.НаименованиеПолное = Application.Cells(Count, 4).Value
		Элемент.Родитель = ГруппаКонтрагентов.Ссылка
		Элемент.Записать
	Next Count

End Sub
"}
},
{0,
{"9.54. Считывание данных из файла xls",0,0,"9.54","Док = ПолучитьCOMОбъект(Путь + ""ценыконкурентов.xls"");
КоличествоСтраниц = 2;

Для ТекНомер = 1 По КоличествоСтраниц Цикл
	Контрагент = Док.Sheets(ТекНомер).Cells(1,1).Value;
	Товар 	   = Док.Sheets(ТекНомер).Cells(2,2).Value;
	Цена 	   = Док.Sheets(ТекНомер).Cells(2,3).Value;

	счСтроки = 3;
	Сообщить(Строка(Товар) + ""-"" + Строка(Цена));

	Пока СокрЛП(Товар) <> """" Цикл	// можно использовать другой признак 
									 // окончания данных на листе
		Товар = Док.Sheets(ТекНомер).Cells(СчСтроки,2).Value;
		Цена  = Док.Sheets(ТекНомер).Cells(СчСтроки,3).Value;

		Сообщить(Строка(Товар) + ""-"" + Строка(Цена));
		
		счСтроки = счСтроки + 1;
		
	КонецЦикла;

КонецЦикла;	

Док.Application.Quit();"}
},
{0,
{"9.55. Запуск макроса Excel",0,0,"9.55","Попытка

	// Создать объект.
	Excel = Новый COMОбъект(""Excel.Application""); 

Исключение	
	Сообщить(""Не удалось инициализировать Excel"");
	
	Возврат;
	
КонецПопытки;	
	
Попытка

	// В реальном примере путь может быть совершенно другим.
	Excel.Workbooks.Open(""c:\doc.xls"");

	// Запустить макрос с именем «Оформление».
	Excel.Run(""Оформление"");
	Excel.Visible = Истина;

Исключение	

	// Если произойдет ошибка выводятся данные об ошибке и объект закрывается.
	Сообщить(ОписаниеОшибки());
	Excel.Quit();
	
КонецПопытки;	"}
},
{0,
{"9.56. Создание документа Excel по имеющемуся оформлению",0,0,"9.56","Попытка

	// Создать объект.
	Excel = Новый COMОбъект(""Excel.Application""); 

Исключение	
	Сообщить(""Не удалось инициализировать Excel"");
	
	Возврат;
	
КонецПопытки;	

Попытка

	// Если при отработке следующего фрагмента кода произойдет ошибка
	// объект ""Excel.Application"" будет закрыт.

	// Открыть книгу, содержащую шаблон оформления.
	Excel.Workbooks.Open(""c:\doc.xls"");

	НомерКниги = Excel.Workbooks.Count;
	Книга 	   = Excel.Workbooks.Item(НомерКниги);
	Лист 	   = Excel.ActiveSheet;

	// Создать новую книгу (в нее будем записывать данные).
	Excel.Application.Workbooks.Add(1);
	
	НомерКниги = Excel.Workbooks.Count;
	КнигаНовая = Excel.Workbooks.Item(НомерКниги);
	ЛистНовый  = Excel.ActiveSheet;

	// Установить ширину колонки в новой книге.
	ЛистНовый.Columns(""B"").ColumnWidth = 40;
	
	// Копировать область из книги-шаблона в новую книгу.
	Лист.Range(""Шапка"").Copy(ЛистНовый.Range(""A1:E3"")); 
	ЛистНовый.Cells(1, 1).Value = ""Наименование контрагента"";
	
	// Считаем, что в нашем случае необходимо сформировать только
	// две строки табличной части
	Для НомерСтроки = 1 По 2 Цикл
		Лист.Range(""Строка"").Copy(ЛистНовый.Range(ЛистНовый.Cells(3 + НомерСтроки,1), ЛистНовый.Cells(3 + НомерСтроки, 5)));

		// Записать значение в ячейку листа новой таблицы	
		// в реальном примере данные будут браться из информационной базы
		ЛистНовый.Cells(3 + НомерСтроки, 1).Value = НомерСтроки;
		ЛистНовый.Cells(3 + НомерСтроки, 2).Value =	""Наименование номенклатурной позиции ""
													+ Строка(НомерСтроки);
		ЛистНовый.Cells(3 + НомерСтроки, 3).Value = НомерСтроки;
		ЛистНовый.Cells(3 + НомерСтроки, 4).Value = НомерСтроки;
		ЛистНовый.Cells(3 + НомерСтроки, 5).Value = НомерСтроки;
	КонецЦикла;

	Excel.Visible = Истина;

Исключение	
	Сообщить(ОписаниеОшибки());
	Excel.Quit();
	
КонецПопытки;	"}
},
{0,
{"9.57. Выгрузка данных в Microsoft Office Word",0,0,"9.57","Попытка
	MSWord = Новый COMОбъект(""Word.Application"");

Исключение 
	Сообщить(""Не удалось инициализировать Microsoft Word"");
	
	Возврат;
	
КонецПопытки;

Запрос = Новый Запрос;

// Получить данные для формируемого прайс-листа.
Запрос.Текст = 
""ВЫБРАТЬ
|	ЦеныКомпанииСрезПоследних.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
|	ЦеныКомпанииСрезПоследних.Цена,
|	ЦеныКомпанииСрезПоследних.Номенклатура.Наименование КАК Номенклатура, 
|	1 КАК Количество
|ИЗ
|	РегистрСведений.ЦеныКомпании.СрезПоследних(&Дата, ТипЦен = &ТипЦен) КАК ЦеныКомпанииСрезПоследних
|
|УПОРЯДОЧИТЬ ПО
|	Номенклатура
|
|ИТОГИ Количество(Количество) ПО
|	ОБЩИЕ"";

Запрос.УстановитьПараметр(""Дата""  , ТекущаяДата());
Запрос.УстановитьПараметр(""ТипЦен"", ТипЦен);

Результат = Запрос.Выполнить();			 

Попытка

	// Создать новый документ
	MSWord.Documents.Add();
	Документ = MSWord.ActiveDocument();
	
	// Добавить новый параграф в созданный документ.
	Документ.Paragraphs.Add();
	
	НомерПараграфа = Документ.Paragraphs.Count();
	Параграф 	   = Документ.Paragraphs.Item(НомерПараграфа);

	// В созданный параграф вставить новый «диапазон» 
	// и разместить в нем текст «Прайс-Лист».
	Параграф.Range.InsertAfter(""Прайс-Лист"");

	// Установить стиль параграфа «Заголовок 1» (он должен быть определен).
	Параграф.Range.Style = ""Заголовок 1"";
	
	Документ.Paragraphs.Add();
	НомерПараграфа = Документ.Paragraphs.Count();
	Параграф 	   = Документ.Paragraphs.Item(НомерПараграфа);
	Параграф.Range.InsertAfter(""Сформирован на дату: "" + Строка(ТекущаяДата()));
	Параграф.Range.Style = ""Обычный"";
	
	ВыборкаКоличества = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаКоличества.Следующий();
	КоличествоСтрок = ВыборкаКоличества.Количество;
	
	Документ.Paragraphs.Add();
	
	НомерПараграфа = Документ.Paragraphs.Count();
	Параграф 	   = Документ.Paragraphs.Item(НомерПараграфа);

	// Вставить таблицу с количеством строк равным количеству записей
	// в выборке результата запроса и с тремя колонками
	Документ.Tables.Add(Параграф.Range, КоличествоСтрок, 3);

	// Получить таблицу как объект в отдельную переменную
	// учитывая тот факт, что таблица у нас единственная	
	Таблица = Документ.Tables.Item(1);

	// Записать данные в ячейку таблицы строка №1, колонка №1
	Таблица.Cell(1,1).Range().InsertAfter(""Номенклатура"");

	// Установить цвет фона в ячейке
	Таблица.Cell(1,1).Shading.BackgroundPatternColor = 16776960;
	Таблица.Cell(1,2).Range().InsertAfter(""Цена"");
	Таблица.Cell(1,2).Shading.BackgroundPatternColor = 16776960;
	Таблица.Cell(1,3).Range().InsertAfter(""Ед.Изм."");
	Таблица.Cell(1,3).Shading.BackgroundPatternColor = 16776960;
	
	НомерСтроки = 1;
	Выборка = ВыборкаКоличества.Выбрать();

	Пока Выборка.Следующий() Цикл
		НомерСтроки = НомерСтроки + 1;
		
		Таблица.Cell(НомерСтроки,1).Range().InsertAfter(Выборка.Номенклатура);
		Таблица.Cell(НомерСтроки,2).Range().InsertAfter(Строка(Выборка.Цена));
		Таблица.Cell(НомерСтроки,3).Range().InsertAfter(Выборка.ЕдиницаИзмерения);
		
	КонецЦикла;	
	
	MSWord.Visible = Истина;
	MSWord.Activate();

Исключение

	// Если произойдет ошибка выводятся данные об ошибке и объект закрывается.
	Сообщить(ОписаниеОшибки());
	MSWord.Application.Quit();

КонецПопытки;"}
},
{0,
{"9.58. Назначение обработчика события",0,0,"9.58","Процедура Word(Кнопка)

	msword = Новый COMОбъект(""Word.Application"");
	
	// Работа с COM объектом
	// ...
	
	ДобавитьОбработчик msword.DocumentBeforeClose, ПриЗакрытииДокумента;
	msword.Visible = Истина;

КонецПроцедуры"}
},
{0,
{"9.59. Обработчик события",0,0,"9.59","Процедура ПриЗакрытииДокумента(Документ,Отказ)

	// Обработка закрываемого документа	
	// ...

КонецПроцедуры	
"}
},
{0,
{"9.60. Запрос к базе данных SQL",0,0,"9.60","стрПодключения = «Driver={SQL Server};»
стрПодключения = стрПодключения + ИмяСервера + «;»;
стрПодключения = стрПодключения + «Uid=» + ИмяПользователя + «;»;
стрПодключения = стрПодключения + «Pwd=» + Пароль + «;»;
стрПодключения = стрПодключения + «DataBase =» + ИмяБазы + «;»;
стрПодключения = стрПодключения + «Pwd=» + Пароль + «;»;

Connection = Новый COMОбъект(""ADODB.Connection""); 

Connection.OpenServer = стрПодключения;

RS = Новый COMОбъект(""ADODB.Recordset""); 

// Запрос к базе на языке SQL запросов.
RS.Open(""Select * from TradeUnit"", Connection);

Пока RS.EOF() = 0 Цикл

	// Можно обращаться и обрабатывать значения полей выборки.
	ИД = RS.Fields(""ID"").Value;
	Код = RS.Fields(""Code"").Value;

	// Обработка других полей
	//	...

	RS.MoveNext();	
	
КонецЦикла;	

RS.Close();
Connection.Close();"}
},
{0,
{"9.61. Работа с 1С:Предприятием через OLE",0,0,"9.61","V8 = Новый COMОбъект(""V81.Application"");

Попытка
	Открытие = V8.Connect(""File="""""" + Путь + """""";Usr=""""Usr1"""";"");

Исключение
	Предупреждение(""База данных не открыта!!!"");
	
	Возврат;
	
КонецПопытки;

МенеджерДокумента = V8.Документы.РеализацияТоваров;
Документ 		  = МенеджерДокумента.СоздатьДокумент();
ФормаДокумента 	  = Документ.ПолучитьФорму();

ФормаДокумента.ОткрытьМодально();"}
},
{0,
{"9.62. Макрос Excel",0,0,"9.62","Sub load()

	Dim trade As Object
	Dim СправочникНоменклатуры As Object
	Dim ГруппаНоменклатуры As Object
	Dim Элемент As Object
	Dim Форма As Object
	
	Set trade = CreateObject(""V81.Application"")
	trade.Connect (""File=""""C:\DemoTrd4"""";Usr=""""Федоров (администратор)"""";"")
	
	Set СправочникНоменклатуры = trade.Справочники.Номенклатура
	Set ГруппаНоменклатуры = СправочникНоменклатуры.СоздатьГруппу()
	ГруппаНоменклатуры.Наименование = ""***** Экспорт из Excel ******""
	ГруппаНоменклатуры.Записать

	N = 4	'Количество загружаемых элементов справочника
	
	For Count = 2 To 5
		Set Элемент = СправочникНоменклатуры.СоздатьЭлемент()
		Элемент.Код = Application.Cells(Count, 1).Value
		Элемент.Артикул = Application.Cells(Count, 2).Value
		Элемент.Наименование = Application.Cells(Count, 3).Value
		Элемент.НаименованиеПолное = Application.Cells(Count, 4).Value
		Элемент.Родитель = ГруппаНоменклатуры.Ссылка
		Set Форма = Элемент.ПолучитьФорму()
		Форма.ОткрытьМодально
	Next Count

End Sub"}
},
{0,
{"9.63. Обработчик события При отправке данных подчиненному",0,0,"9.63","Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента)

	Если ТипЗнч(ЭлементДанных) = Тип(""ДокументОбъект.РеализацияТоваров"") Тогда
		
		Если ЭлементДанных.Склад <> Склад Тогда
			ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры"}
},
{0,
{"9.64. Обработчик события При получении данных от подчиненного",0,0,"9.64","Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад)

	Если ТипЗнч(ЭлементДанных) = Тип(""ДокументОбъект.РеализацияТоваров"") Тогда
		ПолучениеЭлемента = ПолучениеЭлементаДанных.Принять;
		
	КонецЕсли;

КонецПроцедуры"}
},
{0,
{"9.65. Обработчик события При получении данных от главного",0,0,"9.65","Процедура ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад)

	Если ТипЗнч(ЭлементДанных) = Тип(""ДокументОбъект.РеализацияТоваров"") Тогда
		
		Если ПланыОбмена.ИзменениеЗарегистрировано(Ссылка, ЭлементДанных) Тогда
			ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
			
		КонецЕсли
		
	КонецЕсли;

КонецПроцедуры"}
},
{0,
{"9.66. Обработчик события При отправке данных подчиненному",0,0,"9.66","Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента)

	Если НеВыгружатьОбъекты Тогда
		
		// Проверить «ненужные типы», условие может содержать проверку на несколько типов.
		Если ТипЗнч(ЭлементДанных) = Тип(«ДокументОбъект.РеализацияТоваров») Тогда
			ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить;
			
		КонецЕсли;	
		
	КонецЕсли;	

КонецПроцедуры"}
},
{0,
{"9.67. Просмотр объектов, для которых зарегистрированы изменения",0,0,"9.67","ЗаписьXML = Новый ЗаписьXML();

ЗаписьXML.УстановитьСтроку();

Узел = ПланыОбмена.НаСклады.НайтиПоКоду(""С1"");
ЗапСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
ЗапСообщения.НачатьЗапись(ЗаписьXML, Узел);

Выборка = ПланыОбмена.ВыбратьИзменения(Узел, ЗапСообщения.НомерСообщения);

Пока Выборка.Следующий() Цикл
	Данные = Выборка.Получить();
	Сообщить(Данные);
	
КонецЦикла;	

ЗапСообщения.ПрерватьЗапись();
Стр = ЗаписьXML.Закрыть();		"}
},
{0,
{"9.68. Выгрузка данных",0,0,"9.68","Процедура Выгрузка(Элемент)
	Путь = ""c:\"";	//реальный путь к каталогу, в котором создаются файлы
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл(Путь + ""выгрузка.xml"");
	Узел = ПланыОбмена.Поставка.НайтиПоКоду(""Маг1"");

	ЗапСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗапСообщения.НачатьЗапись(ЗаписьXML, Узел);

	Выборка = ПланыОбмена.ВыбратьИзменения(Узел, ЗапСообщения.НомерСообщения);
	
	Пока Выборка.Следующий() Цикл
		Данные = Выборка.Получить();

		Если ТипЗнч(Данные) = Тип(""ДокументОбъект.РеализацияТоваров"") Тогда
			ВыгрузкаРеализации(ЗаписьXML, Данные);

		Иначе	// все остальные объекты
			ЗаписатьXML(ЗаписьXML, Данные);
			
		КонецЕсли;

	КонецЦикла;	

	ЗапСообщения.ЗакончитьЗапись();
	ЗаписьXML.Закрыть();

КонецПроцедуры"}
},
{0,
{"9.69. Процедура ВыгрузкаРеализации()",0,0,"9.69","Процедура ВыгрузкаРеализации(ЗаписьXML, Документ)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента(""DocumentObject.ПередачаТовара"");
	
	ЗаписатьXML(ЗаписьXML, Документ.Ссылка.УникальныйИдентификатор(), ""Ref""			   , НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, Документ.ПометкаУдаления					, ""DeletionMark""   , НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, Документ.ВалютаДокумента					, ""ВалютаДокумента"", НазначениеТипаXML.Явное);

	// Остальные свойства документа.
	…	
	// Табличная часть.
	ЗаписьXML.ЗаписатьНачалоЭлемента(""Товары"");

	Для Каждого ТекСтрока Из Документ.Товары Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента(""Row"");

		ЗаписатьXML(ЗаписьXML, ТекСтрока.Номенклатура, ""Номенклатура"", НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, ТекСтрока.Количество	 , ""Количество""	 , НазначениеТипаXML.Явное);

		// Остальные реквизиты табличной части.
			…
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;	

	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры"}
},
{0,
{"9.70. Загрузка данных",0,0,"9.70","Процедура Загрузка(Элемент)

	Путь = ""c:\"";	//реальный путь к каталогу, в котором создаются файлы

	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(Путь + ""выгрузка.xml"");

	ЧтСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтСообщения.НачатьЧтение(ЧтениеXML);
	ПланыОбмена.УдалитьРегистрациюИзменений(ЧтСообщения.Отправитель, ЧтСообщения.НомерСообщения);

	Пока ВозможностьЧтенияДанных(ЧтениеXML) Цикл
		Данные = ПрочитатьДанные(ЧтениеXML);

		Если РазрешениеКоллизий(Данные) Тогда
			Данные.ОбменДанными.Отправитель = ЧтСообщения.Отправитель;
			Данные.ОбменДанными.Загрузка = Истина;
			Данные.Записать();
			
		КонецЕсли;	

	КонецЦикла;	

	ЧтСообщения.ЗакончитьЧтение();
	ЧтениеXML.Закрыть();

КонецПроцедуры"}
},
{0,
{"9.71. Функция ВозможностьЧтенияДанных()",0,0,"","Функция ВозможностьЧтенияДанных(ЧтениеXML)

	ТипXML = ПолучитьXMLТип(ЧтениеXML);
	
	Если ТипXML = Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипXML.ИмяТипа = ""DocumentObject.ПередачаТовара"" И	ТипXML.URIПространстваИмен = """" Тогда
		
		Возврат Истина;
		
	КонецЕсли;

	Возврат ВозможностьЧтенияXML(ЧтениеXML);

КонецФункции "}
},
{0,
{"9.72. Функция ПрочитатьДанные()",0,0,"9.72","Функция ПрочитатьДанные(ЧтениеXML)

	ТипXML = ПолучитьXMLТип(ЧтениеXML);

		Если ТипXML.ИмяТипа = ""DocumentObject.ПередачаТовара"" И	ТипXML.URIПространстваИмен = """" Тогда
			
			Возврат ЧтениеРеализации(ЧтениеXML);
			
		КонецЕсли;

		Возврат ПрочитатьXML(ЧтениеXML);

КонецФункции "}
},
{0,
{"9.73. Функция ЧтениеРеализации()",0,0,"9.73","Функция ЧтениеРеализации(ЧтениеXML)
	ЧтениеXML.Прочитать();

	// Работа со ссылкой документа.
	ПолученнаяСсылка = ПрочитатьXML(ЧтениеXML);
	Док = Документы.ПоступлениеТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор(ПолученнаяСсылка));

	Документ = Док.ПолучитьОбъект();

	Если Документ = Неопределено Тогда
		Документ = Документы.ПоступлениеТоваров.СоздатьДокумент();
		Документ.УстановитьСсылкуНового(Док);
		Документ.Дата = ТекущаяДата;
		Документ.УстановитьНовыйНомер();
		
	КонецЕсли;	

	Документ.ПометкаУдаления = ПрочитатьXML(ЧтениеXML);
	Документ.ВалютаДокумента = ПрочитатьXML(ЧтениеXML);

	// Табличная часть ""Товары.
	// Построчное чтение.
	ЧтениеXML.Прочитать();
	Документ.Товары.Очистить();

	Пока ЧтениеXML.Имя = ""Row"" Цикл

		// Позиционируемся на узле с номенклатурой.
		ЧтениеXML.Прочитать();
		НоваяСтрока = Документ.Товары.Добавить();
		НоваяСтрока.Номенклатура = ПрочитатьXML(ЧтениеXML);
		НоваяСтрока.Количество = ПрочитатьXML(ЧтениеXML);
		
		// Читаем конец узла Row.
		ЧтениеXML.Прочитать();
		
	КонецЦикла;

	// Читаем конец табличной части.
	ЧтениеXML.Прочитать();

	// Читаем конец документа.
	ЧтениеXML.Прочитать();

	Возврат(Документ);
	
КонецФункции "}
},
{0,
{"9.74. Функция РазрешениеКоллизий()",0,0,"9.74","Функция РазрешениеКоллизий(Данные)

	Если ТипЗнч(Данные) = Тип(""ДокументОбъект.ПоступлениеТоваров"") Тогда
		
		Если Не Данные.ЭтоНовый() Тогда
			СсылкаНаУзел = ПланыОбмена.Поставка.НайтиПоКоду(""Опт"");
			
			Если ПланыОбмена.ИзменениеЗарегистрировано(СсылкаНаУзел, Данные) Тогда
				
				Возврат(Ложь);
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;	

	Возврат(Истина);

КонецФункции	"}
},
{0,
{"9.75. Регистрация изменений данных для конкретного узла",0,0,"9.75","СсылкаНаУзел = ПланыОбмена.НаСклады.НайтиПоКоду(""С1"");
ПланыОбмена.ЗарегистрироватьИзменения(СсылкаНаУзел, Неопределено);"}
},
{0,
{"9.76. Регистрация изменений данных для конкретного узла и объекта конфигурации",0,0,"9.76","СсылкаНаУзел = ПланыОбмена.НаСклады.НайтиПоКоду(""С1"");
ПланыОбмена.ЗарегистрироватьИзменения(СсылкаНаУзел,	Метаданные.Справочники.Номенклатура);"}
},
{0,
{"9.77. Регистрация изменений данных для конкретного узла и объекта",0,0,"9.77","СсылкаНаУзел = ПланыОбмена.НаСклады.НайтиПоКоду(""С1"");
ДокСсылка 	 = Документы.РеализацияТоваров.НайтиПоНомеру(НомерДок, ДатаПериода);

Если Не ДокСсылка.Пустая() Тогда
	ПланыОбмена.ЗарегистрироватьИзменения(СсылкаНаУзел, ДокСсылка);
	
КонецЕсли;	"}
},
{0,
{"9.78. Динамическое обращение к веб-сервису",0,0,"9.78","ИмяТочкиПодключения = ИмяWebСервиса + ""SOAP"";

// Создание определения по адресу Web сервиса
Определения = Новый WSОпределения(АдресWebСервиса + ""?wsdl"");

// Создание прокси
Прокси = Новый WSПрокси(Определения, URIПространстваИмен, ИмяWebСервиса, ИмяТочкиПодключения);

// Обращение к методу Web сервиса	
Данные = Прокси.Получить(КодДокумента);

// Обход полученных данных"}
},
{0,
{"9.79. Статическое обращение к веб-сервису",0,0,"9.79","ИмяТочкиПодключения = ИмяWebСервиса + ""SOAP"";

// Создание прокси
Прокси = WSСсылки.WSСсылка1.СоздатьWSПрокси(URIПространстваИмен, ИмяWebСервиса, ИмяТочкиПодключения);

// Обращение к методу Web сервиса
Данные = Прокси.Получить();

// Обход полученных данных
"}
},
{0,
{"9.80. Операция Web-сервиса",0,0,"9.80","Функция ПолучитьТовары()
	
	// Создаем типы объектов, описанных в глобальной фабрике
	ТоварТип 	= ФабрикаXDTO.Тип(""http://www.sample-package.org"", ""Товар"");
	КорневойТип = ФабрикаXDTO.Тип(""http://www.sample-package.org"", ""Товары"");
		
	// Создаем элемент, который будет корневым 
	Корневой = ФабрикаXDTO.Создать(КорневойТип);
		
	Выборка = Справочники.Номенклатура.Выбрать();
	Пока Выборка.Следующий() Цикл
			
		// Пропускаем группы
		Если Выборка.ЭтоГруппа Тогда Продолжить; КонецЕсли;
			
		// Создаем объект XDTO соответствующий элементу справочника
		ЭлементНоменклатуры = ФабрикаXDTO.Создать(ТоварТип);
			
		// Заполняем свойства объекта
		ЭлементНоменклатуры.Наименование 	 = Выборка.Наименование;
		ЭлементНоменклатуры.ПризнакКомплекта = Ложь;
		ЭлементНоменклатуры.Код 			 = Выборка.Код;
			
		// Включаем созданный объект в список товаров
		//(свойство корневого объекта)
		Корневой.СписокТоваров.Добавить(ЭлементНоменклатуры);
		
	КонецЦикла;	
	
	// Возвращаем объект XDTO
	Возврат(Корневой);
	
КонецФункции"}
},
{0,
{"9.81. Обработчик события ItemCommand",0,0,"9.81","private void commandPanel_ItemCommand(object source,System.Web.UI.WebControls.CommandEventArgs e)
{
	if (e.CommandName == ""ShowAll"")
	{
		foreach (V8Filter filter in listDS.Filter) 
		{ 
			filter.Checked = false; 
		} 
	grid.Refresh(); 
	}
} "}
},
{0,
{"9.82. Обработчик события ItemDataBound",0,0,"9.82","private void Grid_ItemDataBound(object sender, _1C.V8.WebControls.V8GridItemEventArgs e)
{
	foreach (TableCell cell in e.Item.Cells) 
		cell.Wrap = false; 
}"}
},
{0,
{"9.83. Функция ПолучитьЗначениеПоУмолчанию()",0,0,"9.83","Функция ПолучитьЗначениеПоУмолчанию(Пользователь, Свойство) Экспорт 

	Отбор = Новый Структура;
	Отбор.Вставить(""Пользователь"", Пользователь);
	Отбор.Вставить(""Настройка""	 , ПланыВидовХарактеристик.НастройкиПользователей.НайтиПоНаименованию(Свойство));
 
	Результат = РегистрыСведений.НастройкиПользователей.Получить(Отбор);

	Возврат Результат.Значение;

КонецФункции	"}
},
{0,
{"9.84. Обработчик события PageLoad",0,0,"9.84","private void Page_Load(object sender, System.EventArgs e)
{
	if (!IsPostBack)
	{
		Title.Text = ListDataSource.TableInfo.Presentation;

		// Добавляемый код.
		ListDataSource.Connection.Open(); 
		try 
	 { 
			ObjectRef currUser = (ObjectRef)V8.Get(ListDataSource.Connection, ListDataSource.Connection.Connection, глТекущийПользователь""); 

			ObjectRef mainWH = (ObjectRef)V8.Call(ListDataSource.Connection, ListDataSource.Connection.Connection, ""ПолучитьЗначениеПоУмолчанию"", currUser, ""ОсновнойСклад""); 
			if (!mainWH.IsEmpty()) 
			{ 
				V8Filter filter = ListDataSource.Filter[""Склад""]; 
				filter.Checked = true; 
				filter.Condition = V8FilterCondition.Equal; 
				filter.ValueType1 = ListDataSource.Metadata.TypesInfo[V8.TypeNameFromValue(mainWH)]; 
				filter.Value1 = mainWH; 
				filter.Presentation1 = mainWH.Presentation(ListDataSource.Connection); 
			} 
		} 
		finally 
		{ 
			ListDataSource.Connection.Close(); 
		} 
	}
}"}
},
{0,
{"9.85. Добавление пространства имен _1C.V8.Data ",0,0,"9.85","using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using _1C.V8.WebControls;
using _1C.V8.Data;"}
}
}
}
}